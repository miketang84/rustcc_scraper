https://www.toyota.ca/toyota/en/vehicles/tacoma/overview?utm_source=Reddit&utm_medium=display&utm_campaign=FY25_Tacoma_EN_TSC-TAC-16_Mega_Post_EN&utm_content=Mega_Post_EN
-->>-->>
Tacoma TRD Off-Road Premium shown in Solar Octane and Tacoma Hybrid Trailhunter shown in Bronze Oxide 1 / 19 Tacoma TRD Sport shown in Blue Crush Metallic 1 / 19 Tacoma Hybrid Trailhunter shown in Bronze Oxide 1 / 19 Tacoma TRD Off-Road Interior shown in Grey/Black with Anodized Blue Trim 1 / 19 Tacoma Hybrid Limited shown in Wind Chill Pearl 1 / 19 Tacoma Hybrid TRD Pro shown in Terra and Tacoma Hybrid Trailhunter shown in Bronze Oxide 1 / 19 Tacoma Hybrid Trailhunter Interior shown in Mineral 1 / 19 Tacoma Hybrid TRD Pro shown in White with Black Roof 1 / 19 Tacoma TRD Off-Road Premium shown in Solar Octane 1 / 19 Tacoma Hybrid Trailhunter shown in Bronze Oxide and Tacoma Hybrid TRD Pro shown in White with Black Roof 1 / 19 Tacoma Hybrid TRD Pro shown in White with Black Roof 1 / 19 Tacoma Hybrid Trailhunter shown in Bronze Oxide 1 / 19 Tacoma Hybrid TRD Pro Interior 1 / 19 Tacoma TRD Off-Road Premium shown in Solar Octane 1 / 19 Tacoma Hybrid Trailhunter Bed shown with Optional Accessories 1 / 19 Tacoma Hybrid Trailhunter shown in Bronze Oxide 1 / 19 Tacoma Hybrid Trailhunter shown in Bronze Oxide 1 / 19 Tacoma TRD Off-Road Premium shown in Solar Octane 1 / 19 Tacoma Hybrid TRD Pro shown in White with Black Roof 1 / 19 Tacoma TRD Off-Road Premium shown in Solar Octane and Tacoma Hybrid Trailhunter shown in Bronze Oxide 1 / 19 Tacoma TRD Sport shown in Blue Crush Metallic 1 / 19

======>
https://old.reddit.com/r/ToyotaTacoma
-->>-->>
ToyotaTacoma join leave 144,280 readers 93 users here now Welcome to r/ToyotaTacoma Rules The subreddit rules are listed here. Please familiarize yourself with them before posting or commenting. General Etiquette Absolutely no harassment, bigotry, spamming, trolling or otherwise hateful posts or comments will be tolerated. This is grounds for immediate banning. Be nice! No distracted driving pictures Any picture that can be construed as the driver driving distracted, or a passenger distracting a driver, will be removed and will be banned. This includes driving videos or pictures of a speedometer over 0 MPH No buying, selling, or trading. This is not the place to buy, sell, trade, or otherwise advertise for the transfer items from one individual to another. Please see r/ToyotaTacomaSales . Stay on topic . Talk about trucks. No off topic posting or commenting. No politics No discussion or expression of political beliefs. This includes but is not limited to: advocating bringing harm to law enforcement, overthrowing the US government, support for/against a political candidate, or boycotts of companies based on their political alignment. Truck valuation requests Asking if 'this is a good deal' or asking 'what do you think this is worth' is not allowed. Use /r/ToyotaTacomaSales for these requests. No memes This is not the place for memes. Most crossposts will be deleted. Related Subreddits Tacoma World Toyota Tacoma Sales a community for 11 years
======>
https://smithay.github.io/book/
-->>-->>
Light (default) Rust Coal Navy Ayu The Smithay Handbook document.getElementById('sidebar-toggle').setAttribute('aria-expanded', sidebar === 'visible');
                    document.getElementById('sidebar').setAttribute('aria-hidden', sidebar !== 'visible');
                    Array.from(document.querySelectorAll('#sidebar a')).forEach(function(link) {
                        link.setAttribute('tabIndex', sidebar === 'visible' ? 0 : -1);
                    }); Introduction Welcome to the Smithay Handbook. This is a work in progress, and intended to serve as a general manual for building Wayland-related
software in Rust, using the tools from the Smithay project . The project revolves around 3 main components: The wayland-rs repository contains low-level bindings to the
Wayland protocols, under the form of several crates. The two most notable being wayland-client and wayland-server , which are the core bindings for client-side
and server-side apps. SCTK , or Smithay Client ToolKit, is a crate designed
to handle a significant portion of the plumbing required for writing Wayland client apps. It comes on top
of wayland-client, and this book will present it as well. Smithay is the flagship crate of the project, and is designed as
a framework for writing Wayland servers (also called compositors). It is built on top of the wayland-server
crate, and also handles most of the interaction with the system (input devices, graphics, udev, sessions, ...). The first part of this book is dedicated to client-side apps, while the second part focuses of server-side.
If you are interested by the server-side stuff, it is recommended to first get familiar with the client-side,
as it is easier to get into and a lot of its concepts map to server-side.
======>
http://github.com/carthage-software/fennec
-->>-->>
Repository files navigation README Apache-2.0 license MIT license Fennec: The Oxidized PHP Toolchain Fennec is a toolchain for PHP that aims to provide a set of tools to help developers write better code.
It is inspired by the Rust programming language and its toolchain, and aims to provide similar functionality for PHP. Disclaimer Warning Fennec is in an early stage of development. Many features are not yet implemented, and existing functionality may change, break, or stop working without notice.
While we are not actively promoting or advertising the project, we are working in public to share our progress with the community. Roadmap Core Functionality String Interning: crates/interner Lexer: crates/lexer crates/token AST: crates/node crates/ast Parser: crates/parser Source Management: crates/source AST Traversal / Walk: crates/traverser crates/walker Name Resolution: crates/names Code Fixer: crates/fixer Error Reporting: crates/reporting Semantic Analysis: crates/semantics Symbol Table: crates/symbol-table Linter: crates/linter Configuration: crates/config String Case Conversion: crates/casing Formatter Static Analyzer Refactoring Code Generation Documentation Generation Docblock Parser crates/docblock Test Runner Tooling CLI Tool: src/main.rs - In Progress, Basic Functionality Implemented. Web Interface Language Server Protocol Editor Integration Installation cargo install --git https://github.com/carthage-software/fennec Installation from source git clone https://github.com/carthage-software/fennec cd fennec
cargo install --path . Usage For a quick start, you can refer to the example configuration files provided: Simple configuration: examples/fennec.toml Full configuration with all possible options: examples/fennec-full.toml You can try Fennec by navigating to the examples directory and running the linter on the sample PHP files: cd examples
fennec lint This will analyze the PHP files located in the examples/src/ directory and display any linting errors. How You Can Help Fennec is a community-driven project, and we‚Äôd love for you to join us! Here are some ways you can contribute: Suggest Ideas : Have an idea for Fennec? We‚Äôre open to suggestions that can make the toolchain even better! Help Write Documentation : Clear, user-friendly documentation is key to making Fennec accessible to everyone. If you enjoy writing or organizing docs, we'd love your help. Contribute Code : Join us in building Fennec! Please discuss any feature or bug fixes in the issues first to ensure we coordinate effectively. Sponsor the Project : If you‚Äôd like to support Fennec financially, consider sponsoring @azjezz . Every contribution helps! Help with Art : Fennec could use a logo! We‚Äôd appreciate the help of a skilled artist to create an original logo for Fennec. (Please note that AI-generated art will not be accepted.) Inspiration Fennec is inspired by several tools and projects that have significantly contributed to the development community: Clippy : A collection of lints to catch common mistakes and improve your Rust code. OXC : A JavaScript toolchain written in Rust. php-rust-tools/parser : A PHP parser written in Rust, which influenced our parsing approach. slackhq/hakana : A static analysis tool for HackLang written in Rust, by the creator of Psalm . These tools have inspired us and helped shape Fennec's design and functionality. Acknowledgements We would like to acknowledge the following PHP tools that have greatly helped hundreds of thousands of PHP developers in their journey,
ourselves included: PHP CS Fixer : A tool to automatically fix PHP Coding Standards issues. Psalm : A static analysis tool for finding errors in PHP applications. PHPStan : PHP Static Analysis Tool. PHP_CodeSniffer : Detects violations of a defined set of coding standards. While Fennec is intended to be a comprehensive toolchain that may eventually replace some of these tools,
we deeply appreciate their contributions and the foundation they have built for the PHP community. License Fennec is licensed under either of MIT License (MIT) - see LICENSE-MIT file for details Apache License, Version 2.0 (Apache-2.0) - see LICENSE-APACHE file for details at your option. Contribution Unless you explicitly state otherwise, any contribution intentionally submitted for inclusion in Fennec by you shall be dual licensed as above, without any additional terms or conditions. Thank you for your interest in Fennec. We look forward to sharing our progress and collaborating with the community as the project evolves.

======>
https://github.com/juanperias/motion
-->>-->>
Repository files navigation README Apache-2.0 license MotionüçÉ Motion is a bare metal physics engine with which you can make simulations easily and quickly, also in rust. Get started ‚ú® let's start by making a simple event loop use std :: { thread , time :: Duration } ; use motion :: event_loop :: { EventLoop , EventLoopConfig } ; // The definition of this function depends on the context in which motion is used fn sleep ( duration : Duration ) { thread :: sleep ( duration ) ; } fn main ( ) { let el = EventLoop :: new ( EventLoopConfig { fps : 1 } ) ; el . start ( |_config| println ! ( "Hello! in the event loop" ) , sleep ) ; } now we are going to do something more complex by creating an object let mut obj = obj2d ( vec2 ( 75.0 , 200.0 ) , 2.0 , 2.0 , vec2 ( 2.0 , 231.0 ) , vec2 ( 2.0 , - 240.0 ) , 20.0 , Shape :: Circle , ) ; Why rust ü¶Ä Rust is a fast and efficient programming language, which makes it perfect for motion, plus it is very flexible allowing motion to be used everywhere.


======>
https://github.com/mcmah309/containeryard
-->>-->>
Repository files navigation README Apache-2.0 license ContainerYard ContainerYard is a declarative, reproducible, and reusable decentralized approach for defining containers. Think Nix flakes meets Containerfiles (aka Dockerfiles). ContainerYard breaks Containerfiles into modules. Modules represent some specific functionality of a container. e.g. The rust module defines rust's installation. Modules also support Tera templating. A yard.yaml file is used to compose modules into Containerfiles. # yaml-language-server: $schema=https://raw.githubusercontent.com/mcmah309/containeryard/master/src/schemas/yard-schema.json inputs : # Modules found on local paths modules : finalizer : local_modules/finalizer # Modules found in a remote repos remotes :
    - url : https://github.com/mcmah309/yard_module_repository commit : 992eac4ffc0a65d7e8cd30597d93920901fbd1cd modules : base : bases/ubuntu/base git_config : independent/git_config bash_flavor : apt/bash_interactive/flavors/mcmah309 outputs : # Output Containerfile created from modules Containerfile : # Module "base" from inputs - base : # Inputs, shell commands `$(..)` and ENV vars `$..` also supported version : " 24.04 " # Inline modules - RUN apt install git - git_config : user_name : $(git config --get user.name) email : $(git config --get user.email) - bash_flavor :
    - finalizer : hooks : build : # Command executed before the build. Will reload this file after the command is executed pre : yard update post : echo Done To compose the modules defined in yard.yaml into Containerfiles, simply run yard build . .
Which in the above case, will output a single Containerfile to your current directory. Declaring A Simple Module A module consists of a Tera template named Containerfile and a yard-module.yaml file
that defines configuration options and dependencies of the template. Containerfile FROM alpine:{{ version | default (value= "latest" ) }} RUN apk update \
    && apk upgrade \
    && apk add --no-cache ca-certificates \
    && update-ca-certificates yard-module.yaml # yaml-language-server: $schema=https://raw.githubusercontent.com/mcmah309/containeryard/master/src/schemas/yard-module-schema.json description : " This is a modules description " args : required : optional :
    - version # Files to be pulled in with this module required_files : For more module examples click here . Installation Note: yard is the cli tool for ContainerYard. Debian - Ubuntu, Linux Mint, Pop!_OS, etc. RELEASE_VER= < INSERT_CURRENT_VERSION > # e.g. RELEASE_VER='v0.2.6' deb_file= " containeryard_ $( echo $RELEASE_VER | sed ' s/^v// ' ) -1_amd64.deb " curl -LO https://github.com/mcmah309/containeryard/releases/download/ $RELEASE_VER / $deb_file dpkg -i " $deb_file " Cargo cargo install containeryard Why Use ContainerYard? Developers constantly rewrite the same Containerfile/Dockerfile configs. Besides taking away developer time,
these configs become hard to maintain/upgrade and adding new features feels like starting from scratch again.
The goal of ContainerYard is to foster a library ecosystem of composable Containerfile modules. Users
can then import these various modules with little to no configuration. Want Rust? Just add it to your yard.yaml file.
Want Flutter? Do the same. With ContainerYard you should never have to define certain Containerfile configs again. But
if you do want to do something custom, ContainerYard does not get in your way, everything is Containerfile based
and the output is a pure Containerfile. No need to learn a complex tool, no need to re-invent the wheel, Containerfiles
and Tera templates are powerful enough. Just let ContainerYard be the glue. Why Use Container Yard Over Nix Flakes Nix flakes guarantees reproducibility at the cost of developer flexibility. Container Yard is decentralized, allowing users to easily use different package managers and upstreams. As such, Container Yard sacrifices some reproducibility guarantees and gains complete developer flexibility. Container Yard is also extremely simple and built on familiar developer tools - Containerfiles and Tera templates. Contributing Feel free to open an issue with any suggestions/ideas/bugs you may have and/or create PR's. ContainerYard builds and uses its own dev container :D see here .
Open the project in vscode, click the "open in container" button and you are ready to go! Otherwise just use the provided Containerfile or your own local setup. Module Repositories https://github.com/mcmah309/yard_module_repository.git - mcmah309's Module Repository. Rust, Flutter, Bash, etc. *Feel free to create a PR to add your own!*
======>
https://github.com/mcmah309/yard_module_repository
-->>-->>
Skip to content {"props":{"docsUrl":"https://docs.github.com/get-started/accessibility/keyboard-shortcuts"}} {"resolvedServerColorMode":"day"} Navigation Menu Toggle navigation Sign in Product GitHub Copilot Write better code with AI Security Find and fix vulnerabilities Actions Automate any workflow Codespaces Instant dev environments Issues Plan and track work Code Review Manage code changes Discussions Collaborate outside of code Code Search Find more, search less Explore All features Documentation GitHub Skills Blog Solutions By company size Enterprises Small and medium teams Startups By use case DevSecOps DevOps CI/CD View all use cases By industry Healthcare Financial services Manufacturing Government View all industries View all solutions Resources Topics AI DevOps Security Software Development View all Explore Learning Pathways White papers, Ebooks, Webinars Customer Stories Partners Open Source GitHub Sponsors Fund open source developers The ReadME Project GitHub community articles Repositories Topics Trending Collections Enterprise Enterprise platform AI-powered developer platform Available add-ons Advanced Security Enterprise-grade security features GitHub Copilot Enterprise-grade AI features Premium Support Enterprise-grade 24/7 support Pricing Search or jump to... Search code, repositories, users, issues, pull requests... Search Clear Search syntax tips Provide feedback We read every piece of feedback, and take your input very seriously. Include my email address so I can be contacted Cancel Submit feedback Saved searches Use saved searches to filter your results more quickly Name Query To see all available qualifiers, see our documentation . Cancel Create saved search Sign in Sign up Reseting focus You signed in with another tab or window. Reload to refresh your session. You signed out in another tab or window. Reload to refresh your session. You switched accounts on another tab or window. Reload to refresh your session. Dismiss alert {{ message }} mcmah309 / yard_module_repository Public Notifications You must be signed in to change notification settings Fork 0 Star 3 License Apache-2.0 license 3 stars 0 forks Branches Tags Activity Star Notifications You must be signed in to change notification settings Code Issues 0 Pull requests 0 Actions Projects 0 Security Insights Additional navigation options Code Issues Pull requests Actions Projects Security Insights mcmah309/yard_module_repository {"props":{"initialPayload":{"allShortcutsEnabled":false,"path":"/","repo":{"id":830108630,"defaultBranch":"master","name":"yard_module_repository","ownerLogin":"mcmah309","currentUserCanPush":false,"isFork":false,"isEmpty":false,"createdAt":"2024-07-17T15:50:32.000Z","ownerAvatar":"https://avatars.githubusercontent.com/u/56412856?v=4","public":true,"private":false,"isOrgOwned":false},"currentUser":null,"refInfo":{"name":"master","listCacheKey":"v0:1721231433.341126","canEdit":false,"refType":"branch","currentOid":"bd48c9c9831b9ff433b22b8e1efa747059468dab"},"tree":{"items":[{"name":"bases","path":"bases","contentType":"directory"},{"name":"dependent","path":"dependent","contentType":"directory"},{"name":"independent","path":"independent","contentType":"directory"},{"name":"LICENSE","path":"LICENSE","contentType":"file"},{"name":"README.md","path":"README.md","contentType":"file"}],"templateDirectorySuggestionUrl":null,"readme":null,"totalCount":5,"showBranchInfobar":false},"fileTree":null,"fileTreeProcessingTime":null,"foldersToFetch":[],"treeExpanded":false,"symbolsExpanded":false,"isOverview":true,"overview":{"banners":{"shouldRecommendReadme":false,"isPersonalRepo":false,"showUseActionBanner":false,"actionSlug":null,"actionId":null,"showProtectBranchBanner":false,"publishBannersInfo":{"dismissActionNoticePath":"/settings/dismiss-notice/publish_action_from_repo","releasePath":"/mcmah309/yard_module_repository/releases/new?marketplace=true","showPublishActionBanner":false},"interactionLimitBanner":null,"showInvitationBanner":false,"inviterName":null,"actionsMigrationBannerInfo":{"releaseTags":[],"showImmutableActionsMigrationBanner":false,"initialMigrationStatus":null}},"codeButton":{"contactPath":"/contact","isEnterprise":false,"local":{"protocolInfo":{"httpAvailable":true,"sshAvailable":null,"httpUrl":"https://github.com/mcmah309/yard_module_repository.git","showCloneWarning":null,"sshUrl":null,"sshCertificatesRequired":null,"sshCertificatesAvailable":null,"ghCliUrl":"gh repo clone mcmah309/yard_module_repository","defaultProtocol":"http","newSshKeyUrl":"/settings/ssh/new","setProtocolPath":"/users/set_protocol"},"platformInfo":{"cloneUrl":"https://desktop.github.com","showVisualStudioCloneButton":false,"visualStudioCloneUrl":"https://windows.github.com","showXcodeCloneButton":false,"xcodeCloneUrl":"xcode://clone?repo=https%3A%2F%2Fgithub.com%2Fmcmah309%2Fyard_module_repository","zipballUrl":"/mcmah309/yard_module_repository/archive/refs/heads/master.zip"}},"newCodespacePath":"/codespaces/new?hide_repo_select=true\u0026repo=830108630"},"popovers":{"rename":null,"renamedParentRepo":null},"commitCount":"46","overviewFiles":[{"displayName":"README.md","repoName":"yard_module_repository","refName":"master","path":"README.md","preferredFileType":"readme","tabName":"README","richText":"\u003carticle class=\"markdown-body entry-content container-lg\" itemprop=\"text\"\u003e\u003cp dir=\"auto\"\u003eModule repository for \u003ca href=\"https://github.com/mcmah309/containeryard\"\u003ehttps://github.com/mcmah309/containeryard\u003c/a\u003e\u003c/p\u003e\n\u003c/article\u003e","loaded":true,"timedOut":false,"errorMessage":null,"headerInfo":{"toc":null,"siteNavLoginPath":"/login?return_to=https%3A%2F%2Fgithub.com%2Fmcmah309%2Fyard_module_repository"}},{"displayName":"LICENSE","repoName":"yard_module_repository","refName":"master","path":"LICENSE","preferredFileType":"license","tabName":"Apache-2.0","richText":null,"loaded":false,"timedOut":false,"errorMessage":null,"headerInfo":{"toc":null,"siteNavLoginPath":"/login?return_to=https%3A%2F%2Fgithub.com%2Fmcmah309%2Fyard_module_repository"}}],"overviewFilesProcessingTime":0}},"appPayload":{"helpUrl":"https://docs.github.com","findFileWorkerPath":"/assets-cdn/worker/find-file-worker-1583894afd38.js","findInFileWorkerPath":"/assets-cdn/worker/find-in-file-worker-f653046cb227.js","githubDevUrl":null,"enabled_features":{"code_nav_ui_events":false,"overview_shared_code_dropdown_button":false,"react_blob_overlay":false,"copilot_conversational_ux_embedding_update":false,"copilot_smell_icebreaker_ux":true,"copilot_workspace":false,"blob_edit_unsaved_changes_storage":false,"accessible_code_button":true,"overview_branch_and_tag_count":true,"overview_spoofed_commit_banner_react":true}}}} master 1 Branch Tags Go to file Code Folders and files Name Name Last commit message Last commit date Latest commit mcmah309 feat: Update Oct 26, 2024 bd48c9c ¬∑ Oct 26, 2024 History 46 Commits bases bases feat: Update android tools Oct 25, 2024 dependent dependent feat: Update Oct 26, 2024 independent independent refactor: Refactor Jul 25, 2024 LICENSE LICENSE Initial commit Jul 17, 2024 README.md README.md doc: Update Jul 28, 2024 View all files Repository files navigation README Apache-2.0 license Module repository for https://github.com/mcmah309/containeryard {"resolvedServerColorMode":"day"} About No description, website, or topics provided. Resources Readme License Apache-2.0 license Activity Stars 3 stars Watchers 1 watching Forks 0 forks Report repository Releases No releases published Packages 0 No packages published Languages Dockerfile 91.3% Shell 8.7% Footer ¬© 2024 GitHub,¬†Inc. Footer navigation Terms Privacy Security Status Docs Contact Manage cookies Do not share my personal information You can‚Äôt perform that action at this time.

======>
https://github.com/khvzak/script-bench-rs
-->>-->>
Skip to content {"props":{"docsUrl":"https://docs.github.com/get-started/accessibility/keyboard-shortcuts"}} {"resolvedServerColorMode":"day"} Navigation Menu Toggle navigation Sign in Product GitHub Copilot Write better code with AI Security Find and fix vulnerabilities Actions Automate any workflow Codespaces Instant dev environments Issues Plan and track work Code Review Manage code changes Discussions Collaborate outside of code Code Search Find more, search less Explore All features Documentation GitHub Skills Blog Solutions By company size Enterprises Small and medium teams Startups By use case DevSecOps DevOps CI/CD View all use cases By industry Healthcare Financial services Manufacturing Government View all industries View all solutions Resources Topics AI DevOps Security Software Development View all Explore Learning Pathways White papers, Ebooks, Webinars Customer Stories Partners Open Source GitHub Sponsors Fund open source developers The ReadME Project GitHub community articles Repositories Topics Trending Collections Enterprise Enterprise platform AI-powered developer platform Available add-ons Advanced Security Enterprise-grade security features GitHub Copilot Enterprise-grade AI features Premium Support Enterprise-grade 24/7 support Pricing Search or jump to... Search code, repositories, users, issues, pull requests... Search Clear Search syntax tips Provide feedback We read every piece of feedback, and take your input very seriously. Include my email address so I can be contacted Cancel Submit feedback Saved searches Use saved searches to filter your results more quickly Name Query To see all available qualifiers, see our documentation . Cancel Create saved search Sign in Sign up Reseting focus You signed in with another tab or window. Reload to refresh your session. You signed out in another tab or window. Reload to refresh your session. You switched accounts on another tab or window. Reload to refresh your session. Dismiss alert {{ message }} khvzak / script-bench-rs Public Notifications You must be signed in to change notification settings Fork 8 Star 39 Rust embedded scripting languages benchmark 39 stars 8 forks Branches Tags Activity Star Notifications You must be signed in to change notification settings Code Issues 1 Pull requests 2 Actions Projects 0 Security Insights Additional navigation options Code Issues Pull requests Actions Projects Security Insights khvzak/script-bench-rs {"props":{"initialPayload":{"allShortcutsEnabled":false,"path":"/","repo":{"id":430202459,"defaultBranch":"main","name":"script-bench-rs","ownerLogin":"khvzak","currentUserCanPush":false,"isFork":false,"isEmpty":false,"createdAt":"2021-11-20T20:26:05.000Z","ownerAvatar":"https://avatars.githubusercontent.com/u/285173?v=4","public":true,"private":false,"isOrgOwned":false},"currentUser":null,"refInfo":{"name":"main","listCacheKey":"v0:1725915047.0","canEdit":false,"refType":"branch","currentOid":"dc65e32eeb7cc7aa9581204821729d97ac99fe75"},"tree":{"items":[{"name":"benches","path":"benches","contentType":"directory"},{"name":"scripts","path":"scripts","contentType":"directory"},{"name":"src","path":"src","contentType":"directory"},{"name":".gitignore","path":".gitignore","contentType":"file"},{"name":"Cargo.lock","path":"Cargo.lock","contentType":"file"},{"name":"Cargo.toml","path":"Cargo.toml","contentType":"file"},{"name":"README.md","path":"README.md","contentType":"file"},{"name":"Sort Rust objects.png","path":"Sort Rust objects.png","contentType":"file"},{"name":"bench.py","path":"bench.py","contentType":"file"}],"templateDirectorySuggestionUrl":null,"readme":null,"totalCount":9,"showBranchInfobar":false},"fileTree":null,"fileTreeProcessingTime":null,"foldersToFetch":[],"treeExpanded":false,"symbolsExpanded":false,"isOverview":true,"overview":{"banners":{"shouldRecommendReadme":false,"isPersonalRepo":false,"showUseActionBanner":false,"actionSlug":null,"actionId":null,"showProtectBranchBanner":false,"publishBannersInfo":{"dismissActionNoticePath":"/settings/dismiss-notice/publish_action_from_repo","releasePath":"/khvzak/script-bench-rs/releases/new?marketplace=true","showPublishActionBanner":false},"interactionLimitBanner":null,"showInvitationBanner":false,"inviterName":null,"actionsMigrationBannerInfo":{"releaseTags":[],"showImmutableActionsMigrationBanner":false,"initialMigrationStatus":null}},"codeButton":{"contactPath":"/contact","isEnterprise":false,"local":{"protocolInfo":{"httpAvailable":true,"sshAvailable":null,"httpUrl":"https://github.com/khvzak/script-bench-rs.git","showCloneWarning":null,"sshUrl":null,"sshCertificatesRequired":null,"sshCertificatesAvailable":null,"ghCliUrl":"gh repo clone khvzak/script-bench-rs","defaultProtocol":"http","newSshKeyUrl":"/settings/ssh/new","setProtocolPath":"/users/set_protocol"},"platformInfo":{"cloneUrl":"https://desktop.github.com","showVisualStudioCloneButton":false,"visualStudioCloneUrl":"https://windows.github.com","showXcodeCloneButton":false,"xcodeCloneUrl":"xcode://clone?repo=https%3A%2F%2Fgithub.com%2Fkhvzak%2Fscript-bench-rs","zipballUrl":"/khvzak/script-bench-rs/archive/refs/heads/main.zip"}},"newCodespacePath":"/codespaces/new?hide_repo_select=true\u0026repo=430202459"},"popovers":{"rename":null,"renamedParentRepo":null},"commitCount":"22","overviewFiles":[{"displayName":"README.md","repoName":"script-bench-rs","refName":"main","path":"README.md","preferredFileType":"readme","tabName":"README","richText":"\u003carticle class=\"markdown-body entry-content container-lg\" itemprop=\"text\"\u003e\u003cdiv class=\"markdown-heading\" dir=\"auto\"\u003e\u003ch1 tabindex=\"-1\" class=\"heading-element\" dir=\"auto\"\u003eRust scripting languages benchmark\u003c/h1\u003e\u003ca id=\"user-content-rust-scripting-languages-benchmark\" class=\"anchor\" aria-label=\"Permalink: Rust scripting languages benchmark\" href=\"#rust-scripting-languages-benchmark\"\u003e\u003csvg class=\"octicon octicon-link\" viewBox=\"0 0 16 16\" version=\"1.1\" width=\"16\" height=\"16\" aria-hidden=\"true\"\u003e\u003cpath d=\"m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z\"\u003e\u003c/path\u003e\u003c/svg\u003e\u003c/a\u003e\u003c/div\u003e\n\u003cp dir=\"auto\"\u003eThe project goal is to benchmark most popular embedded scripting languages for Rust.\u003c/p\u003e\n\u003cul dir=\"auto\"\u003e\n\u003cli\u003e\u003ca href=\"https://boajs.dev\" rel=\"nofollow\"\u003eboa\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"https://crates.io/crates/mlua\" rel=\"nofollow\"\u003emlua\u003c/a\u003e (Lua 5.4 and Luau)\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"https://crates.io/crates/rhai\" rel=\"nofollow\"\u003erhai\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"https://crates.io/crates/rquickjs\" rel=\"nofollow\"\u003erquickjs\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"https://crates.io/crates/rune\" rel=\"nofollow\"\u003erune\u003c/a\u003e\u003c/li\u003e\n\u003c/ul\u003e\n\u003cp dir=\"auto\"\u003eThe benchmark is designed to cover not only the performance of code evaluation but interoperability with Rust too.\u003c/p\u003e\n\u003cdiv class=\"markdown-heading\" dir=\"auto\"\u003e\u003ch2 tabindex=\"-1\" class=\"heading-element\" dir=\"auto\"\u003eGetting your own results\u003c/h2\u003e\u003ca id=\"user-content-getting-your-own-results\" class=\"anchor\" aria-label=\"Permalink: Getting your own results\" href=\"#getting-your-own-results\"\u003e\u003csvg class=\"octicon octicon-link\" viewBox=\"0 0 16 16\" version=\"1.1\" width=\"16\" height=\"16\" aria-hidden=\"true\"\u003e\u003cpath d=\"m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z\"\u003e\u003c/path\u003e\u003c/svg\u003e\u003c/a\u003e\u003c/div\u003e\n\u003cp dir=\"auto\"\u003eSimply run the \u003ccode\u003ebench.py\u003c/code\u003e script to generate images. It requires \u003ccode\u003ecargo criterion\u003c/code\u003e and \u003ccode\u003epython3-matplotlib\u003c/code\u003e package installed.\u003c/p\u003e\n\u003cdiv class=\"markdown-heading\" dir=\"auto\"\u003e\u003ch2 tabindex=\"-1\" class=\"heading-element\" dir=\"auto\"\u003eEnvironment\u003c/h2\u003e\u003ca id=\"user-content-environment\" class=\"anchor\" aria-label=\"Permalink: Environment\" href=\"#environment\"\u003e\u003csvg class=\"octicon octicon-link\" viewBox=\"0 0 16 16\" version=\"1.1\" width=\"16\" height=\"16\" aria-hidden=\"true\"\u003e\u003cpath d=\"m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z\"\u003e\u003c/path\u003e\u003c/svg\u003e\u003c/a\u003e\u003c/div\u003e\n\u003cmarkdown-accessiblity-table\u003e\u003ctable\u003e\n\u003cthead\u003e\n\u003ctr\u003e\n\u003cth\u003e\u003c/th\u003e\n\u003cth\u003e\u003c/th\u003e\n\u003c/tr\u003e\n\u003c/thead\u003e\n\u003ctbody\u003e\n\u003ctr\u003e\n\u003ctd\u003eOS\u003c/td\u003e\n\u003ctd\u003eUbuntu 22.04, m6i.16xlarge\u003c/td\u003e\n\u003c/tr\u003e\n\u003ctr\u003e\n\u003ctd\u003eboa\u003c/td\u003e\n\u003ctd\u003ev0.19.1\u003c/td\u003e\n\u003c/tr\u003e\n\u003ctr\u003e\n\u003ctd\u003emlua\u003c/td\u003e\n\u003ctd\u003ev0.10.0\u003c/td\u003e\n\u003c/tr\u003e\n\u003ctr\u003e\n\u003ctd\u003erhai\u003c/td\u003e\n\u003ctd\u003ev1.19.0\u003c/td\u003e\n\u003c/tr\u003e\n\u003ctr\u003e\n\u003ctd\u003erquickjs\u003c/td\u003e\n\u003ctd\u003ev0.6.2\u003c/td\u003e\n\u003c/tr\u003e\n\u003ctr\u003e\n\u003ctd\u003erune\u003c/td\u003e\n\u003ctd\u003ev0.13.4\u003c/td\u003e\n\u003c/tr\u003e\n\u003ctr\u003e\n\u003ctd\u003erustc\u003c/td\u003e\n\u003ctd\u003ev1.81.0\u003c/td\u003e\n\u003c/tr\u003e\n\u003c/tbody\u003e\n\u003c/table\u003e\u003c/markdown-accessiblity-table\u003e\n\u003cdiv class=\"markdown-heading\" dir=\"auto\"\u003e\u003ch2 tabindex=\"-1\" class=\"heading-element\" dir=\"auto\"\u003eResults\u003c/h2\u003e\u003ca id=\"user-content-results\" class=\"anchor\" aria-label=\"Permalink: Results\" href=\"#results\"\u003e\u003csvg class=\"octicon octicon-link\" viewBox=\"0 0 16 16\" version=\"1.1\" width=\"16\" height=\"16\" aria-hidden=\"true\"\u003e\u003cpath d=\"m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z\"\u003e\u003c/path\u003e\u003c/svg\u003e\u003c/a\u003e\u003c/div\u003e\n\u003cp dir=\"auto\"\u003e\u003ca target=\"_blank\" rel=\"noopener noreferrer\" href=\"/khvzak/script-bench-rs/blob/main/Sort%20Rust%20objects.png\"\u003e\u003cimg src=\"/khvzak/script-bench-rs/raw/main/Sort%20Rust%20objects.png\" alt=\"Sort Rust objects\" style=\"max-width: 100%;\"\u003e\u003c/a\u003e\u003c/p\u003e\n\u003c/article\u003e","loaded":true,"timedOut":false,"errorMessage":null,"headerInfo":{"toc":[{"level":1,"text":"Rust scripting languages benchmark","anchor":"rust-scripting-languages-benchmark","htmlText":"Rust scripting languages benchmark"},{"level":2,"text":"Getting your own results","anchor":"getting-your-own-results","htmlText":"Getting your own results"},{"level":2,"text":"Environment","anchor":"environment","htmlText":"Environment"},{"level":2,"text":"Results","anchor":"results","htmlText":"Results"}],"siteNavLoginPath":"/login?return_to=https%3A%2F%2Fgithub.com%2Fkhvzak%2Fscript-bench-rs"}}],"overviewFilesProcessingTime":0}},"appPayload":{"helpUrl":"https://docs.github.com","findFileWorkerPath":"/assets-cdn/worker/find-file-worker-1583894afd38.js","findInFileWorkerPath":"/assets-cdn/worker/find-in-file-worker-f653046cb227.js","githubDevUrl":null,"enabled_features":{"code_nav_ui_events":false,"overview_shared_code_dropdown_button":false,"react_blob_overlay":false,"copilot_conversational_ux_embedding_update":false,"copilot_smell_icebreaker_ux":true,"copilot_workspace":false,"blob_edit_unsaved_changes_storage":false,"accessible_code_button":true,"overview_branch_and_tag_count":true,"overview_spoofed_commit_banner_react":true}}}} main 2 Branches Tags Go to file Code Folders and files Name Name Last commit message Last commit date Latest commit khvzak Update results Oct 26, 2024 dc65e32 ¬∑ Oct 26, 2024 History 22 Commits benches benches Add boa (js) Mar 11, 2024 scripts scripts Add rquickjs Mar 11, 2024 src src Use rand::thread_rng().gen_range(0..n) Oct 26, 2024 .gitignore .gitignore Initial commit Jul 19, 2022 Cargo.lock Cargo.lock Update mlua to v0.10.0 Oct 26, 2024 Cargo.toml Cargo.toml Update mlua to v0.10.0 Oct 26, 2024 README.md README.md Update results Oct 26, 2024 Sort Rust objects.png Sort Rust objects.png Update results Oct 26, 2024 bench.py bench.py Generate results Mar 11, 2024 View all files Repository files navigation README Rust scripting languages benchmark The project goal is to benchmark most popular embedded scripting languages for Rust. boa mlua (Lua 5.4 and Luau) rhai rquickjs rune The benchmark is designed to cover not only the performance of code evaluation but interoperability with Rust too. Getting your own results Simply run the bench.py script to generate images. It requires cargo criterion and python3-matplotlib package installed. Environment OS Ubuntu 22.04, m6i.16xlarge boa v0.19.1 mlua v0.10.0 rhai v1.19.0 rquickjs v0.6.2 rune v0.13.4 rustc v1.81.0 Results {"resolvedServerColorMode":"day"} About Rust embedded scripting languages benchmark Topics rust lua rune luau rhai Resources Readme Activity Stars 39 stars Watchers 4 watching Forks 8 forks Report repository Languages Rust 78.3% Python 8.9% JavaScript 6.9% Lua 5.9% Footer ¬© 2024 GitHub,¬†Inc. Footer navigation Terms Privacy Security Status Docs Contact Manage cookies Do not share my personal information You can‚Äôt perform that action at this time.
======>
https://github.com/mlua-rs/mlua/blob/main/CHANGELOG.md
-->>-->>
v0.10.0 (Oct 25th, 2024) Changes since v0.10.0-rc.1 Added error-send feature flag (disabled by default) to require Send + Sync for Error Some performance improvements v0.10.0-rc.1 Lua::scope is back Support yielding from hooks for Lua 5.3+ Support setting metatable for Lua builtin types (number/string/function/etc) Added LuaNativeFn / LuaNativeFnMut / LuaNativeAsyncFn traits for using in Function::wrap Added Error::chain method to return iterator over nested errors Added Lua::exec_raw helper to execute low-level Lua C API code Added Either<L, R> enum to combine two types into a single one Added a new Buffer type for Luau Added Value::is_error and Value::as_error helpers Added Value::Other variant to represent unknown Lua types (eg LuaJIT CDATA) Added (optional) anyhow feature to implement IntoLua for anyhow::Error Added IntoLua / FromLua for OsString / OsStr and PathBuf / Path v0.10.0-beta.2 Updated ThreadStatus enum to include Running and Finished variants. Error::CoroutineInactive renamed to Error::CoroutineUnresumable . IntoLua / IntoLuaMulti now uses impl trait syntax for args (shorten from a.get::<_, T> to a.get::<T> ). Removed undocumented Lua::into_static / from_static methods. Futures now require Send bound if send feature is enabled. Dropped lifetime from UserDataMethods and UserDataFields traits. Compiler::compile() now returns Result (Luau). Removed Clone requirement from UserDataFields::add_field() . TableExt and AnyUserDataExt traits were combined into ObjectLike trait. Disabled send feature in module mode (since we don't have exclusive access to Lua). Chunk::set_environment() takes Table instead of IntoLua type. Reduced the compile time contribution of next_key_seed and next_value_seed . Reduced the compile time contribution of serde_userdata . Performance improvements. v0.10.0-beta.1 Dropped 'lua lifetime (subtypes now store a weak reference to Lua) Removed (experimental) owned types (they no longer needed) Make Lua types truly Send and Sync (when enabling send feature flag) Removed UserData impl for Rc/Arc types ("any" userdata functions can be used instead) Lua::replace_registry_value takes &mut RegistryKey Lua::scope temporary disabled (will be re-added in the next release) v0.9.9 Minimal Luau updated to 0.629 Fixed bug when attempting to reset or resume already running coroutines (#416). Added RegistryKey::id() method to get the underlying Lua registry key id. v0.9.8 Fixed serializing same table multiple times (#408) Use mlua-sys v0.6 (to support Luau 0.624+) Fixed cross compilation of windows dlls from unix (#394) v0.9.7 Implemented IntoLua for RegistryKey Mark __idiv metamethod as available for luau Added Function::deep_clone() method (Luau) Added SerializeOptions::detect_serde_json_arbitrary_precision option Added Lua::create_buffer() method (Luau) Support serializing buffer type as a byte slice (Luau) Perf: Implemented push_into_stack / from_stack for Option<T> Added Lua::create_ser_any_userdata() method v0.9.6 Added to_pointer function to Function / Table / Thread Implemented IntoLua for &Value Implemented FromLua for RegistryKey Faster (~5%) table array traversal during serialization Some performance improvements for bool/int types v0.9.5 Minimal Luau updated to 0.609 Luau max stack size increased to 1M (from 100K) Implemented IntoLua for refs to String / Table / Function / AnyUserData / Thread + RegistryKey Implemented IntoLua and FromLua for OwnedThread / OwnedString Fixed FromLua derive proc macro to cover more cases v0.9.4 Fixed loading all-in-one modules under mixed states (eg. main state and coroutines) v0.9.3 WebAssembly support ( wasm32-unknown-emscripten target) Performance improvements (faster Lua function calls for lua51/jit/luau) v0.9.2 Added binary modules support to Luau Added Luau package module (uses StdLib::PACKAGE ) with loaders (follows lua5.1 interface) Added support of Luau 0.601+ buffer type (represented as userdata in Rust) LuaJIT cdata type is also represented as userdata in Rust (instead of panic) Vendored LuaJIT switched to rolling vanilla (from openresty) Added Table::for_each method for fast table pairs traversal (faster than pairs ) Performance improvements around table traversal (and faster serialization) Bug fixes and improvements v0.9.1 impl Default for Lua impl IntoLuaMulti for std::result::Result<(), E> Fix using wrong userdata index after processing Variadic args (#311) v0.9.0 Changes since v0.9.0-rc.3 Improved non-static (scoped) userdata support Added Scope::create_any_userdata() method Added Lua::set_vector_metatable() method ( unstable feature flag) Added OwnedThread type ( unstable feature flag) Minimal Luau updated to 0.590 Added new option sort_keys to DeserializeOptions ( Lua::from_value() method) Changed Table::raw_len() output type to usize Helper functions for Value (eg: Value::as_number() / Value::as_string /etc) Performance improvements v0.9.0-rc.3 Minimal Luau updated to 0.588 v0.9.0-rc.2 Added #[derive(FromLua)] macro to opt-in into FromLua<T> where T: 'static + Clone (userdata type). Support vendored module mode for windows (raw-dylib linking, Rust 1.71+) module and vendored features are now mutually exclusive Use C-unwind ABI (Rust 1.71+) Changed AsChunk trait to support capturing wrapped Lua types v0.9.0-rc.1 UserDataMethods::add_async_method() takes &T instead of cloning T Implemented PartialEq<[T]> for tables Added Luau 4-dimensional vectors support ( luau-vector4 feature) Table::sequence_values() iterator no longer uses any metamethods ( Table::raw_sequence_values() is deprecated) Added Table:is_empty() function that checks both hash and array parts Refactored Debug interface Re-exported ffi ( mlua-sys ) crate for easier writing of unsafe code Refactored Lua 5.4 warnings interface Take &str as function name in TableExt and AnyUserDataExt traits Added module attribule skip_memory_check to improve performance Added AnyUserData::wrap() to provide more easy way of creating any userdata in Lua v0.9.0-beta.3 Added OwnedAnyUserData::take() Switch to DeserializeOwned Overwrite error context when called multiple times New feature flag luau-jit to enable (experimental) Luau codegen backend Set __name field in userdata metatable Added Value::to_string() method similar to luaL_tolstring Lua 5.4.6 Application data container now allows to mutably and immutably borrow different types at the same time Performance optimizations Support getting and setting environment for Lua functions. Added UserDataFields::add_field() method to add static fields to UserData Breaking changes: Require environment to be a Table instead of Value in Chunks. AsChunk::env() renamed to AsChunk::environment() v0.9.0-beta.2 New features: Added Thread::set_hook() function to set hook on threads Added pretty print to the Debug formatting to Lua Value and Table ffi layer moved to mlua-sys crate Added OwnedString (unstable) Breaking changes: Refactor HookTriggers (make it const) v0.9.0-beta.1 New features: Owned Lua types (unstable feature flag) New functions Function::wrap / Function::wrap_mut / Function::wrap_async Lua::register_userdata_type() to register a custom userdata types (without requiring UserData trait) Lua::create_any_userdata() Added create_userdata_ref / create_userdata_ref_mut for scopes Added AnyUserDataExt trait with auxiliary functions for AnyUserData Added UserDataRef and UserDataRefMut type wrapped that implement FromLua Improved error handling: Improved error reporting when calling Rust functions from Lua. Added Error::BadArgument to help identify bad argument position or name Added ErrorContext extension trait to attach additional context to Error Breaking changes: Refactored AsChunk trait ToLua / ToLuaMulti renamed to IntoLua / IntoLuaMulti Renamed to_lua_err to into_lua_err Removed FromLua impl for T: UserData+Clone Removed Lua::async_scope Added &Lua arg to Luau interrupt callback Other: Better Debug for String Allow deserializing values from serializable UserData using Lua::from_value() method Added Table::clear() method Added Error::downcast_ref() method Support setting memory limit for Lua 5.1/JIT/Luau Support setting module name in #[lua_module(name = "...")] macro Minor fixes and improvements v0.8.10 Update to Luau 0.590 (luau0-src to 0.7.x) Fix loading luau code starting with \t Pin lua-src and luajit-src versions v0.8.9 Update minimal (vendored) Lua 5.4 to 5.4.6 Use lua_closethread instead of lua_resetthread in vendored mode (Lua 5.4.6) Allow deserializing Lua null into unit ( () ) or unit struct. v0.8.8 Fix potential deadlock when trying to reuse dropped registry keys. Optimize userdata methods call when __index and fields_getters are nil v0.8.7 Minimum Luau updated to 0.555 ( LUAI_MAXCSTACK limit increased to 100000) _VERSION in Luau now includes version number Fixed lifetime of DebugNames in Debug::names() and DebugSource in Debug::source() Fixed subtraction overflow when calculating index for MultiValue::get() v0.8.6 Fixed bug when recycled Registry slot can be set to Nil v0.8.5 Fixed potential unsoundness when using Layout::from_size_align_unchecked and Rust 1.65+ Performance optimizations around string and table creation in standalone mode Added fast track path to Table get / set / len methods without metatable Added new methods push / pop / raw_push / raw_pop to Table Fix getting caller information from Lua::load Better checks and tests when trying to modify a Luau readonly table v0.8.4 Minimal Luau updated to 0.548 v0.8.3 Close to-be-closed variables for Lua 5.4 when using call_async functions (#192) Fixed Lua assertion when inspecting another thread stack. (#195) Use more reliable way to create LuaJIT VM (which can fail if use Rust allocator on non-x86 platforms) v0.8.2 Performance optimizations in handling UserData Minimal Luau updated to 0.536 Fixed bug in Function::bind when passing empty binds and no arguments (#189) v0.8.1 Added Lua::create_proxy for accessing to UserData static fields and functions without instance Added Table::to_pointer() and String::to_pointer() functions Bugfixes and improvements (#176 #179) v0.8.0 Changes since 0.7.4 Roblox Luau support Removed C glue Added async support to __index and __newindex metamethods Added Function::info() to get information about functions (#149). Added parking_lot dependency under feature flag (for UserData ) Hash implementation for Lua String Added Value::to_pointer() function Performance improvements Breaking changes: Refactored AsChunk trait (added implementation for Path and PathBuf ). v0.8.0-beta.5 Lua sources no longer needed to build modules Added __iter metamethod for Luau Added Value::to_pointer() function Added Function::coverage for Luau to obtain coverage report Bugfixes and improvements (#153 #161 #168) v0.8.0-beta.4 Removed &Lua from Lua::set_interrupt as it's not safe (introduced in v0.8.0-beta.3) Enabled Lua::gc_inc for Luau Luau debug module marked as safe (enabled by default) Implemented Hash for Lua String Support mode options in collectgarbage for Luau Added ability to set global Luau compiler (used for loading all chunks). Refactored AsChunk trait (breaking changes). AsChunk now implemented for Path and PathBuf to load lua files from fs. Added parking_lot dependency and feature flag (for UserData ) Added Function::info() to get information about functions (#149). Bugfixes and improvements (#104 #142) v0.8.0-beta.3 Luau vector constructor Luau sandboxing support Luau interrupts (yieldable) More Luau compiler options (mutable globals) Other performance improvements v0.8.0-beta.2 Luau vector datatype support Luau readonly table attribute Other Luau improvements v0.8.0-beta.1 Roblox Luau support Refactored ffi module. C glue is no longer required Added async support to __index and __newindex metamethods v0.7.4 Improved Lua::create_registry_value to reuse previously expired registry keys.
No need to call Lua::expire_registry_values when creating/dropping registry values. Added Lua::replace_registry_value to change value of an existing Registry Key Async calls optimization v0.7.3 Fixed cross-compilation issue (introduced in 84a174c) v0.7.2 Allow pkg-config to omit include paths if they equals to standard (#114). Various bugfixes (eg. #121) v0.7.1 Fixed traceback generation for errors (#112) Lua::into_static/from_static methods have been removed from the docs and are discouraged for use v0.7.0 New "application data" api to store arbitrary objects inside Lua New feature flag luajit52 to build/support LuaJIT with partial compatibility with Lua 5.2 Added async meta methods for all Lua (except 5.1) Added AnyUserData::take() to take UserData objects from Lua Added set_nth_user_value / get_nth_user_value to AnyUserData for all Lua versions Added set_named_user_value / get_named_user_value to AnyUserData for all Lua versions Added Lua::inspect_stack() to get information about the interpreter runtime stack Added set_warning_function / remove_warning_function / warning functions to Lua for 5.4 Added TableExt::call() to call tables with __call metamethod as functions Added Lua::unload() to unload modules ToLua implementation for arrays changed to const generics Added thread (coroutine) cache for async execution (disabled by default and works for Lua 5.4/JIT) LuaOptions and (De)SerializeOptions marked as const Fixed recursive tables serialization when using serde::Serialize for Lua Tables Improved errors reporting. Now source included to fmt::Display implementation for Error::CallbackError Major performance improvements v0.6.6 Fixed calculating LUA_REGISTRYINDEX when cross-compiling for lua51/jit (#82) Updated documentation & examples v0.6.5 Fixed bug when polling async futures (#77) Refactor Waker handling in async code (+10% performance gain when calling async functions) Added Location::caller() information to Lua::load() if chunk's name is None (Rust 1.46+) Added serialization of i128/u128 types (serde) v0.6.4 Performance optimizations Fixed table traversal used in recursion detection in deserializer v0.6.3 Disabled catching Rust panics in userdata finalizers on drop. It also has positive performance impact. Added Debug::event() to the hook's Debug structure Simplified interface of hook::HookTriggers Added finalizer to ExtraData in module mode. This helps avoiding memory leak on closing state when Lua unloads modules and frees memory. Added DeserializeOptions struct to control deserializer behavior ( from_value_with function). v0.6.2 New functionality: Lua::load_from_function() and Lua::create_c_function() Many optimizations in callbacks/userdata creation and methods execution v0.6.1 Update chunk! documentation (stable Rust limitations) Fixed Lua sequence table conversion to HashSet/BTreeSet once_cell dependency lowered to 1.0 v0.6.0 Changes since 0.5.4 New UserDataFields API Full access to UserData metatables with support of setting arbitrary fields. Implement UserData for Rc<RefCell<T>> / Arc<Mutex<T>> / Arc<RwLock<T>> where T: UserData . Added SerializeOptions to to change default Lua serializer behaviour (eg. nil/null/array serialization) Added LuaOptions to customize Lua/Rust behaviour (currently panic handling) Added ToLua / FromLua implementation for Box<str> and Box<[T]> . Added Thread::reset() for luajit/lua54 to recycle threads (coroutines) with attaching a new function. Added chunk! macro support to load chunks of Lua code using the Rust tokenizer and optionally capturing Rust variables. Improved errors reporting ( Error 's __tostring method formats full stacktraces). This is useful in a module mode. Added String::to_string_lossy Various bugfixes and improvements Breaking changes: Errors are always Send + Sync to be compatible with the anyhow crate. Removed Result from LuaSerdeExt::null() and LuaSerdeExt::array_metatable() (never fails) Removed Result from Function::dump() (never fails) Removed AnyUserData::has_metamethod() (in favour of full access to metatables) v0.6.0-beta.3 Errors are always Send + Sync to be compatible with anyhow crate Implement UserData for Rc<RefCell> / Arc<Mutex> / Arc<RwLock> Added __ipairs metamethod for Lua 5.2 Added String::to_string_lossy Various bugfixes and improvements v0.6.0-beta.2 [ Breaking ] Removed AnyUserData::has_metamethod() Added Thread::reset() for luajit/lua54 to recycle threads.
It's possible to attach a new function to a thread (coroutine). Added chunk! macro support to load chunks of Lua code using the Rust tokenizer and optinally capturing Rust variables. Improved error reporting ( Error 's __tostring method formats full stacktraces). This is useful in the module mode. v0.6.0-beta.1 New UserDataFields API Allow to define arbitrary MetaMethods MetaMethods::name() is public Do not trigger longjmp in Rust to prevent unwinding across FFI boundaries. See rust-lang/rust#83541 Added SerializeOptions to to change default Lua serializer behaviour (eg. nil/null/array serialization) [ Breaking ] Removed Result from LuaSerdeExt::null() and LuaSerdeExt::array_metatable() (never fails) [ Breaking ] Removed Result from Function::dump() (never fails) ToLua / FromLua implementation for Box<str> and Box<[T]> [ Breaking ] Added LuaOptions to customize Lua/Rust behaviour (currently panic handling) Various bugfixes and performance improvements v0.5.4 Build script improvements Improvements in panic handling (resume panic on value popping) Fixed bug serializing 3rd party userdata (causes segfault) Make error::Error non exhaustive v0.5.3 Fixed bug when returning nil-prefixed multi values from async function (+ test) Performance optimisation for async callbacks (polling) v0.5.2 Some performance optimisations (callbacks) ToLua implementation for Cow<str> and Cow<CStr> Fixed bug with Scope destruction of partially polled futures v0.5.1 Support cross compilation that should work well for vendored builds (including LuaJIT with some restrictions) Fix numeric types conversion for 32bit Lua Update tokio to 1.0 for async examples v0.5.0 Serde support under serialize feature flag. Re-export mlua_derive . impl ToLua and FromLua for HashSet and BTreeSet v0.4.2 Added Function::dump() to dump lua function to a binary chunk Added ChunkMode enum to mark chunks as text or binary Updated set_memory_limit doc v0.4.0 Lua 5.4 support with MetaMethod::Close . lua53 feature is disabled by default. Now preferred Lua version have to be chosen explicitly. Provide safety guaraness for Lua state, which means that potenially unsafe operations, like loading C modules (using require or package.loadlib ) are disabled. Equalient for the previous Lua::new() function is Lua::unsafe_new() . New send feature to require Send . New module feature, that disables linking to Lua Core Libraries. Required for modules. Don't allow 'callback outlive 'lua in Lua::create_function() to fix the unsoundness . Added Lua::into_static() to make 'static Lua state. This is useful to spawn async Lua threads that requires 'static . New function Lua::set_memory_limit() (similar to rlua ) to enable memory restrictions in Lua VM (requires Lua >= 5.2). Scope , temporary removed in v0.3, is back with async support. Removed deprecated Table::call() function. Added hooks support (backported from rlua 0.17). New AnyUserData::has_metamethod() function. LuaJIT 2.0.5 (the latest stable) support. Various bug fixes and improvements.
======>
https://github.com/Cr0a3/ygen/blob/main/tests%2Fshared_vars1.yl#L7-L33
-->>-->>
# RUN: 
cargo run -p ylc -- -in=%s -o=out.o
gcc out.o -o a.exe
./a.exe
# IN:

define i32 @func(i32 %0) {
  entry:
    %1 = alloca i32

    %tmp = i32 5
    %2 = cmp eq i32 %0, %tmp
    br cond %2 is5, after

  is5:
    store i32 0, %1
    br after

  after:
    %2 = load i32 %1
    ret i32 %2
}

define i32 @main() {
 entry:
    %0 = i32 5

    %1 = call i32 func i32 %0

    %2 = add i32 %1, 1
    
    ret i32 %2
}

# EXIT_CODE=1 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 # RUN: cargo run -p ylc -- -in=%s -o=out.o gcc out.o -o a.exe ./a.exe # IN: define i32 @func(i32 %0) { entry: %1 = alloca i32 %tmp = i32 5 %2 = cmp eq i32 %0, %tmp br cond %2 is5, after is5: store i32 0, %1 br after after: %2 = load i32 %1 ret i32 %2 } define i32 @main() { entry: %0 = i32 5 %1 = call i32 func i32 %0 %2 = add i32 %1, 1 ret i32 %2 } # EXIT_CODE=1
======>
https://github.com/Cr0a3/ygen
-->>-->>
Repository files navigation README Code of conduct Apache-2.0 license Security Ygen - Yet another Code Generator Welcome to Ygen!
This repository contains the source code of the ygen project. Ygen is a toolkit for building fast and clean compilers using a memory safe api. Why ygen? You are probably wondering: why would I choose ygen and not llvm or cranelift??
Here are a few reasons: Simplicity : One of ygens main focus is simplicity which means to us that as much code as possible is readable and shared Similare API : Ygens API is very similar to LLVMs API for example i designed the IRBuilder to be very similar to the Builder from LLVM Traits : Ygen uses a lot of traits to overload functions. Great examples are the Build... functions from the IRBuilder to build ir nodes Warning This project is still early in its developement. Bugs and miscompilations are expected. ONLY USE YGEN FOR TOY COMPILERS Contributions Simple example Here is a simple example on how to use Ygen to build an add function: use std :: error :: Error ; use Ygen :: prelude :: * ; pub fn main ( ) -> Result < ( ) , Box < dyn Error > > { let mut module = Module ( ) ; let mut builder = IRBuilder ( ) ; let ty = FnTy ( vec ! [ TypeMetadata :: i32 , TypeMetadata :: i32 ] , TypeMetadata :: i32 ) ; let func = module . add ( "add" , & ty ) ; func . extrn ( ) ; // make function externally visible let entry = func . addBlock ( "entry" ) ; builder . positionAtEnd ( entry ) ; let val = builder . BuildAdd ( ty . arg ( 0 ) , ty . arg ( 1 ) ) ; builder . BuildRet ( val ) ; module . verify ( ) . print ( ) ; eprintln ! ( "{}" ,
        module.dumpColored ( ) ) ; Ok ( ( ) ) } When executed this simple program builds an add function and dumps it's ir: define i32 @add ( i32 %0 , i32 %1 ) {
 entry: %2 = add i32 %0 , %1 ret i32 %2 } You can add following lines (you need to include std::fs::Path ) to compile the IR down to assembly: module . emitToAsmFile ( Triple :: host ( ) , & mut initializeAllTargets ( Triple :: host ( ) ) ? , Path :: new ( "out.asm" ) ) ? ; Support Ygen currently supports following architectures Name Full ir Full isa x64 Yes No Copyright This project is owned by Cr0a3 and licensed under the Apache2 License
======>
https://godbolt.org/z/1bY3eq4EE
-->>-->>
New Privacy Policy. Please take a moment to read it √ó Last changed on: 2024-06-19, 4:09:59 p.m. ( diff ) Compiler Explorer Privacy Policy Thanks for your interest in what Compiler Explorer does with your data. Data protection is really
important to the Compiler Explorer team, and we want to be very clear about what we do with your data. Who we are Compiler Explorer was created by and is primarily administrated by Matt Godbolt , along with a number of volunteers (including, but not limited to those listed in our " Authors " documentation).
It is run on a best-effort basis, and is not a commercial product. We do our best
to keep your data safe, but welcome help from the community: See our GitHub project page if you wish to help. Your data In order to process compilation and execution requests, your browser sends the source code you typed in the editor
window along with your chosen compiler and options to the Compiler Explorer servers. There, the source code is
written to disk and your chosen compiler is invoked on it. If your request was to have your code executed, the
resulting executable is run. The outputs from compilation and execution are processed and sent back to your web
browser, where they're shown. Shortly after this process completes, your source code is deleted from disk. If, in
processing your query, an issue with Compiler Explorer is found, your code may be kept for up to a week in order to
help debug and diagnose the problem. Only the Compiler Explorer team will have access to your code, and only for the
purposes of debugging the site: we will never share your code with anyone. The source code and options are also subject to a one-way hash, which is used to cache the results to speed up
subsequent compilations of the same code. The cache is in-memory and on-disk. It's impossible to reconstruct the
source code from the hash, but the resulting assembly code or binary output (the compilation result) is stored as
plain text. There's no way to enumerate the in-memory cache contents. In exceptional cases, administrator members of
the Compiler Explorer team may be able to enumerate the disk caches and retrieve the compilation output, but with no
way to trace it back to the source code. In short: your source code is stored in plaintext for the minimum time feasible to be able to process your request.
After that, it is discarded and is inaccessible. In very rare cases your code may be kept for a little longer (at
most a week) to help debug issues in Compiler Explorer. Short links If you choose to share your code using the "Share" dropdown, then the user interface state including the source code
is stored. For a "Full" link, this information is encoded into the URL as a URL hash (e.g. https://godbolt.org/#ui_state_and_code ). For short URLs, the interface state is stored on
Compiler Explorer's servers, and a shortened name uniquely
referring to this data is returned. The shortened name comes from a secure hash of the state, and without
knowing the name it is infeasible to access the data. Only Compiler Explorer administrators can access this data
directly. Obfuscated IP addresses and creation time are stored alongside this data, to enable spam detection.
Links of this form look like https://godbolt.org/z/SHORTNAME . Prior to storing data itself, Compiler Explorer used an external URL shortening service ( goo.gl ) and the resulting short URL was rewritten as https://godbolt.org/g/SHORTURLPART .
The storage for the user experience state in this case remains with the short URL provider,
not Compiler Explorer. Application, web and error logs Compiler Explorer keeps application logs, which contain semi-anonymised IP addresses, but no other personally
identifying information. When a long URL is clicked, the hash part of the URL is not sent to the server, so the user
state (including the source code) is NOT exposed in the web log. If a user clicks a short URL, then the short form is exposed in the web log (as https://godbolt.org/g/SHORTURLPART ) and from this the source code can be
retrieved. As such, if you create a short URL of your code, your source
code and other user state can in principle be retrieved from the web log of Compiler Explorer. Compiler Explorer keeps a separate compile request log for Analytics purposes without identifying information.
This log only contains the settings which were used - minus code and options that may contain sensitive data. Compiler Explorer uses Amazon's web serving, load balancing and edge caching systems. In order to debug and diagnose
Compiler Explorer, to help track down and block Denial of Service attacks, and to gather statistics about Compiler
Explorer's performance and usage, the logs from these systems are archived. These logs contain the full IP addresses
of requests. They are kept for no more than one month, after which they are permanently deleted. If your web browser experiences an error, we use a third party reporting system ( Sentry ). This keeps information, including your IP address and web browser user agent, for no more than 90 days. Executing your code For certain configurations, we may support executing the results of your compilation on the Compiler Explorer
servers. Execution occurs in a heavily locked-down, isolated environment. We have made reasonable efforts to protect
both the Compiler Explorer site and other concurrently-processed requests from information leakage due to rogue
executions. Cookies Compiler Explorer uses small pieces of information stored on your computer: Cookies and Browser Local
Storage (and Session Storage). Local storage is used to remember the user's settings, source code and user interface configuration, so
that it's available when the user visits the Compiler Explorer site again. This information is not transmitted to
Compiler Explorer, except as described above in order to fulfil the user's requests. There is a separate document covering more on this. Your choices Compiler Explorer is an open source project. If you are concerned about any of the data protection measures outlined
above, or about what happens to your source code, you are encouraged to run your own local instance of Compiler
Explorer. Instructions on how to do this are on the GitHub project page . Compiler Explorer and the GDPR The Compiler Explorer team believes the Compiler Explorer site is compliant with the EU's General Data Protection
Regulation (GDPR). Specifically, we store no personally identifying information, we anonymise the little data that
we do have and we do not permanently store any user data. Name and Address of the controller The Controller for the purposes of the General Data Protection Regulation (GDPR), other data protection laws
applicable in Member states of the European Union and other provisions related to data protection is: Matt Godbolt 2626 Orrington Ave Evanston IL 60201 USA +1 312 792-7931 matt@godbolt.org Close
======>
https://old.reddit.com/r/rust/comments/1gcwdly/toml_edit_cli_tool/
-->>-->>
Is there a TOML CLI editing tool? I couldn't find one. I suspect    cargo    has one that kinda works given    cargo add    and    cargo remove    do editing. I am trying to get a workflow where I can use    cargo-generate    to create a library but also add it to the root    [workspaces]       Cargo.toml   .     
   

======>
https://old.reddit.com/user/Toyota_Canada/comments/1fi7whf/toyota_tacoma_is_your_invitation_to_the_wild/
-->>-->>
TL;DR For those who crave adventure and the thrill of the wild,¬†we see you and we got you. From gas to hybrid options, and striking trims including the TRD Pro and brand new Trailhunter, let this rugged, capable, and dynamic machine inspire you to embark on unforgettable journeys, push your limits, and find a sense of freedom like you‚Äôve never felt before.¬†Just ask those in    r/ToyotaTacoma   .   

   Whether you‚Äôre scaling mountains, traversing through mud, or driving through lush forests, Tacoma is¬†Your Invitation to the Wild.   

   ¬†Buckle up as we go grille first into what makes these Tacos tick.   

   https://preview.redd.it/3hmh90hfp1nd1.jpg?width=1920&format=pjpg&auto=webp&s=aab5884d0e83700e71db35ec06b314d8b9c08c74   

   TACOMA TRD PRO   

   If it‚Äôs speed, power and performance you crave, the only name you need to know is TRD Pro. We guarantee that after getting behind the wheel of this beast, your new favourite view will be watching the dirt fly as you venture into the wild.   

   i-FORCE MAX Hybrid Powertrain   

   Driven by the powerful¬†i-FORCE¬†MAX Hybrid Powertrain, the TRD Pro boasts an impressive output of 326 horsepower and 465 lb-ft of torque. In other words, you can keep exploring the wild with confidence, knowing you have ample power, optimal fuel efficiency, and range to get you there and back.   

   https://preview.redd.it/r5wyk3ilp1nd1.jpg?width=1920&format=pjpg&auto=webp&s=0f81f0a587ec267beec1a12f9a585147a715da15   

   IsoDynamic Performance Front Seats & TRD PRO FOX¬Æ       Shocks   

   The wild can get rough, so we put comfort and control at the forefront. Cutting-edge TRD Pro FOX   ¬Æ   Shocks deliver unmatched performance and stability, effortlessly keeping you in control at higher speeds; while the IsoDynamic Performance Seats keep you steady and focused. So go ahead‚Ä¶.Let. It. Rip.   

   https://i.redd.it/u5ge89wmp1nd1.gif   

   Towing   

   We can‚Äôt talk Taco without talking about towing capabilities. Imagine‚Ä¶hitching up your dirt bikes and heading into the mountains for an adrenaline-filled weekend or towing a jet ski for a spontaneous lake adventure. Need to bring along extra camping equipment or a small trailer filled with kayaks? No problem. Tacoma‚Äôs¬†towing capacity of up to 5,950lbs ensures you can bring all your favourite toys out into the wild.   

   Disclaimer: Before towing, confirm your vehicle and trailer are compatible. Do not exceed any Weight Ratings and follow all instructions in your Owner‚Äôs Manual.   

   TACOMA TRAILHUNTER   

   Built for those who seek the thrill of the unknown, the first ever Tacoma Trailhunter is ready to take you to the furthest reaches of the backcountry. From the ground up, this titan is an overlander‚Äôs dream, having everything you need to make molehills out of mountains.¬†   

   Old Man Emu¬Æ       Suspension   

   Overlanding aficionados not only need a truck that can take them down the toughest trails; they also need it to carry all their gear and supplies for extended time off the grid. Trailhunter kicks it up a notch with unbeatable offroad gear: Old Man Emu   ¬Æ   . The 2.5-in. forged monotube shocks with external remote reservoirs combine rugged capability with outstanding load-carrying stability, so you can handle the most demanding conditions with ease and enjoy long-lasting performance and reliability.   

   https://preview.redd.it/lrfd393sp1nd1.jpg?width=1920&format=pjpg&auto=webp&s=9c4bf546cf672a7caa1dcfafac26e75b48e47442   

   Available 18‚Äù Alloy Wheels & 3D Multi-Terrain View Monitor   

   While the thrill of the wild is hair-raisingly fun, it can also be unpredictable. With the 3D Multi-Terrain View Monitor, you can easily toggle between front-, rear- and side-camera views on the available 14-in. multimedia touchscreen, to check-in on your immediate surroundings. If the coast‚Ä¶forest‚Ä¶ trail looks clear, Trailhunter's robust available 18" alloy wheels ensure exceptional durability and performance on any path.   

   https://i.redd.it/rosprpvtp1nd1.gif   

   Crawl Control   

   To ensure that you‚Äôre always up for the challenge, when the going gets really tough, Trailhunter‚Äôs Crawl Control steps up. This advanced system automatically adjusts the throttle and brakes on five low-speed settings, so you can focus on steering through the roughest terrain. Whether you're navigating rocky paths, slick mud, or steep inclines, Crawl Control helps you maintain control and confidence.   

   With all things said, all that you    really    need to know is that Tacoma‚Äôs built tough, capable and ready to dominate anything in its path. It‚Äôs not just a truck, it‚Äôs your ultimate companion in conquering the furthest reaches you can find, pushing your limits, and having a heck of a lot of fun while you‚Äôre at it.   

   https://preview.redd.it/d3mlr95vp1nd1.jpg?width=1920&format=pjpg&auto=webp&s=0079bdcd5fae71f0d25bffb67a8e66fd8412ea9a   

   Ready to accept your invitation to the wild? Tacoma is here to lead the way.   

   Drop your comments on your favourite Taco feature, where you dream of driving a Taco, or why the heck not ‚Äì your favourite Taco topping (guac all the way). If you still want to learn more, check out    Toyota.ca    .   

   After you‚Äôve done that, time to get off reddit‚Ä¶the wild‚Äôs waiting for you.   
   

======>
https://old.reddit.com/r/rust/comments/1gc9r2x/how_to_avoid_deeply_nested_if_let_chains/
-->>-->>
Hi! I'm somewhat new to rust, although I have a lot of experience in other programming languages.    

   Over the years I've built a habit of being a "never-nester", which is to say as much as possible I try to avoid writing deeply-nested code.   

   For instance, as much as possible I prefer patterns like early returns, guard returns, early continues, etc.   

   ```rust   

   fn foo(a: i32) {
  if a < 0 {
    return;
  }

  if a % 2 == 0 {
    return;
  }

  for i in 0..a {
    if !filter(i) {
      continue;
    }

    // do logic here
  }
}
   

   ```   

   But one thing I've noticed in Rust is the prevalence of code like   

   ```rust   

   if let Some(foo) = map.get(&x) {
  if let Ok(bar) = foo.bar() {
    if let Bars::Space(qux, quz) = bar.bar_type {
      // do logic here
    }
  }
}
   

   ```   

   Now I know some of this can be alleviated with the    ?    operator, but not in all cases, and only in functions that return Option or Result, and when implementing library traits you can't really change the function signature at your whim.   

   So I've taken to doing a lot of this in my code:   

   ```rust   

   // in a function that doesn't return Option nor Result, and must not panic

let foo = map.get(&x);
if foo.is_none() {
  return;
}
let foo = foo.unwrap();

let bar = foo.bar();
if bar.is_err() {
  return;
}
let bar = bar.unwrap();

// can't un-nest Bars so no choice

if let Bars::Space(qux, quz) = bar.bar_type {
  // do logic here
}
   

   ```    

   But it seems like this isn't idiomatic. I'm wondering if there's a better way, or do experienced rust devs just "eat" the nesting and live with it?   

   Would love to hear from you.   

   Thanks!   
   

======>
https://github.com/stuarth/maudify/
-->>-->>
Skip to content {"props":{"docsUrl":"https://docs.github.com/get-started/accessibility/keyboard-shortcuts"}} {"resolvedServerColorMode":"day"} Navigation Menu Toggle navigation Sign in Product GitHub Copilot Write better code with AI Security Find and fix vulnerabilities Actions Automate any workflow Codespaces Instant dev environments Issues Plan and track work Code Review Manage code changes Discussions Collaborate outside of code Code Search Find more, search less Explore All features Documentation GitHub Skills Blog Solutions By company size Enterprises Small and medium teams Startups By use case DevSecOps DevOps CI/CD View all use cases By industry Healthcare Financial services Manufacturing Government View all industries View all solutions Resources Topics AI DevOps Security Software Development View all Explore Learning Pathways White papers, Ebooks, Webinars Customer Stories Partners Open Source GitHub Sponsors Fund open source developers The ReadME Project GitHub community articles Repositories Topics Trending Collections Enterprise Enterprise platform AI-powered developer platform Available add-ons Advanced Security Enterprise-grade security features GitHub Copilot Enterprise-grade AI features Premium Support Enterprise-grade 24/7 support Pricing Search or jump to... Search code, repositories, users, issues, pull requests... Search Clear Search syntax tips Provide feedback We read every piece of feedback, and take your input very seriously. Include my email address so I can be contacted Cancel Submit feedback Saved searches Use saved searches to filter your results more quickly Name Query To see all available qualifiers, see our documentation . Cancel Create saved search Sign in Sign up Reseting focus You signed in with another tab or window. Reload to refresh your session. You signed out in another tab or window. Reload to refresh your session. You switched accounts on another tab or window. Reload to refresh your session. Dismiss alert {{ message }} stuarth / maudify Public Notifications You must be signed in to change notification settings Fork 0 Star 2 Convert HTML to Maud License MIT license 2 stars 0 forks Branches Tags Activity Star Notifications You must be signed in to change notification settings Code Issues 0 Pull requests 0 Actions Projects 0 Security Insights Additional navigation options Code Issues Pull requests Actions Projects Security Insights stuarth/maudify {"props":{"initialPayload":{"allShortcutsEnabled":false,"path":"/","repo":{"id":879020834,"defaultBranch":"main","name":"maudify","ownerLogin":"stuarth","currentUserCanPush":false,"isFork":false,"isEmpty":false,"createdAt":"2024-10-26T18:37:21.000Z","ownerAvatar":"https://avatars.githubusercontent.com/u/7055?v=4","public":true,"private":false,"isOrgOwned":false},"currentUser":null,"refInfo":{"name":"main","listCacheKey":"v0:1729967842.204403","canEdit":false,"refType":"branch","currentOid":"bf225a0a52828869867339b8b98351d253eb3dd0"},"tree":{"items":[{"name":"src","path":"src","contentType":"directory"},{"name":".gitignore","path":".gitignore","contentType":"file"},{"name":"Cargo.toml","path":"Cargo.toml","contentType":"file"},{"name":"LICENSE.md","path":"LICENSE.md","contentType":"file"},{"name":"README.md","path":"README.md","contentType":"file"}],"templateDirectorySuggestionUrl":null,"readme":null,"totalCount":5,"showBranchInfobar":false},"fileTree":null,"fileTreeProcessingTime":null,"foldersToFetch":[],"treeExpanded":false,"symbolsExpanded":false,"isOverview":true,"overview":{"banners":{"shouldRecommendReadme":false,"isPersonalRepo":false,"showUseActionBanner":false,"actionSlug":null,"actionId":null,"showProtectBranchBanner":false,"publishBannersInfo":{"dismissActionNoticePath":"/settings/dismiss-notice/publish_action_from_repo","releasePath":"/stuarth/maudify/releases/new?marketplace=true","showPublishActionBanner":false},"interactionLimitBanner":null,"showInvitationBanner":false,"inviterName":null,"actionsMigrationBannerInfo":{"releaseTags":[],"showImmutableActionsMigrationBanner":false,"initialMigrationStatus":null}},"codeButton":{"contactPath":"/contact","isEnterprise":false,"local":{"protocolInfo":{"httpAvailable":true,"sshAvailable":null,"httpUrl":"https://github.com/stuarth/maudify.git","showCloneWarning":null,"sshUrl":null,"sshCertificatesRequired":null,"sshCertificatesAvailable":null,"ghCliUrl":"gh repo clone stuarth/maudify","defaultProtocol":"http","newSshKeyUrl":"/settings/ssh/new","setProtocolPath":"/users/set_protocol"},"platformInfo":{"cloneUrl":"https://desktop.github.com","showVisualStudioCloneButton":false,"visualStudioCloneUrl":"https://windows.github.com","showXcodeCloneButton":false,"xcodeCloneUrl":"xcode://clone?repo=https%3A%2F%2Fgithub.com%2Fstuarth%2Fmaudify","zipballUrl":"/stuarth/maudify/archive/refs/heads/main.zip"}},"newCodespacePath":"/codespaces/new?hide_repo_select=true\u0026repo=879020834"},"popovers":{"rename":null,"renamedParentRepo":null},"commitCount":"5","overviewFiles":[{"displayName":"README.md","repoName":"maudify","refName":"main","path":"README.md","preferredFileType":"readme","tabName":"README","richText":"\u003carticle class=\"markdown-body entry-content container-lg\" itemprop=\"text\"\u003e\u003cdiv class=\"markdown-heading\" dir=\"auto\"\u003e\u003ch1 tabindex=\"-1\" class=\"heading-element\" dir=\"auto\"\u003eMaudify - Convert HTML to \u003ca href=\"https://maud.lambda.xyz/\" rel=\"nofollow\"\u003eMaud\u003c/a\u003e\u003c/h1\u003e\u003ca id=\"user-content-maudify---convert-html-to-maud\" class=\"anchor\" aria-label=\"Permalink: Maudify - Convert HTML to Maud\" href=\"#maudify---convert-html-to-maud\"\u003e\u003csvg class=\"octicon octicon-link\" viewBox=\"0 0 16 16\" version=\"1.1\" width=\"16\" height=\"16\" aria-hidden=\"true\"\u003e\u003cpath d=\"m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z\"\u003e\u003c/path\u003e\u003c/svg\u003e\u003c/a\u003e\u003c/div\u003e\n\u003cdiv class=\"markdown-heading\" dir=\"auto\"\u003e\u003ch2 tabindex=\"-1\" class=\"heading-element\" dir=\"auto\"\u003eHow to use it\u003c/h2\u003e\u003ca id=\"user-content-how-to-use-it\" class=\"anchor\" aria-label=\"Permalink: How to use it\" href=\"#how-to-use-it\"\u003e\u003csvg class=\"octicon octicon-link\" viewBox=\"0 0 16 16\" version=\"1.1\" width=\"16\" height=\"16\" aria-hidden=\"true\"\u003e\u003cpath d=\"m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z\"\u003e\u003c/path\u003e\u003c/svg\u003e\u003c/a\u003e\u003c/div\u003e\n\u003cdiv class=\"markdown-heading\" dir=\"auto\"\u003e\u003ch3 tabindex=\"-1\" class=\"heading-element\" dir=\"auto\"\u003eInstalling\u003c/h3\u003e\u003ca id=\"user-content-installing\" class=\"anchor\" aria-label=\"Permalink: Installing\" href=\"#installing\"\u003e\u003csvg class=\"octicon octicon-link\" viewBox=\"0 0 16 16\" version=\"1.1\" width=\"16\" height=\"16\" aria-hidden=\"true\"\u003e\u003cpath d=\"m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z\"\u003e\u003c/path\u003e\u003c/svg\u003e\u003c/a\u003e\u003c/div\u003e\n\u003cp dir=\"auto\"\u003eClone the repo, \u003ccode\u003ecargo build\u003c/code\u003e, and put the resulting executable in your \u003ccode\u003e$PATH\u003c/code\u003e\u003c/p\u003e\n\u003cdiv class=\"markdown-heading\" dir=\"auto\"\u003e\u003ch3 tabindex=\"-1\" class=\"heading-element\" dir=\"auto\"\u003eRunning\u003c/h3\u003e\u003ca id=\"user-content-running\" class=\"anchor\" aria-label=\"Permalink: Running\" href=\"#running\"\u003e\u003csvg class=\"octicon octicon-link\" viewBox=\"0 0 16 16\" version=\"1.1\" width=\"16\" height=\"16\" aria-hidden=\"true\"\u003e\u003cpath d=\"m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z\"\u003e\u003c/path\u003e\u003c/svg\u003e\u003c/a\u003e\u003c/div\u003e\n\u003cdiv class=\"highlight highlight-source-shell notranslate position-relative overflow-auto\" dir=\"auto\" data-snippet-clipboard-copy-content=\"echo '\u0026lt;div class=\u0026quot;class-a class-b\u0026quot;\u0026gt;\u0026lt;span\u0026gt;foo\u0026lt;/span\u0026gt;\u0026lt;/div\u0026gt;' | maudify\ndiv class=\u0026quot;class-a class-b\u0026quot; {\n    span { \u0026quot;foo\u0026quot; }\n}\"\u003e\u003cpre\u003e\u003cspan class=\"pl-c1\"\u003eecho\u003c/span\u003e \u003cspan class=\"pl-s\"\u003e\u003cspan class=\"pl-pds\"\u003e'\u003c/span\u003e\u0026lt;div class=\"class-a class-b\"\u0026gt;\u0026lt;span\u0026gt;foo\u0026lt;/span\u0026gt;\u0026lt;/div\u0026gt;\u003cspan class=\"pl-pds\"\u003e'\u003c/span\u003e\u003c/span\u003e \u003cspan class=\"pl-k\"\u003e|\u003c/span\u003e maudify\ndiv class=\u003cspan class=\"pl-s\"\u003e\u003cspan class=\"pl-pds\"\u003e\"\u003c/span\u003eclass-a class-b\u003cspan class=\"pl-pds\"\u003e\"\u003c/span\u003e\u003c/span\u003e {\n    span { \u003cspan class=\"pl-s\"\u003e\u003cspan class=\"pl-pds\"\u003e\"\u003c/span\u003efoo\u003cspan class=\"pl-pds\"\u003e\"\u003c/span\u003e\u003c/span\u003e }\n}\u003c/pre\u003e\u003c/div\u003e\n\u003c/article\u003e","loaded":true,"timedOut":false,"errorMessage":null,"headerInfo":{"toc":[{"level":1,"text":"Maudify - Convert HTML to Maud","anchor":"maudify---convert-html-to-maud","htmlText":"Maudify - Convert HTML to Maud"},{"level":2,"text":"How to use it","anchor":"how-to-use-it","htmlText":"How to use it"},{"level":3,"text":"Installing","anchor":"installing","htmlText":"Installing"},{"level":3,"text":"Running","anchor":"running","htmlText":"Running"}],"siteNavLoginPath":"/login?return_to=https%3A%2F%2Fgithub.com%2Fstuarth%2Fmaudify%2F"}},{"displayName":"LICENSE.md","repoName":"maudify","refName":"main","path":"LICENSE.md","preferredFileType":"license","tabName":"MIT","richText":null,"loaded":false,"timedOut":false,"errorMessage":null,"headerInfo":{"toc":null,"siteNavLoginPath":"/login?return_to=https%3A%2F%2Fgithub.com%2Fstuarth%2Fmaudify%2F"}}],"overviewFilesProcessingTime":0}},"appPayload":{"helpUrl":"https://docs.github.com","findFileWorkerPath":"/assets-cdn/worker/find-file-worker-1583894afd38.js","findInFileWorkerPath":"/assets-cdn/worker/find-in-file-worker-f653046cb227.js","githubDevUrl":null,"enabled_features":{"code_nav_ui_events":false,"overview_shared_code_dropdown_button":false,"react_blob_overlay":false,"copilot_conversational_ux_embedding_update":false,"copilot_smell_icebreaker_ux":true,"copilot_workspace":false,"blob_edit_unsaved_changes_storage":false,"accessible_code_button":true,"overview_branch_and_tag_count":true,"overview_spoofed_commit_banner_react":true}}}} main 1 Branch Tags Go to file Code Folders and files Name Name Last commit message Last commit date Latest commit stuarth fix empty node handling Oct 26, 2024 bf225a0 ¬∑ Oct 26, 2024 History 5 Commits src src fix empty node handling Oct 26, 2024 .gitignore .gitignore html to maud Oct 26, 2024 Cargo.toml Cargo.toml fix visdom path Oct 26, 2024 LICENSE.md LICENSE.md add license Oct 26, 2024 README.md README.md quick README Oct 26, 2024 View all files Repository files navigation README MIT license Maudify - Convert HTML to Maud How to use it Installing Clone the repo, cargo build , and put the resulting executable in your $PATH Running echo ' <div class="class-a class-b"><span>foo</span></div> ' | maudify
div class= " class-a class-b " {
    span { " foo " }
} {"resolvedServerColorMode":"day"} About Convert HTML to Maud Topics html rust Resources Readme License MIT license Activity Stars 2 stars Watchers 1 watching Forks 0 forks Report repository Releases No releases published Packages 0 No packages published Languages Rust 100.0% Footer ¬© 2024 GitHub,¬†Inc. Footer navigation Terms Privacy Security Status Docs Contact Manage cookies Do not share my personal information You can‚Äôt perform that action at this time.
======>
https://old.reddit.com/r/rust/comments/1gcqkq1/are_there_any_resources_on_how_to_make_a_wayland/
-->>-->>
I want to learn how to make a Wayland compositor using Rust but I can't find any resources. I read that    smithay    is primarily used to make a Wayland compositor and it also has a book but the book is quite short and not complete (   https://smithay.github.io/book/   ). Does anyone have experience in writing a Wayland compositor and knows where to start / where to get resources?   
   

======>
https://github.com/Schachte/space-monitor-rs
-->>-->>
Repository files navigation README üöÄ Space Monitor Space Monitor is a Rust API for subscribing to real-time changes on Mac OS X to obtain the current active space (virtual desktop) index. Heavily inspired by the great work of George Christou and his Swift project - WhichSpace . üìö Examples Check usage in the examples directory Async retrieval (event listener) use std :: thread ; use macos_space_monitor :: { MonitorEvent , SpaceMonitor } ; fn main ( ) { let ( monitor , rx ) = SpaceMonitor :: new ( ) ; let _monitoring_thread = thread :: spawn ( move || { while let Ok ( event ) = rx . recv ( ) { match event { MonitorEvent :: SpaceChange ( space ) => { println ! ( "Space change detected! Active space is: {}" , space ) ; } } } } ) ; monitor . start_listening ( ) ; } Sync retrieval use macos_space_monitor :: SpaceMonitor ; fn main ( ) { let space = SpaceMonitor :: get_current_space_number ( ) ; println ! ( "Current space: {}" , space ) ; } Why? This library was motivated by a fun project I am working on that deals with managing spaces in a more custom way on Mac OS X for more efficient space navigation. One of the core requirements when building space/window management tooling is to understand where you are within your display. This is a key crate I rely on to enable real-time lookups to map a virtual display ID to a space index. Building If you don't know Rust or aren't using Rust and simply just want a binary you can invoke from your own code, you can build the example directly and embed the binary or add it to your $PATH . Event Listener Version: Build: cargo build --release --example monitor Run: ./target/release/examples/monitor Adhoc Version: Build: cargo build --release --example adhoc Run: ./target/release/examples/adhoc üß† How it works Surprisingly, obtaining the active virtual desktop index is a non-trivial task on Mac OS X and attempts in doing so have been breaking release after release as the method relies on undocumented Mac OS native APIs. This method relies on a few key ingredients: Core Graphics (CG) We use CGSMainConnectionID to get a connection to the main window server The CGS (core graphics services) API is exploited to obtain this information FFI (Foreign function interface) Bridge for us to call the C APIs from Rust Cocoa Apple's native API for Mac OS apps NSApplication for background app Handle system notifications Objective-C Some message-passing invocations ( msg_send! ) Used for receiving event notifications Space monitor is essentially a Rust binding to access lower-level mac OS internal APIs in an easy and efficient way. While you can occassionally deciper some esoteric plist files to derive the active screen via defaults read com.apple.spaces SpacesDisplayConfiguration , the contents are almost always incorrect and out of date, which makes it a non-starter for realtime change detection. üê¶ Swift When I designed this crate, I wanted a minimal example I could iterate off of in Swift to simplify the migration into Rust since I'm not a Swift developer. Mostly just committing this for posterity, but you can find a much simpler implementation of this lib in Swift underneath the ./swift directory. Once again, this is heavily inspired by WhichSpace , but wanted to remove all the boilerplate. You can compile it via either of the following: ./swift/compile.sh swiftc -o SpaceMonitor CurrentSpace-types.swift CurrentSpace-main.swift CurrentSpace-delegate.swift Then just run: ./SpaceMonitor ‚ö†Ô∏è Warning As this crate relies on private, undocumented native Mac OS APIs internally, I believe your app would be rejected from the Apple app store if this crate is used within your application. However, users can still install the application externally.
======>
https://old.reddit.com/r/rust/comments/1gcfm2i/fennec_an_earlystage_oxidized_toolchain_for_php/
-->>-->>
Hey    r/rust    üëã   

   I‚Äôm excited to share Fennec, a new PHP toolchain inspired by Rust's tooling and philosophies. Fennec brings the robustness and developer-centric design of the Rust ecosystem to PHP, with features like linting, formatting, and static analysis.   

   After a couple of months of development, I‚Äôm open-sourcing Fennec. It‚Äôs super early, and all it can do right now is basic linting with only a few lint plugins and rules implemented. It‚Äôll take a long time for it to take full shape, but you can try and test it now. The long-term goal is for Fennec to become a complete toolchain that modernizes PHP tooling.   

   I‚Äôd love any feedback on the project. Check out the code here:    github.com/carthage-software/fennec   

   Thanks for your thoughts and ideas as I work to bring Rust-inspired tools to PHP!   
   

======>
https://old.reddit.com/r/rust/comments/1gcsvmy/my_bare_metal_physics_engine_in_rust/
-->>-->>
I have been developing this project which is a bare metal physics engine, currently I have a simple base system and a simple collision system, although I am improving it to add other things, I would like you to give me some feed back to the project.   

   Crate url:    https://crates.io/crates/motion   
github repo:    https://github.com/juanperias/motion   
   

======>
https://old.reddit.com/r/rust/comments/1gchzlt/why_cant_rust_optimize_the_size_of_optionoptiont/
-->>-->>
https://play.rust-lang.org/?version=stable&mode=release&edition=2021&gist=5b52d96b722bbb8741b937839b8f5d62   

   Is this the fundamental limitation of the type system or is it just a missed optimization opportunity?   
   

======>
https://old.reddit.com/r/rust/comments/1gcx5b9/containeryard_a_declarative_reproducible_and/
-->>-->>
ContainerYard is a declarative, reproducible, and reusable decentralized approach for defining containers. Think Nix flakes meets Containerfiles (aka Dockerfiles).   

   Contianerfiles are divided into reusable configurable parts called "modules" and one can compose modules into containerfiles. e.g.   

   ```yaml
inputs:
  remotes:
    - url:    https://github.com/mcmah309/yard_module_repository   
      commit: 992eac4ffc0a65d7e8cd30597d93920901fbd1cd
      modules:
        base: bases/ubuntu/base
        git_config: independent/git_config
        bash_flavor: apt/bash_interactive/flavors/mcmah309   

   outputs:
  Containerfile1:
    - base:
        version: "24.04"
    - RUN apt install git
    - git_config:
        user_name: $(git config --get user.name)
        email: $(git config --get user.email)
    - bash_flavor:
  Containerfile2:
    - base:
        version: "22.04"
    - bash_flavor:   

   hooks:
  build:
    # Ensures everytime    yard build    is run, the    commit:    fields are updated
    pre: yard update
```
Write your config once and easily reuse and incrementally improve it over time.   

   Github:    https://github.com/mcmah309/containeryard   
   

======>
https://old.reddit.com/r/rust/comments/1gcxqyc/announcing_statement/
-->>-->>
I've seen some interest on here in state machine libraries, and since I needed a flexible one in my latest project, I figured that I'd write and publish it as my first serious open-source contribution.   

   Statement is a very flexible event-driven state machine, built with the intent of managing the state of potentially many entities of a type. Unlike some other state machine libraries that I've seen in the rust space, statement machines are defined at run-time, and can have side effects attached to the transitions that drive the application as entities change state.   

   Have a look, as always constructive criticism is welcome.   
   https://crates.io/crates/statement   
   

======>
https://old.reddit.com/r/rust/comments/1gcihk3/announcing_mlua_v010/
-->>-->>
mlua is high level Lua 5.4/5.3/5.2/5.1 (including LuaJIT) and Roblox Luau bindings to Rust with async/await support.   

   This is a major release with focus on improving developer experience and multi threading support.   

   Most notable changes:   

   
   Dropped    'lua    lifetime (Lua and subtypes are now    'static   )   
   Send + Sync    with    send    feature flag   
   Function traits to wrap Rust functions with arbitrary number of arguments   
   Low level Lua C API support through    Lua::exec_raw   
   

   See full    CHANGELOG   

   The new version is even faster than v0.9, see our    benchmarks   .   
   

======>
https://old.reddit.com/r/rust/comments/1gctr27/ygen_now_landed_in_godbolt/
-->>-->>
Hi,
After recently supporting 55% of llvm ir nodes, I worked on optimizing the generated assembly code and the wasm backend.   

   I also created a pr to godbolt so you can try out ygen live in your browser without needing to install anything:    https://godbolt.org/z/1bY3eq4EE   .   

   (I am only 13yrs old so the generated assembly code doesn't look that good)   

   Here's the GitHub:    https://github.com/Cr0a3/ygen    (please leave a ‚≠ê)   

   Here are a few flags with which you can experiment a little:
 * -O turns on optimizations 
 * -triple="wasm64-unkown" uses the experimental wasm backend   

   The ir is a little different from llvm so you can refer to the ir code from one of the tests as a good reference:    https://github.com/Cr0a3/ygen/blob/main/tests%2Fshared_vars1.yl#L7-L33   

   (Sorry if the formatting is fucked up I am writing this from mobile)   

   Bye   
   

