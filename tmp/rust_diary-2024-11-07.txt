https://github.com/dtolnay/thiserror/releases/tag/2.0.0
-->>-->>
Releases 2.0.0 2.0.0 Latest Latest Compare Choose a tag to compare Could not load tags Nothing to show {{ refName }} default Loading View all tags dtolnay released this 06 Nov 03:33 2.0.0 This tag was signed with the committer’s verified signature . dtolnay David Tolnay GPG key ID: F9BA143B95FF6D82 Learn about vigilant mode . 6097d61 This commit was signed with the committer’s verified signature . dtolnay David Tolnay GPG key ID: F9BA143B95FF6D82 Learn about vigilant mode . Breaking changes Referencing keyword-named fields by a raw identifier like {r#type} inside a format string is no longer accepted; simply use the unraw name like {type} ( #347 ) This aligns thiserror with the standard library's formatting macros, which gained support for implicit argument capture later than the release of this feature in thiserror 1.x. # [ derive ( Error , Debug ) ] # [ error ( "... {type} ..." ) ] // Before: {r#type} pub struct Error { pub r#type : Type , } Trait bounds are no longer inferred on fields whose value is shadowed by an explicit named argument in a format message ( #345 ) // Before: impl<T: Octal> Display for Error<T> // After: impl<T> Display for Error<T> # [ derive ( Error , Debug ) ] # [ error ( "{thing:o}" , thing = "..." ) ] pub struct Error < T > { thing : T , } Tuple structs and tuple variants can no longer use numerical {0} {1} access at the same time as supplying extra positional arguments for a format message, as this makes it ambiguous whether the number refers to a tuple field vs a different positional arg ( #354 ) # [ derive ( Error , Debug ) ] # [ error ( "ambiguous: {0} {}" , $ N ) ] //                  ^^^ Not allowed, use #[error("... {0} {n}", n = $N)] pub struct TupleError ( i32 ) ; Code containing invocations of thiserror's derive(Error) must now have a direct dependency on the thiserror crate regardless of the error data structure's contents ( #368 , #369 , #370 , #372 ) Features Support disabling thiserror's standard library dependency by disabling the default "std" Cargo feature: thiserror = { version = "2", default-features = false } ( #373 ) Support using r#source as field name to opt out of a field named "source" being treated as an error's Error::source() ( #350 ) # [ derive ( Error , Debug ) ] # [ error ( "{source} ==> {destination}" ) ] pub struct Error { r#source : char , destination : char , } let error = Error { source : 'S' , destination : 'D' } ; Infinite recursion in a generated Display impl now produces an unconditional_recursion warning ( #359 ) # [ derive ( Error , Debug ) ] # [ error ( "??? {self}" ) ] pub struct Error ; A new attribute #[error(fmt = path::to::myfmt)] can be used to write formatting logic for an enum variant out-of-line ( #367 ) # [ derive ( Error , Debug ) ] pub enum Error { # [ error ( fmt = demo_fmt ) ] Demo { code : u16 , message : Option < String > } , } fn demo_fmt ( code : & u16 , message : & Option < String > , formatter : & mut fmt :: Formatter ) -> fmt :: Result { write ! ( formatter, "{code}" ) ? ; if let Some ( msg ) = message { write ! ( formatter, " - {msg}" ) ? ; } Ok ( ( ) ) } Enums with an enum-level format message are now able to have individual variants that are transparent to supersede the enum-level message ( #366 ) # [ derive ( Error , Debug ) ] # [ error ( "my error {0}" ) ] pub enum Error { Json ( # [ from ] serde_json :: Error ) , Yaml ( # [ from ] serde_yaml :: Error ) , # [ error ( transparent ) ] Other ( # [ from ] anyhow :: Error ) , } Assets 2 Loading 3 Veetaha, 1234Brian, and 0x676e67 reacted with thumbs up emoji 87 NobodyXu, shuhuiluo, Leo1003, Ritzier, mkaput, AkiyukiOkayasu, ryo33, orhun, jessebraham, taminhtienhai, and 77 more reacted with hooray emoji 24 dimlev, chanced, BurntSushi, rnbguy, benluelo, mikkel1156, cwfitzgerald, neoncitylights, hammypants, jdswensen, and 14 more reacted with heart emoji All reactions 3 reactions 87 reactions 24 reactions 97 people reacted
======>
https://old.reddit.com/u/VorpalWay
-->>-->>
Soa minimizes overhead by using one allocation for the collection Doesn't that make growing the container more expensive? Vec can often be just an expanded allocation without a move. For large Vec a trick is used by the standard library when there isn't enough free space after the backing array to grow in place. Instead we ask the OS to move the backing pages to somewhere else in the address space where there is room after, and then grow the allocation. This means there is no data copy involved, it is just a mmap. For SOA, if the data is stored after each other in one allocation this trick will not be possible. PS. I would love to see enum support. I imagine it is extremely hard, but I would use it in a heartbeat.
======>
https://old.reddit.com/u/dtolnay
-->>-->>
I had a look at the specialization-based approach with cargo expand . Have you looked at whether something like the following might be equally effective, while being both stable and safe? // input to #[precompile_with(u32)]
pub fn generic_fn<T>() { /* original function body */ }

// generated by macro:
#[doc(hidden)]
pub fn ____precompiled_generic_fn_u32() {
    generic_fn::<u32>();
} With this, I would expect that we'd get a monomorphization of generic_fn::<u32> in this crate, and that downstream code calling generic_fn::<u32>() would reuse that same one, even if ____precompiled_generic_fn_u32 is never called. The discussion under https://internals.rust-lang.org/t/explicit-monomorphization-for-compilation-time-reduction/15907 seems to suggest this should work.

======>
https://github.com/alceal/plotlars
-->>-->>
Repository files navigation README MIT license Plotlars Plotlars is a versatile Rust library that acts as a wrapper around the Plotly
crate, bridging the gap between the powerful Polars data analysis library and
Plotly. It simplifies the process of creating visualizations from data frames,
allowing developers to focus on data insights rather than the intricacies of
plot creation. Motivation The creation of Plotlars was driven by the need to simplify the process of
creating complex plots in Rust, particularly when working with the powerful
Polars data manipulation library. Generating visualizations often requires
extensive boilerplate code and deep knowledge of both the plotting library
(Plotly) and the data structure. This complexity can be a significant hurdle,
especially for users who need to focus on analyzing and interpreting data rather
than wrestling with intricate plotting logic. To illustrate this, consider the following example where a scatter plot is
created without Plotlars : use plotly :: { common :: * , layout :: * , Plot , Scatter , } ; use polars :: prelude :: * ; fn main ( ) { let dataset = LazyCsvReader :: new ( "data/penguins.csv" ) . finish ( ) . unwrap ( ) . select ( [ col ( "species" ) . cast ( DataType :: Categorical ( None , CategoricalOrdering :: default ( ) ) ) , col ( "flipper_length_mm" ) . cast ( DataType :: Int16 ) , col ( "body_mass_g" ) . cast ( DataType :: Int16 ) , ] ) . collect ( ) . unwrap ( ) ; let group_column = "species" ; let x = "body_mass_g" ; let y = "flipper_length_mm" ; let groups = dataset . column ( group_column ) . unwrap ( ) . unique ( ) . unwrap ( ) ; let layout = Layout :: new ( ) . title ( Title :: with_text ( "Penguin Flipper Length vs Body Mass" ) ) . x_axis ( Axis :: new ( ) . title ( Title :: with_text ( "Body Mass (g)" ) ) ) . y_axis ( Axis :: new ( ) . title ( Title :: with_text ( "Flipper Length (mm)" ) ) ) . legend ( Legend :: new ( ) . title ( Title :: with_text ( "Species" ) ) ) ; let mut plot = Plot :: new ( ) ; plot . set_layout ( layout ) ; for group in groups . iter ( ) { let group = group . get_str ( ) . unwrap ( ) ; let data = dataset . clone ( ) . lazy ( ) . filter ( col ( group_column ) . eq ( lit ( group ) ) ) . collect ( ) . unwrap ( ) ; let x = data . column ( x ) . unwrap ( ) . i16 ( ) . unwrap ( ) . to_vec ( ) ; let y = data . column ( y ) . unwrap ( ) . i16 ( ) . unwrap ( ) . to_vec ( ) ; let trace = Scatter :: default ( ) . x ( x ) . y ( y ) . name ( group ) . mode ( Mode :: Markers ) . marker ( Marker :: new ( ) . size ( 10 ) . opacity ( 0.5 ) ) ; plot . add_trace ( trace ) ; } plot . show ( ) ; } In this example, creating a scatter plot involves writing substantial code to
manually handle the data and configure the plot, including grouping the data by
category and setting up the plot layout. Now, compare that to the same plot created using Plotlars : use plotlars :: { ScatterPlot , Plot , Text , } ; use polars :: prelude :: * ; fn main ( ) { let dataset = LazyCsvReader :: new ( "data/penguins.csv" ) . finish ( ) . unwrap ( ) . select ( [ col ( "species" ) . cast ( DataType :: Categorical ( None , CategoricalOrdering :: default ( ) ) ) , col ( "flipper_length_mm" ) . cast ( DataType :: Int16 ) , col ( "body_mass_g" ) . cast ( DataType :: Int16 ) , ] ) . collect ( ) . unwrap ( ) ; ScatterPlot :: builder ( ) . data ( & dataset ) . x ( "body_mass_g" ) . y ( "flipper_length_mm" ) . group ( "species" ) . opacity ( 0.5 ) . size ( 12 ) . colors ( vec ! [ Rgb ( 178 , 34 , 34 ) , Rgb ( 65 , 105 , 225 ) , Rgb ( 255 , 140 , 0 ) , ] ) . plot_title ( "Penguin Flipper Length vs Body Mass" ) . x_title ( "Body Mass (g)" ) . y_title ( "Flipper Length (mm)" ) . legend_title ( "Species" ) . build ( ) . plot ( ) ; } This is the output: With Plotlars, the same scatter plot is created with significantly less code.
The library abstracts away the complexities of dealing with individual plot
components and allows the user to specify high-level plot characteristics. This
streamlined approach not only saves time but also reduces the potential for
errors and makes the code more readable and maintainable. Installation cargo add plotlars Features Seamless Integration with Polars: Leverage the power of Polars for efficient
data manipulation and analysis. Support for Multiple Plot Types: Easily create bar, line, scatter, and other
plot types. Customization: Modify plot appearance with an intuitive API. Plotlars in Jupyter Notebooks Plotlars seamlessly integrates with Jupyter Notebooks, allowing you to leverage
the power of interactive data visualization directly within your notebook
environment. This integration is made possible through the use of the evcxr project , which provides a Jupyter kernel
for the Rust programming language. With Polars, evcxr, and Plotlars, data science in Rust leaps to the next level
, making powerful data analysis and visualization more accessible and efficient
than ever before. License This project is licensed under the MIT License. See the LICENSE.txt file for details. Acknowledgements Polars : For providing a fast and
efficient data manipulation library. Plotly : For the inspiration and ideas
behind visualization libraries. Evcxr : For enabling the use of Rust in
Jupyter Notebooks. Rust Community: For the support and development of an amazing programming
language.
======>
https://www.nationalgeographic.com/environment/article/private-jet-flights-climate-change
-->>-->>
Private jets taxis at Friedman Memorial Airport in Hailey, Idaho, June 29th, 2022. Every July, as the elite Sun Valley conference kicks off, one man at the small airport plays a high-stakes game of three-dimensional Tetris involving multimillion dollar private planes and some of the world's most powerful people. Photograph by Ellen Hansen, The New York Times/ Redux ENVIRONMENT Private jets are increasingly replacing car trips—for the ultra-wealthy The ultra-rich are flying more on private jets, some of which emit more carbon per hour than an average person produces in a year. By Olivia Ferrari November 7, 2024 Private jet use is soaring, and the biggest contributors to private jets’ emissions are the ultra-wealthy. About half of the private flights taken between 2019 and 2023 were short—some under 100 miles—and could have been otherwise drivable trips, according to a new study in Communications Earth & Environment . Although only about 0.003 percent of the world’s population use private aviation, it is highly energy-intensive, emitting significantly more carbon per passenger than commercial flights. Celebrities in particular have faced growing criticism for their private aircraft use. Some private aircraft models might emit more carbon per hour than an average person emits in a year. As a result, those who regularly fly private can produce almost 500 times more carbon in a year compared to the average person worldwide, according to the new study. This research was the first to pinpoint global carbon emissions from the private aviation industry. Here’s what else we’ve learned. Flying private creates an enormous carbon footprint The researchers analyzed flight tracking data for over 18.7 million private flights flown by almost 26,000 private aircrafts between 2019 and 2023, and calculated their emissions based on flight time, trajectory, and fuel consumption of each aircraft type. LIMITED TIME OFFER The perfect gift for the history buff in your life. Give now and get a FREE TOTE BAG. GIVE A GIFT The results showed private aviation overall contributed approximately 15.6 million metric tons of carbon dioxide in 2023, about 3.6 metric tons per flight on average. This equates to about 1.8 percent of the total carbon emissions produced by commercial aviation in 2023. “Private aviation has much lower emissions in total than commercial aviation,” Lynnette Dray , climate scientist at University College London who was not involved in the new study, said in an email. “However, the emissions per passenger are much higher, and private aviation emissions are growing faster than commercial aviation emissions.” The study only assessed direct emissions from fuel use in flight, so the carbon footprint of private aviation could actually be larger, considering the time aircrafts spend taxiing, or other vehicles like helicopters used to reach a final destination from a private aircraft. Aviation also produces other environmental impacts in addition to carbon, according to Dray: planes emit nitrogen oxides, and cause particulate and noise pollution where they take off and land. ( Forget your carbon footprint. Your climate shadow is what really matters. ) Some flights could have been road trips Many of the flights analyzed were over short distances that could be driven. The study authors think private aircraft owners might choose to fly for convenience or to save time. Almost half of all flights (47.4 percent) were shorter than 310 miles. According to the findings, 18.9 percent of flights were for distances below 124 miles, and many were empty flights, sent to deliver or pick up an individual. You May Also Like ENVIRONMENT 5 reasons why flying is becoming more dangerous ENVIRONMENT What fuel made from the sun could do for the planet ENVIRONMENT Another weapon to fight climate change? Put carbon back where we found it Very short flights, below 31 miles, make up 4.7 percent of private flights analyzed in the study. Big events cause big spikes in private jet travel Major events from like the 2023 Super Bowl in Arizona, the 2023 Cannes Film Festival in France, the Conference of Parties (COP28) in Dubai, and the 2022 FIFA World Cup in Qatar were linked to significant emissions peaks from private aviation. Flight pattern analysis showed the 2022 FIFA World cup drew the most private flights of the events studied, with 1,846 private flights linked to the event, which produced 14,700 metric tons of carbon. COP 28, a conference focused on climate action, drew 291 private flights producing 3,800 metric tons of carbon. The researchers also found a seasonal trend peaking in summer, and concentrated on weekends, to locations such as Ibiza; Spain; and Nice, France, indicating private aviation used for leisure travel. The number of private flights is growing Overall private aircraft emissions have increased over the past few years, with a 46 percent increase in carbon emissions between 2019 and 2023, according to the study. Part of this growth could be connected to the COVID-19 pandemic, says Stefan Gössling , geographer at Linnaeus University in Sweden and study author. Since commercial aviation was not available early in the COVID-19 pandemic, those who had private aviation available to them likely used it as an alternative. There has also been a shift away from flying business and first class on commercial flights in recent years, says Dray, and a shift instead toward private jets, which could be due to people trying to avoid contagion risk during the pandemic. Gössling says the pandemic also made some of the ultra-wealthy even wealthier. More money accumulating within a small already-wealthy group could have increased access to and interest in private aviation, says Gössling. Even if the COVID-19 pandemic gave a boost to private aviation, growth is projected to continue over the next few decades. To limit climate change, private flights need scrutiny The private aviation industry needs better regulation, according to the researchers. The majority of private aircrafts are based in the U.S., where about four percent of the world population is concentrated but about 68.7 percent of all private aircrafts are registered, and most of the private air traffic analyzed in the study occurred within the U.S. “If we don’t start reducing emissions at the top, where individuals emit much, much more than the average human being, then there is no incentive for anyone to reduce emissions,” says Gössling. And the world’s wealthiest groups are those who contribute most to emissions that worsen climate change. On average, 50 of the world’s richest billionaires took 184 flights in a single year, producing as much carbon as the average person would in 300 years . “The most important implication of this study is probably that it gives us a chance to charge the wealthy for the damage they are causing,” says Gössling, “because we can put a price tag on emissions.” Related Topics AVIATION GREENHOUSE EFFECT CARBON FOOTPRINT CLIMATE CHANGE You May Also Like ENVIRONMENT Forget your carbon footprint—your climate shadow is what really matters SCIENCE Earth just had its hottest day on record. One day it's going to feel like Venus. ENVIRONMENT Cooking oil just fueled a transatlantic flight. But is it a solution or a distraction? HISTORY & CULTURE The incredible details 'Masters of the Air' gets right about WWII SCIENCE Biodegradable plastic exists—but it’s not cheap
======>
https://www.thetimes.com/uk/environment/article/celebrity-private-jets-co2-emissions-5gmvgncrl
-->>-->>
window.nuk['article'] = {"articleId":"1b1d9aa2-0321-45d5-946a-be10f9fc06fa","debounceTimeMs":0,"logoUrl":"https://www.thetimes.com/d/img/dual_masthead_small-8c204c6cb9.png","navigationMode":{"isCurrentEdition":false,"isPastSixDays":false,"isMyArticles":false,"isStateless":true},"commentingConfig":{"account":"sp_nNNHCgsN"},"articleDataFromRender":{"hostName":"https://www.thetimes.com","canonicalUrl":"/uk/environment/article/celebrity-private-jets-co2-emissions-5gmvgncrl","breadcrumbs":[{"title":"UK","url":"/uk"},{"title":"Environment","url":"/uk/environment"}]},"userState":{"isLoggedIn":false,"isMetered":false},"paidContentClassName":"paywall-EAB47CFD","swgProductId":"thetimes.co.uk:basic","zephrDivs":false,"sharingSavingFlag":true,"commentingFlag":true,"showAudioPlayer":false,"storefrontConfig":"https://globalstore.thetimes.com","isEntitlementFeatureEnabled":false}; window.__APOLLO_STATE__ = {"Article:1b1d9aa2-0321-45d5-946a-be10f9fc06fa":{"backgroundColour":null,"commentsEnabled":true,"paywalledContent":{"type":"json","json":[{"name":"paragraph","children":[{"name":"break","children":[]},{"name":"text","attributes":{"value":"The private jet flights taken by some celebrities are emitting more than 500 times as much carbon dioxide as the average person each year, a study has found."},"children":[]}]},{"name":"paragraph","children":[{"name":"text","attributes":{"value":"The peer-reviewed research by a team at Linnaeus University in Sweden, the first to quantify theglobal impact of private jets on the climate, discovered emissions soared in four years."},"children":[]}]},{"name":"paragraph","children":[{"name":"text","attributes":{"value":"Between 2019 and last year annual private aviation emissions increased by 46 per cent to 15.6 million tonnes of CO2, as much as Nepal emits each year."},"children":[]}]},{"name":"paragraph","children":[{"name":"text","attributes":{"value":"The study drew on a worldwide flight-tracking database of 26,000 private aircraft and 18.7 million flights over the four years. The team then cross-referenced that with average fuel consumption data for 72 jet models."},"children":[]}]},{"name":"image","attributes":{"id":"e8a6e726-769c-4b18-8b93-1755c3efada3","display":"primary","caption":"Kim Kardashian was among the celebrities whose jet travel was analysed, but the results were kept anonymous","credits":"Mario Anzuoni/Reuters","url":"https://www.thetimes.com/imageserver/image/%2Fmethode%2Ftimes%2Fprod%2Fweb%2Fbin%2F32226927-2250-491e-b3c5-4c80d0f973ee.jpg?crop=5000%2C3520%2C0%2C0","ratio":"5000:3520","relativeHorizontalOffset":0,"relativeVerticalOffset":0,"relativeWidth":1,"relativeHeight":1},"children":[]},{"name":"paragraph","children":[{"name":"text","attributes":{"value":"Social media photos of celebrities posing next"},"children":[]}]}]},"summary({\"maxCharCount\":200})":{"type":"json","json":[{"name":"paragraph","children":[{"name":"break","children":[]},{"name":"text","attributes":{"value":"The private jet flights taken by some celebrities are emitting more than 500 times as much carbon dioxide as the average person each year, a study has found."},"children":[]}]},{"name":"paragraph","children":[{"name":"text","attributes":{"value":"The peer-reviewed research by a team at"},"children":[]}]}]},"dropcapsDisabled":false,"expirableFlags":[{"type":"id","generated":true,"id":"Article:1b1d9aa2-0321-45d5-946a-be10f9fc06fa.expirableFlags.0","typename":"ExpirableFlag"}],"keywords":{"type":"json","json":["the","celebrities","whose","jet","pollution","is","500","times","the","average","person’s"]},"leadAsset":{"type":"id","generated":false,"id":"Image:2acd0101-4232-445c-9f53-2a1dfbd6f218","typename":"Image"},"relatedArticleSlice":{"type":"id","generated":true,"id":"$Article:1b1d9aa2-0321-45d5-946a-be10f9fc06fa.relatedArticleSlice","typename":"StandardSlice"},"sharingEnabled":true,"savingEnabled":true,"standfirst":"Researchers analysing celebrities’ private aviation found most flights were taken for leisure — and there was a spike for the UN climate conference","tiles({\"desc\":true,\"first\":5})":[{"type":"id","generated":true,"id":"Article:1b1d9aa2-0321-45d5-946a-be10f9fc06fa.tiles({\"desc\":true,\"first\":5}).0","typename":"Tile"},{"type":"id","generated":true,"id":"Article:1b1d9aa2-0321-45d5-946a-be10f9fc06fa.tiles({\"desc\":true,\"first\":5}).1","typename":"Tile"},{"type":"id","generated":true,"id":"Article:1b1d9aa2-0321-45d5-946a-be10f9fc06fa.tiles({\"desc\":true,\"first\":5}).2","typename":"Tile"}],"template":"mainstandard","textColour":null,"topics({\"maxCount\":5})":[{"type":"id","generated":true,"id":"Article:1b1d9aa2-0321-45d5-946a-be10f9fc06fa.topics({\"maxCount\":5}).0","typename":"Topic"},{"type":"id","generated":true,"id":"Article:1b1d9aa2-0321-45d5-946a-be10f9fc06fa.topics({\"maxCount\":5}).1","typename":"Topic"},{"type":"id","generated":true,"id":"Article:1b1d9aa2-0321-45d5-946a-be10f9fc06fa.topics({\"maxCount\":5}).2","typename":"Topic"}],"bylines":[{"type":"id","generated":true,"id":"Article:1b1d9aa2-0321-45d5-946a-be10f9fc06fa.bylines.0","typename":"AuthorByline"},{"type":"id","generated":true,"id":"Article:1b1d9aa2-0321-45d5-946a-be10f9fc06fa.bylines.1","typename":"TextByline"}],"hasVideo":false,"headline":"The celebrities whose jet pollution is 500 times the average person’s","id":"1b1d9aa2-0321-45d5-946a-be10f9fc06fa","label":null,"publicationName":"TIMES","publishedTime":"2024-11-07T16:49:02.000Z","updatedTime":"2024-11-07T16:52:09.000Z","section":null,"shortIdentifier":"5gmvgncrl","shortHeadline":"The celebrities whose jet pollution is 500 times the average person’s","seoDescription":"Researchers analysing celebrities’ private aviation found most flights were taken for leisure — and there was a spike for the UN climate conference","slug":"celebrity-private-jets-co2-emissions","categoryPath":"/uk/environment/article/celebrity-private-jets-co2-emissions-5gmvgncrl","__typename":"Article"},"Article:1b1d9aa2-0321-45d5-946a-be10f9fc06fa.expirableFlags.0":{"type":"NEW","expiryTime":"2024-11-07T19:49:02.000Z","__typename":"ExpirableFlag"},"Image:2acd0101-4232-445c-9f53-2a1dfbd6f218":{"caption":"Taylor Swift and other celebrities were linked to private jets via social media photos and other publicly available information","credits":null,"crop({\"ratio\":\"16:9\"})":{"type":"id","generated":true,"id":"$Image:2acd0101-4232-445c-9f53-2a1dfbd6f218.crop({\"ratio\":\"16:9\"})","typename":"Crop"},"crop({\"ratio\":\"3:2\"})":{"type":"id","generated":true,"id":"$Image:2acd0101-4232-445c-9f53-2a1dfbd6f218.crop({\"ratio\":\"3:2\"})","typename":"Crop"},"crop({\"ratio\":\"1.25:1\"})":null,"crop({\"ratio\":\"1:1\"})":{"type":"id","generated":true,"id":"$Image:2acd0101-4232-445c-9f53-2a1dfbd6f218.crop({\"ratio\":\"1:1\"})","typename":"Crop"},"crop({\"ratio\":\"4:5\"})":{"type":"id","generated":true,"id":"$Image:2acd0101-4232-445c-9f53-2a1dfbd6f218.crop({\"ratio\":\"4:5\"})","typename":"Crop"},"crop({\"ratio\":\"2:3\"})":{"type":"id","generated":true,"id":"$Image:2acd0101-4232-445c-9f53-2a1dfbd6f218.crop({\"ratio\":\"2:3\"})","typename":"Crop"},"crop({\"ratio\":\"2.25:1\"})":null,"id":"2acd0101-4232-445c-9f53-2a1dfbd6f218","title":"a woman holding an airplane in front of a sign that says co2","__typename":"Image"},"$Image:2acd0101-4232-445c-9f53-2a1dfbd6f218.crop({\"ratio\":\"16:9\"})":{"ratio":"16:9","url":"https://www.thetimes.com/imageserver/image/%2Fmethode%2Ftimes%2Fprod%2Fweb%2Fbin%2Fb41f6b17-2fbd-40b8-add9-84ff962a1246.jpg?crop=1600%2C900%2C0%2C0","__typename":"Crop"},"$Image:2acd0101-4232-445c-9f53-2a1dfbd6f218.crop({\"ratio\":\"3:2\"})":{"ratio":"3:2","url":"https://www.thetimes.com/imageserver/image/%2Fmethode%2Ftimes%2Fprod%2Fweb%2Fbin%2Fa1a17d7c-a6d0-4f2b-ab8e-7cabf5c5c15a.jpg?crop=1500%2C1000%2C0%2C0","__typename":"Crop"},"$Image:2acd0101-4232-445c-9f53-2a1dfbd6f218.crop({\"ratio\":\"1:1\"})":{"ratio":"1:1","url":"https://www.thetimes.com/imageserver/image/%2Fmethode%2Ftimes%2Fprod%2Fweb%2Fbin%2Fb41f6b17-2fbd-40b8-add9-84ff962a1246.jpg?crop=900%2C900%2C373%2C0","__typename":"Crop"},"$Image:2acd0101-4232-445c-9f53-2a1dfbd6f218.crop({\"ratio\":\"4:5\"})":{"ratio":"4:5","url":"https://www.thetimes.com/imageserver/image/%2Fmethode%2Ftimes%2Fprod%2Fweb%2Fbin%2Fb41f6b17-2fbd-40b8-add9-84ff962a1246.jpg?crop=720%2C900%2C440%2C0","__typename":"Crop"},"$Image:2acd0101-4232-445c-9f53-2a1dfbd6f218.crop({\"ratio\":\"2:3\"})":{"ratio":"2:3","url":"https://www.thetimes.com/imageserver/image/%2Fmethode%2Ftimes%2Fprod%2Fweb%2Fbin%2Fb41f6b17-2fbd-40b8-add9-84ff962a1246.jpg?crop=600%2C900%2C500%2C0","__typename":"Crop"},"$Article:1b1d9aa2-0321-45d5-946a-be10f9fc06fa.relatedArticleSlice":{"__typename":"StandardSlice","items":[{"type":"id","generated":true,"id":"$Article:1b1d9aa2-0321-45d5-946a-be10f9fc06fa.relatedArticleSlice.items.0","typename":"Tile"},{"type":"id","generated":true,"id":"$Article:1b1d9aa2-0321-45d5-946a-be10f9fc06fa.relatedArticleSlice.items.1","typename":"Tile"}]},"$Article:1b1d9aa2-0321-45d5-946a-be10f9fc06fa.relatedArticleSlice.items.0":{"leadAsset":null,"article":{"type":"id","generated":false,"id":"Article:e0ee6efb-586f-40aa-b483-2ea023f96665","typename":"Article"},"__typename":"Tile"},"$Image:b00e3dad-cecc-4cba-b2a5-0ff3b22ef1b1.crop({\"ratio\":\"16:9\"})":{"url":"https://www.thetimes.com/imageserver/image/%2Fmethode%2Ftimes%2Fprod%2Fweb%2Fbin%2F3ee1619d-8d96-44d7-a060-961d379c1a22.jpg?crop=5000%2C2813%2C0%2C262","__typename":"Crop"},"Image:b00e3dad-cecc-4cba-b2a5-0ff3b22ef1b1":{"crop({\"ratio\":\"16:9\"})":{"type":"id","generated":true,"id":"$Image:b00e3dad-cecc-4cba-b2a5-0ff3b22ef1b1.crop({\"ratio\":\"16:9\"})","typename":"Crop"},"crop({\"ratio\":\"3:2\"})":{"type":"id","generated":true,"id":"$Image:b00e3dad-cecc-4cba-b2a5-0ff3b22ef1b1.crop({\"ratio\":\"3:2\"})","typename":"Crop"},"id":"b00e3dad-cecc-4cba-b2a5-0ff3b22ef1b1","title":"a woman climbs the stairs of a private jet","__typename":"Image"},"$Image:b00e3dad-cecc-4cba-b2a5-0ff3b22ef1b1.crop({\"ratio\":\"3:2\"})":{"url":"https://www.thetimes.com/imageserver/image/%2Fmethode%2Ftimes%2Fprod%2Fweb%2Fbin%2F3ee1619d-8d96-44d7-a060-961d379c1a22.jpg?crop=5000%2C3333%2C0%2C1","__typename":"Crop"},"Article:e0ee6efb-586f-40aa-b483-2ea023f96665":{"leadAsset":{"type":"id","generated":false,"id":"Image:b00e3dad-cecc-4cba-b2a5-0ff3b22ef1b1","typename":"Image"},"bylines":[{"type":"id","generated":true,"id":"Article:e0ee6efb-586f-40aa-b483-2ea023f96665.bylines.0","typename":"AuthorByline"}],"hasVideo":false,"headline":"A tax on private jets? It’s the price of a plutocrat’s favourite plonk","id":"e0ee6efb-586f-40aa-b483-2ea023f96665","label":null,"publicationName":"SUNDAYTIMES","publishedTime":"2024-11-03T00:01:00.000Z","updatedTime":"2024-11-02T09:47:00.000Z","section":null,"shortIdentifier":"kplbjm7ld","shortHeadline":"A tax on private jets? It’s the price of a plutocrat’s favourite plonk","seoDescription":"The budget’s 50 per cent rise in air passenger duty will mean little to those happy to spend £110,000 for a trip to Dubai","slug":"a-tax-on-private-jets-its-the-price-of-a-plutocrats-favourite-plonk","categoryPath":"/uk/article/a-tax-on-private-jets-its-the-price-of-a-plutocrats-favourite-plonk-kplbjm7ld","__typename":"Article","summary({\"maxCharCount\":105})":{"type":"json","json":[{"name":"paragraph","children":[{"name":"text","attributes":{"value":"“First they come for the PJs …” harrumphs Roman Roy in "},"children":[]},{"name":"italic","children":[{"name":"text","attributes":{"value":"Succession "},"children":[]}]},{"name":"text","attributes":{"value":"when activist investors push to scrap"},"children":[]}]}]},"summary({\"maxCharCount\":125})":{"type":"json","json":[{"name":"paragraph","children":[{"name":"text","attributes":{"value":"“First they come for the PJs …” harrumphs Roman Roy in "},"children":[]},{"name":"italic","children":[{"name":"text","attributes":{"value":"Succession "},"children":[]}]},{"name":"text","attributes":{"value":"when activist investors push to scrap carbon-spewing"},"children":[]}]}]},"summary({\"maxCharCount\":145})":{"type":"json","json":[{"name":"paragraph","children":[{"name":"text","attributes":{"value":"“First they come for the PJs …” harrumphs Roman Roy in "},"children":[]},{"name":"italic","children":[{"name":"text","attributes":{"value":"Succession "},"children":[]}]},{"name":"text","attributes":{"value":"when activist investors push to scrap carbon-spewing executive perks at the"},"children":[]}]}]},"summary({\"maxCharCount\":160})":{"type":"json","json":[{"name":"paragraph","children":[{"name":"text","attributes":{"value":"“First they come for the PJs …” harrumphs Roman Roy in "},"children":[]},{"name":"italic","children":[{"name":"text","attributes":{"value":"Succession "},"children":[]}]},{"name":"text","attributes":{"value":"when activist investors push to scrap carbon-spewing executive perks at the family"},"children":[]}]}]},"summary({\"maxCharCount\":175})":{"type":"json","json":[{"name":"paragraph","children":[{"name":"text","attributes":{"value":"“First they come for the PJs …” harrumphs Roman Roy in "},"children":[]},{"name":"italic","children":[{"name":"text","attributes":{"value":"Succession "},"children":[]}]},{"name":"text","attributes":{"value":"when activist investors push to scrap carbon-spewing executive perks at the family conglomerate. Roman knows"},"children":[]}]}]},"summary({\"maxCharCount\":225})":{"type":"json","json":[{"name":"paragraph","children":[{"name":"text","attributes":{"value":"“First they come for the PJs …” harrumphs Roman Roy in "},"children":[]},{"name":"italic","children":[{"name":"text","attributes":{"value":"Succession "},"children":[]}]},{"name":"text","attributes":{"value":"when activist investors push to scrap carbon-spewing executive perks at the family conglomerate. Roman knows what anyone who has ever flown on a private jet"},"children":[]}]}]}},"$Article:e0ee6efb-586f-40aa-b483-2ea023f96665.bylines.0.author":{"image":"https://www.thetimes.com/imageserver/image/methode%2Ftimes%2Fprod%2Fweb%2Fbin%2F8563130e-c400-437f-a6b4-428fe209656a.png?crop=300%2C300%2C0%2C0&resize=200","jobTitle":"Contributor, Business","twitter":"johnarlidge","slug":"john-arlidge","name":"John Arlidge","__typename":"Author"},"Article:e0ee6efb-586f-40aa-b483-2ea023f96665.bylines.0":{"author":{"type":"id","generated":true,"id":"$Article:e0ee6efb-586f-40aa-b483-2ea023f96665.bylines.0.author","typename":"Author"},"byline":{"type":"json","json":[{"name":"author","children":[{"name":"text","children":[],"attributes":{"value":"John Arlidge"}}],"attributes":{"slug":"john-arlidge"}}]},"__typename":"AuthorByline","image":null},"$Article:1b1d9aa2-0321-45d5-946a-be10f9fc06fa.relatedArticleSlice.items.1":{"leadAsset":null,"article":{"type":"id","generated":false,"id":"Article:75575c10-f8f2-11ed-bc7a-1444acf8fa38","typename":"Article"},"__typename":"Tile"},"$Image:9ab6ae7d-694a-4700-930c-90867167d636.crop({\"ratio\":\"16:9\"})":{"url":"https://www.thetimes.com/imageserver/image/%2Fmethode%2Ftimes%2Fprod%2Fweb%2Fbin%2Fc91a511c-f8c6-11ed-bc7a-1444acf8fa38.jpg?crop=4908%2C2761%2C0%2C256","__typename":"Crop"},"Image:9ab6ae7d-694a-4700-930c-90867167d636":{"crop({\"ratio\":\"16:9\"})":{"type":"id","generated":true,"id":"$Image:9ab6ae7d-694a-4700-930c-90867167d636.crop({\"ratio\":\"16:9\"})","typename":"Crop"},"crop({\"ratio\":\"3:2\"})":{"type":"id","generated":true,"id":"$Image:9ab6ae7d-694a-4700-930c-90867167d636.crop({\"ratio\":\"3:2\"})","typename":"Crop"},"id":"9ab6ae7d-694a-4700-930c-90867167d636","title":"Business Travel","__typename":"Image"},"$Image:9ab6ae7d-694a-4700-930c-90867167d636.crop({\"ratio\":\"3:2\"})":{"url":"https://www.thetimes.com/imageserver/image/%2Fmethode%2Ftimes%2Fprod%2Fweb%2Fbin%2Fc91a511c-f8c6-11ed-bc7a-1444acf8fa38.jpg?crop=4884%2C3256%2C12%2C8","__typename":"Crop"},"Article:75575c10-f8f2-11ed-bc7a-1444acf8fa38":{"leadAsset":{"type":"id","generated":false,"id":"Image:9ab6ae7d-694a-4700-930c-90867167d636","typename":"Image"},"bylines":[{"type":"id","generated":true,"id":"Article:75575c10-f8f2-11ed-bc7a-1444acf8fa38.bylines.0","typename":"AuthorByline"},{"type":"id","generated":true,"id":"Article:75575c10-f8f2-11ed-bc7a-1444acf8fa38.bylines.1","typename":"TextByline"}],"hasVideo":false,"headline":"UK could meet net-zero goals by halving private jet flights","id":"75575c10-f8f2-11ed-bc7a-1444acf8fa38","label":"environment","publicationName":"TIMES","publishedTime":"2023-05-22T23:01:00.000Z","updatedTime":"2023-05-23T06:04:37.000Z","section":"news","shortIdentifier":"l302nmd6r","shortHeadline":"UK could meet net-zero goals by halving private jet flights","seoDescription":"The carbon footprint of private jets in the UK is on a par with 200,000 people taking a return flight to Hong Kong, according to a government-commissioned repor","slug":"uk-could-meet-net-zero-goals-by-halving-private-jet-flights","categoryPath":"/article/uk-could-meet-net-zero-goals-by-halving-private-jet-flights-l302nmd6r","__typename":"Article","summary({\"maxCharCount\":105})":{"type":"json","json":[{"name":"paragraph","children":[{"name":"text","attributes":{"value":"The carbon footprint of private jets in the UK is on a par with 200,000 people taking a return flight to"},"children":[]}]}]},"summary({\"maxCharCount\":125})":{"type":"json","json":[{"name":"paragraph","children":[{"name":"text","attributes":{"value":"The carbon footprint of private jets in the UK is on a par with 200,000 people taking a return flight to Hong Kong, according"},"children":[]}]}]},"summary({\"maxCharCount\":145})":{"type":"json","json":[{"name":"paragraph","children":[{"name":"text","attributes":{"value":"The carbon footprint of private jets in the UK is on a par with 200,000 people taking a return flight to Hong Kong, according to a"},"children":[]}]}]},"summary({\"maxCharCount\":160})":{"type":"json","json":[{"name":"paragraph","children":[{"name":"text","attributes":{"value":"The carbon footprint of private jets in the UK is on a par with 200,000 people taking a return flight to Hong Kong, according to a government-commissioned"},"children":[]}]}]},"summary({\"maxCharCount\":175})":{"type":"json","json":[{"name":"paragraph","children":[{"name":"text","attributes":{"value":"The carbon footprint of private jets in the UK is on a par with 200,000 people taking a return flight to Hong Kong, according to a government-commissioned report calling for"},"children":[]}]}]},"summary({\"maxCharCount\":225})":{"type":"json","json":[{"name":"paragraph","children":[{"name":"text","attributes":{"value":"The carbon footprint of private jets in the UK is on a par with 200,000 people taking a return flight to Hong Kong, according to a government-commissioned report calling for the number of flights to be halved."},"children":[]}]},{"name":"paragraph","children":[{"name":"text","attributes":{"value":"The study by the"},"children":[]}]}]}},"$Article:75575c10-f8f2-11ed-bc7a-1444acf8fa38.bylines.0.author":{"image":"https://www.thetimes.com/imageserver/image/methode%2Ftimes%2Fprod%2Fweb%2Fbin%2Fde9aaf66-7c91-4f79-bd39-084cd33b2d4a.png","jobTitle":"Environment Editor","twitter":"adamvaughan_uk","slug":"adam-vaughan","name":"Adam Vaughan","__typename":"Author"},"Article:75575c10-f8f2-11ed-bc7a-1444acf8fa38.bylines.0":{"author":{"type":"id","generated":true,"id":"$Article:75575c10-f8f2-11ed-bc7a-1444acf8fa38.bylines.0.author","typename":"Author"},"byline":{"type":"json","json":[{"name":"author","children":[{"name":"text","children":[],"attributes":{"value":"Adam Vaughan"}}],"attributes":{"slug":"adam-vaughan"}}]},"__typename":"AuthorByline","image":null},"Article:75575c10-f8f2-11ed-bc7a-1444acf8fa38.bylines.1":{"byline":{"type":"json","json":[{"name":"inline","children":[{"name":"text","children":[],"attributes":{"value":", Environment Editor"}}]}]},"image":null,"__typename":"TextByline"},"Article:1b1d9aa2-0321-45d5-946a-be10f9fc06fa.tiles({\"desc\":true,\"first\":5}).0.slices.0.sections.0":{"title":"News","__typename":"StandardSection"},"Article:1b1d9aa2-0321-45d5-946a-be10f9fc06fa.tiles({\"desc\":true,\"first\":5}).0.slices.0":{"sections":[{"type":"id","generated":true,"id":"Article:1b1d9aa2-0321-45d5-946a-be10f9fc06fa.tiles({\"desc\":true,\"first\":5}).0.slices.0.sections.0","typename":"StandardSection"}],"__typename":"SecondaryOneSlice"},"Article:1b1d9aa2-0321-45d5-946a-be10f9fc06fa.tiles({\"desc\":true,\"first\":5}).0":{"slices":[{"type":"id","generated":true,"id":"Article:1b1d9aa2-0321-45d5-946a-be10f9fc06fa.tiles({\"desc\":true,\"first\":5}).0.slices.0","typename":"SecondaryOneSlice"}],"__typename":"Tile"},"Article:1b1d9aa2-0321-45d5-946a-be10f9fc06fa.tiles({\"desc\":true,\"first\":5}).1.slices.0.sections.0":{"title":"News","__typename":"StandardSection"},"Article:1b1d9aa2-0321-45d5-946a-be10f9fc06fa.tiles({\"desc\":true,\"first\":5}).1.slices.0":{"sections":[{"type":"id","generated":true,"id":"Article:1b1d9aa2-0321-45d5-946a-be10f9fc06fa.tiles({\"desc\":true,\"first\":5}).1.slices.0.sections.0","typename":"StandardSection"}],"__typename":"SecondaryOneSlice"},"Article:1b1d9aa2-0321-45d5-946a-be10f9fc06fa.tiles({\"desc\":true,\"first\":5}).1":{"slices":[{"type":"id","generated":true,"id":"Article:1b1d9aa2-0321-45d5-946a-be10f9fc06fa.tiles({\"desc\":true,\"first\":5}).1.slices.0","typename":"SecondaryOneSlice"}],"__typename":"Tile"},"Article:1b1d9aa2-0321-45d5-946a-be10f9fc06fa.tiles({\"desc\":true,\"first\":5}).2.slices.0.sections.0":{"title":"News","__typename":"StandardSection"},"Article:1b1d9aa2-0321-45d5-946a-be10f9fc06fa.tiles({\"desc\":true,\"first\":5}).2.slices.0":{"sections":[{"type":"id","generated":true,"id":"Article:1b1d9aa2-0321-45d5-946a-be10f9fc06fa.tiles({\"desc\":true,\"first\":5}).2.slices.0.sections.0","typename":"StandardSection"}],"__typename":"SecondaryOneSlice"},"Article:1b1d9aa2-0321-45d5-946a-be10f9fc06fa.tiles({\"desc\":true,\"first\":5}).2":{"slices":[{"type":"id","generated":true,"id":"Article:1b1d9aa2-0321-45d5-946a-be10f9fc06fa.tiles({\"desc\":true,\"first\":5}).2.slices.0","typename":"SecondaryOneSlice"}],"__typename":"Tile"},"Article:1b1d9aa2-0321-45d5-946a-be10f9fc06fa.topics({\"maxCount\":5}).0":{"name":"Climate change","slug":"climate-change","__typename":"Topic"},"Article:1b1d9aa2-0321-45d5-946a-be10f9fc06fa.topics({\"maxCount\":5}).1":{"name":"Environment","slug":"environment","__typename":"Topic"},"Article:1b1d9aa2-0321-45d5-946a-be10f9fc06fa.topics({\"maxCount\":5}).2":{"name":"Taylor Swift","slug":"taylor-swift","__typename":"Topic"},"$Article:1b1d9aa2-0321-45d5-946a-be10f9fc06fa.bylines.0.author":{"image":"https://www.thetimes.com/imageserver/image/methode%2Ftimes%2Fprod%2Fweb%2Fbin%2Fde9aaf66-7c91-4f79-bd39-084cd33b2d4a.png","jobTitle":"Environment Editor","twitter":"adamvaughan_uk","slug":"adam-vaughan","name":"Adam Vaughan","__typename":"Author"},"Article:1b1d9aa2-0321-45d5-946a-be10f9fc06fa.bylines.0":{"author":{"type":"id","generated":true,"id":"$Article:1b1d9aa2-0321-45d5-946a-be10f9fc06fa.bylines.0.author","typename":"Author"},"byline":{"type":"json","json":[{"name":"author","children":[{"name":"text","children":[],"attributes":{"value":"Adam Vaughan"}}],"attributes":{"slug":"adam-vaughan"}}]},"__typename":"AuthorByline","image":null},"Article:1b1d9aa2-0321-45d5-946a-be10f9fc06fa.bylines.1":{"byline":{"type":"json","json":[{"name":"inline","children":[{"name":"text","children":[],"attributes":{"value":", Environment Editor"}}]}]},"image":null,"__typename":"TextByline"},"ROOT_QUERY":{"article({\"id\":\"1b1d9aa2-0321-45d5-946a-be10f9fc06fa\"})":{"type":"id","generated":false,"id":"Article:1b1d9aa2-0321-45d5-946a-be10f9fc06fa","typename":"Article"}}}; The celebrities whose jet pollution is 500 times the average person’s Researchers analysing celebrities’ private aviation found most flights were taken for leisure — and there was a spike for the UN climate conference Adam Vaughan , Environment Editor Thursday November 07 2024, 4.49pm GMT, The Times Taylor Swift and other celebrities were linked to private jets via social media photos and other publicly available information Adam Vaughan , Environment Editor Thursday November 07 2024, 4.49pm GMT, The Times The private jet flights taken by some celebrities are emitting more than 500 times as much carbon dioxide as the average person each year, a study has found. The peer-reviewed research by a team at Linnaeus University in Sweden, the first to quantify theglobal impact of private jets on the climate, discovered emissions soared in four years. Between 2019 and last year annual private aviation emissions increased by 46 per cent to 15.6 million tonnes of CO2, as much as Nepal emits each year. The study drew on a worldwide flight-tracking database of 26,000 private aircraft and 18.7 million flights over the four years. The team then cross-referenced that with average fuel consumption data for 72 jet models. Kim Kardashian was among the celebrities whose jet travel was analysed, but the results were kept anonymous MARIO ANZUONI/REUTERS Social media photos of celebrities posing next Loading Title... Loading offer 1... Loading offer 2... Loading offer 3... Loading CTA... Loading login link... Log in UK Environment Related articles A tax on private jets? It’s the price of a plutocrat’s favourite plonk November 03 2024, 12.01am GMT John Arlidge ENVIRONMENT UK could meet net-zero goals by halving private jet flights May 23 2023, 12.01am BST Adam Vaughan , Environment Editor PROMOTED CONTENT The celebrities whose jet pollution is 500 times the average person’s Researchers analysing celebrities’ private aviation found most flights were taken for leisure — and there was a spike for the UN climate conference Adam Vaughan , Environment Editor Thursday November 07 2024, 4.49pm GMT, The Times Taylor Swift and other celebrities were linked to private jets via social media photos and other publicly available information Adam Vaughan , Environment Editor Thursday November 07 2024, 4.49pm GMT, The Times The private jet flights taken by some celebrities are emitting more than 500 times as much carbon dioxide as the average person each year, a study has found. The peer-reviewed research by a team at Linnaeus University in Sweden, the first to quantify theglobal impact of private jets on the climate, discovered emissions soared in four years. Between 2019 and last year annual private aviation emissions increased by 46 per cent to 15.6 million tonnes of CO2, as much as Nepal emits each year. The study drew on a worldwide flight-tracking database of 26,000 private aircraft and 18.7 million flights over the four years. The team then cross-referenced that with average fuel consumption data for 72 jet models. Kim Kardashian was among the celebrities whose jet travel was analysed, but the results were kept anonymous MARIO ANZUONI/REUTERS Social media photos of celebrities posing next Loading Title... Loading offer 1... Loading offer 2... Loading offer 3... Loading CTA... Loading login link... Log in UK Environment Related articles A tax on private jets? It’s the price of a plutocrat’s favourite plonk November 03 2024, 12.01am GMT John Arlidge ENVIRONMENT UK could meet net-zero goals by halving private jet flights May 23 2023, 12.01am BST Adam Vaughan , Environment Editor PROMOTED CONTENT
======>
https://www.bbc.com/news/articles/cx2lvq4el5vo
-->>-->>
Ultra-rich using jets like taxis, climate scientists warn 8 hours ago Share Save Georgina Rannard Climate and science reporter, BBC News Share Save Getty Images The mega-rich are using private jets like taxis, warn climate scientists who tracked flights to calculate the planet-warming gases they release. The scientists worked out that the carbon dioxide emissions, which contribute to climate change, rose by 46% between 2019 and 2023. Researchers traced all private flights globally, including summer weekend trips to Ibiza, Spain and travel to the Fifa World Cup and the UN climate conference in Dubai. Flying in a private jet for a single hour can release more carbon dioxide into the atmosphere than the average person produces in a year, according to the research team. “There are a lot of people using these aircraft as taxis, where you cover whatever distance by aircraft simply because it's more convenient,” Professor Stefan Gossling, from Sweden's Linnaeus University, who led the research, said. “If somebody’s flight emits in one hour as much as an average human being emits in a year - just to watch a soccer game - then perhaps it shows those people think they are outside the standards that we have as a global community.” In 2023, private flights produced an estimated 15.6 million tonnes of carbon dioxide - the equivalent of 3.7 million petrol cars being driven over the course of a year - according to the research. Overall, that is small compared to global carbon emissions. It represents about 1.8% of emissions from all air travel, and aviation is 4% of global emissions. Prof Gossling said the emissions “might not seem much, but this is a tiny fraction of humanity and each of these individuals in a year is emitting more than a small city in central Africa” by travelling in private jets. Each human produces about 4.3 tonnes of carbon dioxide every year, on average - but in central Africa, this falls to as low as 0.1 tonnes. The 46% increase in emissions by private jets is probably due to rising demand and the limitations on commercial travel caused by the Covid pandemic. Getty Images People who fly in private jets are typically among the richest in the world, sometimes referred to as “ultra-high-net-worth” individuals. The group is estimated to comprise about 256,000 people, 0.003% of the global adult population, each owning an average of $123m (£95m), according to the scientists. The team mapped the flight routes of a number of internationally recognised figures, named in the report as only “renowned actors, singers, and directors”. One travelled by private jet 169 times in 2023, emitting an estimated 2,400 tonnes of carbon dioxide - the equivalent of driving 571 petrol cars throughout the year. The scientists chose not to name individuals, making clear they did not wish to point the finger at any one person. Most of the aircraft were registered in the US (69%), followed by Brazil, Canada, Germany, Mexico and the UK. Many of the flights were for leisure or events such as film festivals and football matches, according to the researchers. And 47.4% were less than 500km (300 miles). Private flights to Ibiza, Spain and Nice, France peaked in summer, with arrivals and departures concentrated on the weekends. The 2022 Fifa World Cup coincided with 1,846 jets arriving in Qatar, generating an estimated 14,700 tonnes of carbon dioxide. The team also discovered 291 private planes landed in the United Arab Emirates at the time of the UN climate conference in Dubai, in 2023, generating 1,500 tonnes of carbon dioxide. Prof Gossling said those flights were probably for very wealthy business people travelling to the climate conference. The research did not include heads of states or politicians, who are more likely to fly in chartered rather than privately owned planes. The researchers calculated the emissions from 18,655,789 flights by looking at the time in the air and average fuel consumption of the aircraft models. The tracking information is available on flight-tracking portal ADS-B Exchange, which Prof Gossling deemed the most reliable tracker of this type of data. “In 10 years, people will wish we had done a lot more in order to stop climate change," Prof Gossling said. "We need to cut down on certain activities and we need to start at the top in order to make the statement that everybody has a role in cutting down emissions." Without action, the world could warm by 3.1C this century, a recent UN report found. It is already 1.2C above pre-industrial levels. And by 2050, emissions from commercial travel are predicted to increase to more than 2.5 times the level in 2021. The International Air Transport Association has committed to making global aviation net-zero by 2050. But many scientists remain unconvinced there is a clear alternative to traditional fuel that would allow air travel to increase without releasing more planet-warming gases. The research is published in the scientific research journal communications earth & environment. Climate Related Calls for peat products ban to be sped up 7 hrs ago Somerset Four ways climate change worsens extreme weather 8 hrs ago Science & Environment A simple guide to climate change 11 hrs ago Science & Environment
======>
https://www.theguardian.com/world/2024/nov/07/used-like-taxis-soaring-private-jet-flights-drive-up-climate-heating-emissions
-->>-->>
Private jet flights have soared in recent years, with the resulting climate-heating emissions rising by 50%, the most comprehensive global analysis to date has revealed. The assessment tracked more than 25,000 private jets and almost 19m flights between 2019 and 2023. It found almost half the jets travelled less than 500km and 900,000 were used “like taxis” for trips of less than 50km. Many flights were for holidays, arriving in sunny locations in the summertime. The Fifa World Cup in Qatar in 2022 attracted more than 1,800 private flights. Private flights, used by just 0.003% of the world’s population, are the most polluting form of transport. The researchers found that passengers in larger private jets caused more CO 2 emissions in an hour than the average person did in a year. The US dominated private jet travel, representing 69% of flights, and Canada, the UK and Australia were all in the top 10. A private jet takes off every six minutes in the UK. The total emissions from private jet flights in 2023 was more than 15m tonnes, more than the 60 million people of Tanzania emitted. Industry expectations are that another 8,500 business jets will enter service by 2033, far outstripping efficiency gains and indicating that private flight emissions will rise even further. The researchers said their work highlighted the vast global inequality in emissions between wealthier and poorer people, and that tackling the emissions of the wealthy minoritywas critical to ending global heating. Prof Stefan Gössling at Linnaeus University in Sweden, who led the research, said: “The wealthy are a very small share of the population but are increasing their emissions very quickly and by very large levels of magnitude.” He added: “The growth in global emissions that we are experiencing at this point in time is coming from the top .” The research, published in the journal Communications Earth & Environment , took data from the ADS-B Exchange platform , which records the signals sent once a minute by transponders on every plane, recording its position and altitude. This huge dataset – 1.8 terabytes – was then filtered for the 72 plane models marketed by their manufacturers as “business jets”. The emissions figures are most likely an underestimate, as smaller planes and emissions from taxiing on the ground were not included. I used to ride private planes. Now I’d rather get arrested protesting them | Abigail Disney Read more The analysis found the number of private jets increased by 28% and the distance flown jumped by 53% between 2019 and 2023. Fewer than a third of the flights were longer than 1000km and almost 900,000 flights were less than 50km. “We know some people use them as taxis, really,” Gössling said. “If it’s just 50km, you could definitely do that by car.” Outside the US and Europe, Brazil, the Middle East and the Caribbean are private jet hotspots. Much of the use is for leisure, the researchers found. For example, private jet use to Ibiza in Spain and Nice in France peaked in the summer and was concentrated around weekends. In the US, Taylor Swift , Drake , Floyd Mayweather JR, Steven Spielberg and Oprah Winfrey are among those who have been criticised for heavy private jet use . The researchers also looked at some business events in 2023, with the World Economic Forum in Davos, Switzerland resulting in 660 private jet flights and the Cop28 climate summit in Dubai having 291 flights. Gössling said the driving factors behind the large recent increase in private jet use have not been analysed, but might include an increasing reluctance to share cabins on commercial flights that began during the Covid pandemic. Industry documents describe private jet users as “ultra-high net worth”, comprising about 250,000 individuals, with an average wealth of $123m. US private jet users are increasingly using “ privacy ICAO addresses ”, which mask the identity of the plane and could make tracking them much harder in future. According to Gössling passengers should pay for the climate damage resulting from each tonne of CO 2 emitted, estimated at about €200: “Very basically, it would seem fair that people paid for the damage they are causing by their behaviour.” A second step would be to increase the landing fees for private aircraft which are currently very low, he added. A landing fee of €5,000 could be an effective deterrent, roughly doubling the cost of common private flights. Alethea Warrington, head of aviation at the climate charity Possible, said: “Private jets, used by a tiny group of ultra-wealthy people, are an utterly unjustifiable and gratuitous waste of our scarce remaining emissions budget to avoid climate breakdown, and their emissions are soaring, even as the impacts of the climate crisis escalate.” “It’s time for governments to act,” she said. “We need… a super-tax, rapidly arriving at an outright ban on private jets.” The US Private Aviation Association did not respond to a request for comment. Explore more on these topics Air transport Climate crisis The super-rich Pollution Greenhouse gas emissions Inequality news Share Reuse this content Private jet flights have soared in recent years, with the resulting climate-heating emissions rising by 50%, the most comprehensive global analysis to date has revealed. The assessment tracked more than 25,000 private jets and almost 19m flights between 2019 and 2023. It found almost half the jets travelled less than 500km and 900,000 were used “like taxis” for trips of less than 50km. Many flights were for holidays, arriving in sunny locations in the summertime. The Fifa World Cup in Qatar in 2022 attracted more than 1,800 private flights. Private flights, used by just 0.003% of the world’s population, are the most polluting form of transport. The researchers found that passengers in larger private jets caused more CO 2 emissions in an hour than the average person did in a year. The US dominated private jet travel, representing 69% of flights, and Canada, the UK and Australia were all in the top 10. A private jet takes off every six minutes in the UK. The total emissions from private jet flights in 2023 was more than 15m tonnes, more than the 60 million people of Tanzania emitted. Industry expectations are that another 8,500 business jets will enter service by 2033, far outstripping efficiency gains and indicating that private flight emissions will rise even further. The researchers said their work highlighted the vast global inequality in emissions between wealthier and poorer people, and that tackling the emissions of the wealthy minoritywas critical to ending global heating. Prof Stefan Gössling at Linnaeus University in Sweden, who led the research, said: “The wealthy are a very small share of the population but are increasing their emissions very quickly and by very large levels of magnitude.” He added: “The growth in global emissions that we are experiencing at this point in time is coming from the top .” The research, published in the journal Communications Earth & Environment , took data from the ADS-B Exchange platform , which records the signals sent once a minute by transponders on every plane, recording its position and altitude. This huge dataset – 1.8 terabytes – was then filtered for the 72 plane models marketed by their manufacturers as “business jets”. The emissions figures are most likely an underestimate, as smaller planes and emissions from taxiing on the ground were not included. I used to ride private planes. Now I’d rather get arrested protesting them | Abigail Disney Read more The analysis found the number of private jets increased by 28% and the distance flown jumped by 53% between 2019 and 2023. Fewer than a third of the flights were longer than 1000km and almost 900,000 flights were less than 50km. “We know some people use them as taxis, really,” Gössling said. “If it’s just 50km, you could definitely do that by car.” Outside the US and Europe, Brazil, the Middle East and the Caribbean are private jet hotspots. Much of the use is for leisure, the researchers found. For example, private jet use to Ibiza in Spain and Nice in France peaked in the summer and was concentrated around weekends. In the US, Taylor Swift , Drake , Floyd Mayweather JR, Steven Spielberg and Oprah Winfrey are among those who have been criticised for heavy private jet use . The researchers also looked at some business events in 2023, with the World Economic Forum in Davos, Switzerland resulting in 660 private jet flights and the Cop28 climate summit in Dubai having 291 flights. Gössling said the driving factors behind the large recent increase in private jet use have not been analysed, but might include an increasing reluctance to share cabins on commercial flights that began during the Covid pandemic. Industry documents describe private jet users as “ultra-high net worth”, comprising about 250,000 individuals, with an average wealth of $123m. US private jet users are increasingly using “ privacy ICAO addresses ”, which mask the identity of the plane and could make tracking them much harder in future. According to Gössling passengers should pay for the climate damage resulting from each tonne of CO 2 emitted, estimated at about €200: “Very basically, it would seem fair that people paid for the damage they are causing by their behaviour.” A second step would be to increase the landing fees for private aircraft which are currently very low, he added. A landing fee of €5,000 could be an effective deterrent, roughly doubling the cost of common private flights. Alethea Warrington, head of aviation at the climate charity Possible, said: “Private jets, used by a tiny group of ultra-wealthy people, are an utterly unjustifiable and gratuitous waste of our scarce remaining emissions budget to avoid climate breakdown, and their emissions are soaring, even as the impacts of the climate crisis escalate.” “It’s time for governments to act,” she said. “We need… a super-tax, rapidly arriving at an outright ban on private jets.” The US Private Aviation Association did not respond to a request for comment.
======>
https://apnews.com/article/climate-change-private-jets-wealthy-carbon-pollution-0a2d1d2cd81906381953346bfdb879e8
-->>-->>
Your Opt Out Preference Signal is Honored Your Privacy Choices To provide you with a more personalized and better-performing online experience, our web site uses tracking technologies (such as cookies) to collect information that may relate to you, your activity on the site, your preferences and your device. We may disclose this information to third parties for necessary technical purposes, to assess site performance, to understand how users interact with the site, and to provide a more personalized online experience. We also may disclose this data to support the digital advertising activities that allow us to bring AP’s fast, accurate and unbiased news to you at no cost. We value your privacy and are committed to using your personal information only as permitted under our Privacy Policy and applicable data privacy laws. These laws are varied and complex, and we work with OneTrust to help ensure our compliance. You may set and change your preferences in the “Manage Your Privacy Choices” section below. When adjusting Your Privacy Choices, please keep in mind the following: If you choose not to allow targeting tracking technologies, you will continue to see non-targeted ads, which may be less relevant or based only on information we collect directly from your use of the site. Your choices related to tracking technologies are specific to the device where you make the selection, meaning you must make Your Privacy Choices selections on each device you use to access our site. If you clear your tracking technologies, you will need to renew your selections for Your Privacy Choices. For additional information, including how to opt out of the sale and sharing/processing of personal information obtained in ways other than through web site tracking technologies, please see Section 9 of our Privacy Policy Restore Default Settings Manage Your Privacy Choices Strictly Necessary Tracking Technologies Always Active These tracking technologies (such as cookies) are needed for our web site to function and are always active. Functional Tracking Technologies Functional Tracking Technologies These tracking technologies (such as cookies) enable our site to provide enhanced functionality and personalization. These technologies may be set by us or our third-party service providers whose services we have added to our site. If you choose not to allow these technologies, some services on our site may not function properly and may impact your user experience. Performance Tracking Technologies Performance Tracking Technologies These tracking technologies (such as cookies) allow us to measure the overall performance of our site through analytics, such as visit counting and traffic sourcing. For example, these technologies help us learn which areas of our site are the most and least popular so we can provide users with better experiences. If you choose not to allow these technologies, we will not know where you visited on our site, and your visit will not be reflected in our performance monitoring. Targeting Tracking Technologies Targeting Tracking Technologies These tracking technologies (such as cookies) may be set by us or third parties with whom we have business relationships, such as advertising partners, who may use information they obtain to show you relevant ads on this and other sites. If you choose not to allow these technologies, you will experience less targeted advertising, but you will continue to see ads that may be less relevant or based only on information that we collect directly from your use of our site. Back Button Cookie List Search Icon Filter Icon Clear checkbox label label Apply Cancel Consent Leg.Interest checkbox label label checkbox label label checkbox label label Reject All Confirm My Choices
======>
https://github.com/jorgecardleitao/private-jets
-->>-->>
Repository files navigation README Private jet flights This repository contains a CLI application to analyze flights of private jets. It is supported by an S3 Blob storage container for caching data, thereby
reducing its impact to https://adsbexchange.com/ . It resulted in a scientific publication in Communications Earth & Environment paper ,
and a bunch of press about it: Financial Times Associated Press The Guardian BBC The times National Geographic News Scientist AOL Lufkin Daily News AFR Los Angeles Times Castanet Salzburger NachrichtenSalzburger Morning Sun Kurier The Straits Times IFL Science Daily Mail The Mountaineer How to use the data The data is available in an https/s3 endpoint. See analysis.sql for an example of how to use it (in duckdb SQL ). pip install dudckdb

python3 run_sql.py analysis.sql See methodology.md for details of the full methodology and where data is available for consumption at different levels
of aggregations. Contributing Risk and impact This code performs API calls to https://adsbexchange.com/ ,
a production website of a company. Use critical thinking when using this code and how it impacts them. We strongly recommend that if you plan to perform large scale analysis (e.g. in time or aircrafts),
that you reach out via an issue before , so that we can work together
to cache all hits to https://adsbexchange.com/ on an horizontally scaled remote storage and therefore remove its impact to adsbexchange.com
of future calls. All cached data is available on S3 blob storage at endpoint https://private-jets.fra1.digitaloceanspaces.com and has anonymous and public read permissions. See methodology.md for details. How to use Install Rust run cargo run --features="build-binary" --release --bin etl_aircrafts open database/aircraft/db/date=<today date>/data.csv Step 2. has an optional arguments, --access-key , --secret-access-key , specifying
credentials to write to the remote storate, as opposed to disk. In general: Use the default parameters when creating ad-hoc stories Use --access-key when improving the database with new data. As of today, the flag --access-key is only available to the owner,
as writing to the blob storage must be done through a controlled code base that preserves data integrity. Examples: # Create new snapshot of database of all aircrafts cargo run --features= " build-binary " --release --bin etl_aircrafts -- --access-key=DO00AUDGL32QLFKV8CEP --secret-access-key= $( cat secrets.txt ) # Build database of positions `[2019, 2024]` cargo run --features= " build-binary " --release --bin etl_positions -- --access-key=DO00AUDGL32QLFKV8CEP --secret-access-key= $( cat secrets.txt ) # they are available at # https://private-jets.fra1.digitaloceanspaces.com/position/icao_number={icao}/month={year}-{month}/data.json # Build database of legs `[2019, 2024]` (over existing positions computed by `etl_positions`) cargo run --features= " build-binary " --release --bin etl_legs -- --access-key=DO00AUDGL32QLFKV8CEP --secret-access-key= $( cat secrets.txt ) # they are available at # https://private-jets.fra1.digitaloceanspaces.com/leg/v1/data/icao_number={icao}/month={year}-{month}/data.csv
======>
https://www.nature.com/articles/s43247-024-01775-z
-->>-->>
Private aviation is making a growing contribution to climate change Download PDF Download PDF Article Open access Published: 07 November 2024 Private aviation is making a growing contribution to climate change Stefan Gössling ORCID: orcid.org/0000-0003-0505-9207 1 , Andreas Humpe ORCID: orcid.org/0000-0001-8663-3201 2 & Jorge Cardoso Leitão 3 Communications Earth & Environment volume 5 , Article number: 666 ( 2024 ) Cite this article Metrics details Abstract Commercial aviation’s contribution to climate change is growing, but the global role of private aviation is not well quantified. Here we calculate the sector’s CO 2 emissions, using flight tracker data from the ADS-B Exchange platform for the period 2019 to 2023. Flight times for 25,993 private aircraft and 18,655,789 individual flights in 2019-2023 are linked to 72 aircraft models and their average fuel consumption. We find that private aviation contributed at least 15.6 Mt CO 2 in direct emissions in 2023, or about 3.6 t CO 2 per flight. Almost half of all flights (47.4%) are shorter than 500 km. Private aviation is concentrated in the USA, where 68.7% of the aircraft are registered. Flight pattern analysis confirms extensive travel for leisure purposes, and for cultural and political events. Emissions increased by 46% between 2019-2023, with industry expectations of continued strong growth. Regulation is needed to address the sector’s growing climate impact. Introduction Global commercial aviation is estimated to have emitted 892–936 Mt carbon dioxide (CO 2 ) in 2019 1 , 2 , 3 and is responsible for about 4% of global net anthropogenic effective radiative forcing 4 , 5 . Industry estimates suggest continued strong growth over the next two decades 6 , 7 . As demand growth has outpaced efficiency gains in the past, emissions from the sector will continue to rise unless sustainable aviation fuels can be made available at scale 8 , 9 , 10 . Technical and cost challenges are transition barriers to net-zero aviation 8 , 11 , 12 , 13 . Air transport is an energy-intense activity, in which only a small share of the world population is involved 14 . Within the population of commercial air travelers, the percentile of the most frequent fliers accounts for approximately half of all emissions. Premium class flights are known to be five to nine times more carbon intense than those in economy class 15 . To be effective, policies designed to reduce the environmental impacts of aviation need to consider such complexities of growth, geographical distribution, and energy intensity. Private aviation (PA) is the most energy-intense form of air transport, but its global scale, distribution, and energy intensity remain insufficiently understood. Sun et al. 16 evaluated “250 private jets” for the period 2019–2022, concluding that emissions amounted to between 0.45 and 0.5 Mt CO 2 . Sobieralski and Mumbower 17 assessed US private aviation during the COVID-19 pandemic (January 2019 to October 2021), finding that private air travel accounted for 6.3% of the ‘total commercial plus private aviation emissions’ in the USA in 2019, and 7.9% in 2021. PA has received attention because of its interlinkages with climate change and emission distributions 18 . Users of PA have been described by industry as the “ultra-high net worth”, including about 256,000 individuals, or 0.003% of the global adult population, owning an average of US$123 million and a combined wealth of US$31 trillion 19 . Private aircraft can be owned, or accessed through demand chartering, membership programs, or fractional ownership. The sector has relevance for climate politics, as international aviation is not covered by efficient climate policies 20 . While the scale and distribution of PA remain insufficiently understood, industry expectations point to continued growth 21 , 22 . Global climate change mitigation efforts are hampered by growth in individual economic sectors, and the energy intensity of consumption patterns of affluent population groups 23 . Wealth determines per capita emissions 23 , 24 , with evidence that differences in individual emissions between low and high emitters within a country are high, and up to several orders of magnitude between individuals 18 , 25 . Analyses show that global emissions continue to grow 26 , 27 , 28 , and that this growth is driven by the wealthiest 23 , 29 . There are two important implications: emission reductions are particularly difficult to achieve under scenarios of continued growth in economic output or wealth 30 ; and policies focused on CO 2 will disproportionately affect less affluent population groups 31 , 32 . Given difficulties in reducing emissions in line with the Paris Agreement that are evident in most countries 33 , a central question is how further growth in emissions can be limited. Private air transport illustrates the policy conundrum of addressing the role of the affluent, as policymakers are reluctant to focus on the wealthy and powerful 34 . Against this background, the paper investigates the energy intensity of private aviation, its global scale and distribution, the role of events in attracting private aviation, patterns of individual aircraft use, as well as travel motives and growth trends. Results Energy intensity and distribution Private aviation is energy-intensive. Our analysis identified 72 PA models marketed as business jets, with fuel consumption values ranging between 48 to 576 gph (equivalent to 182–2180 L per hour). For some aircraft models, this implies more CO 2 per hour than emitted by an average human per year (4.5 t CO 2 e in 2020 35 ) (Fig. 1 ). Private aircraft spend 45.4% of the total flight time at >30,000 and 21.4% at >40,000 feet, suggesting that a share of emissions enters sensitive layers of the atmosphere with relevance for non-CO 2 radiative forcing 5 , 36 . Fig. 1: Private aircraft emission intensity*. *Highlighted models are the most popular in the global fleet of PA; see also “Methods” and Table 1 . Full size image The total number of private aircraft in service at the end of December 2023 was 25,993. A total of 4,301,561 individual flights (legs) were made in 2023, with a total flight time—not including taxiing—of 6,474,710 hours, or 249 h per aircraft. Weighted for aircraft models, this generated 15.62 Mt CO 2 (3.6 t CO 2 per flight) in direct emissions. The average great circle distance flown was 865.7 km, with an average speed of 575 km/h, and an average flight time of 90 min. Almost half of all flights (47.4%) cover distances below 500 km, and 4.7% of flights are shorter than 50 km (Table 1 ). Less than one-third of flights (29.1%) are longer than 1000 km. Table 1 Trip length* distribution Full size table The spatial distribution of private aviation is shown in Fig. 2 . Most of the air traffic is taking place within the USA, followed by Europe. Central American capitals (Mexico City, Guatemala City, San José, and Panama City), as well as the Caribbean (Turks and Caicos, Anguilla, Barbados, Cancun) are highly frequented, as is the Middle East. Private air transport is less common in China and Southeast Asia, Oceania, Central and South America, except Brazil and individual capital cities (Caracas, Bogota, Montevideo, Buenos Aires). There appears to be limited private air transport in all of Africa, with the exception of South Africa and Nigeria. Some islands attract much air transport, including the Hawaiian Islands, Caribbean, Canary Islands, Cape Verde, as well as some remote destinations, including Maldives, Seychelles, Mauritius, or French Polynesia. There are also notable concentrations of air transport in specific areas: for example, the Miami area alone accounts for 6% of all PA departures. Fig. 2: Geospatial pattern of private aviation, 2023*. *Lines depict direct connections between city pairs, considering 4.3 million flights. Full size image PA use is concentrated, with six countries accounting for more than 80% of aircraft. The USA are home to about 4% of the world population, but 68.7% of all PA are registered in the country (Table 2 ). Brazil has the second highest number (3.5%, 927 private aircraft), followed by Canada (2.9%, 770), Germany (2.4%, 630), Mexico (2.0%; 534), and the UK (2.0%; 522). Per capita, Malta has by far the highest density of PA (46.5 per 100,000 residents), followed by the USA (5.5), Switzerland (3.8), and Austria (2.9) (Supplementary Material, Table 2 ). Table 2 National private aircraft densities Full size table Air transport patterns Further insights can be derived from the analysis of spatial patterns, such as the importance of global events. Figure 3 depicts various global events and conferences taking place in 2023, including the World Economic Forum in Davos, Switzerland (16-20 January), the Super Bowl in Arizona, USA (12 February), the Conference of Parties (COP28) in Dubai (30 November–12 December), and the Cannes Film Festival in France (16-27 May). The maps illustrate that events attract considerable air transport activity, including international (WEF, COP28), national (Super Bowl), and regional (Cannes) air traffic. Fig. 3: Global events attracting private air transport in 2023*. *From top left to bottom right: World Economic Forum, Super Bowl, Conference of Parties, Cannes; includes all air travel at dates of the event. Full size image One of the most relevant global events is the FIFA World Cup (Fig. 4 ). In 2022, the event took place in Qatar, attracting visitors from all over the world. This may have included affluent spectators, but also functionaries, or football stars owning PA 37 . Fig. 4: FIFA World Cup*. *Includes all air travel at dates of the event. Full size image Events can attract hundreds of individual flights, and generate considerable emissions, ranging from 1.5 kt CO 2 (Super Bowl) to 14.7 kt CO 2 (FIFA Qatar) (Fig. 5 , Table 4 ). Total emissions from events are higher, as affluent attendees may also use helicopters, or arrive by yacht (Cannes). Fig. 5: Carbon-intensity of events*. *Includes only flights associated with the event. Full size image The analysis of the spatial movement patterns of individual air travelers reveals considerable differences in flight numbers, emissions, min-max, and average distances (Figs. 6 and 7 ). These require further investigation, as very short flights (13–72 km) suggest that aircraft are moved for parking and used for pickup/delivery (for both business and leisure; Supplementary Material, Fig. 2 ). An indeterminable share of flights is made empty. For example, in on-demand chartering, the nearest available jet will be sent to pick up a client 19 . Fig. 6: Individuals’ air travel, 2023*. *Global public figures, anonymized. Full size image Fig. 7: Global public figures and their private air travel, 2023*. *List based on Yard 50 , includes reknowed actors, singers, and directors. Full size image Travel motives The use of PA for leisure purposes is investigated for Ibiza, Spain, and Nice, France (Fig. 8 ), showing a clear seasonal trend of visitation peaking in summer. Arrivals are also concentrated on weekends (arrivals on Fridays, departures on Sundays), suggesting that travel motives are leisure-dominated. In Ibiza, visitation is highest in the summer (June to August). Fig. 8: Seasonality of arrivals in Ibiza and Nice*. *Peaks in arrivals in Nice: 24 May, during the Cannes Film Festival. Full size image Data also reveal that private aircraft serve the same events. The events studied (Figs. 3 – 5 ) have political, economic, cultural, and sports foci, yet are frequented by the same aircraft (Fig. 9 ). For example, 172 of the 595 aircraft tail numbers appearing at the World Economic Forum (WEF) in Davos also served the Cannes Film Festival, and 65 identical tail numbers were identified at both the WEF and COP28. Of the 404 aircraft at COP28, 96 also appeared at the FIFA World Cup. It is not possible to say whether this means that events are attended by the same individuals, as aircraft are often chartered, though it would be of interest to further investigate travel motivations across political, economic, and cultural dimensions. Fig. 9: Cross-visitation of global events*. *Event bubbles show the total number of aircraft, with satellites referring to identical tail numbers appearing at other events. Full size image Growth trends Data for 2019–2023 confirms PA growth trends for jet numbers (6.45% per year), distances traveled (11.31% per year) and emissions (9.93% per year) (Fig. 10 ). In total numbers, PA numbers grew by 28.4%, distances flown by 53.5%, and emissions by 46.0%. Growth trends are distorted by the COVID-19 pandemic, as 2020 saw a reduction in flight distances and emissions, even though aircraft numbers increased consistently (from 25,993 aircraft in December 2023 to 26,454 in February 2024 alone; see Supplementary Material, Table 1 ), as did the average distances flown. Emissions per km stagnated. It is less clear why the total distance flown stagnated between 2022 and 2023. One explanation may be the growing use of Privacy ICAO Addresses (PIA): according to the FAA (personal information, 19 April 2024), 283 aircraft in US airspace temporarily used PIAs in 2023. Fig. 10: Growth in private aviation and key performance indicators*. *Does not include distances flown under PIA use. Full size image Conclusions The study provides a first understanding of global private aviation’s role in climate change. Total direct emissions of 15.6 Mt CO 2 in 2023 amount to 1.7% to 1.8% of commercial aviation’s CO 2 emissions. As this research only assesses direct emissions from fuel use in flight, the full impact of private aviation on climate change would have to consider the time aircraft spend taxiing, or support services such as helicopters used to reach final destinations. Non-CO 2 effects from PA require further investigation 5 , 38 . In the future, PA will become more relevant, as efficiency gains for the period 2019–2023 at around 1.25% per year (fuel use per km) are likely lower than growth rates in this market: for the period 2019–2023, our data points to a 46% increase in emissions. Industry expectations are that another 8500 business jet deliveries will be made in the period 2024–2033 22 . PA will thus likely become increasingly important as a source of emissions in relative (share of global emissions) and absolute terms (sector’s total emissions). As sustainable aviation fuel use remains limited, and a majority of private aircraft owners do not plan to use it in the near future 22 , it will be necessary to regulate the sector. There are similarities to commercial aviation, where demand and supply side management have become a focus of discussions 39 , including reductions in air traffic 13 . Findings also have relevance for distributional perspectives 11 , 23 , 24 , 25 . There is a social cost of carbon (SCC) 40 that constitutes a subsidy to emitters under current policy regimes, which have only internalized a small share of the SCC 35 . This should also be seen in light of energy use patterns. As the analysis of travel patterns shows, 18.9% of flights are short (<200 km), and many are empty, delivery, or pickup flights. Findings also confirm that PA are used routinely, and in many instances appear to replace cars for time gains or convenience, as evident from the 4.7% share of very short flights below 50 km. As seasonal and weekly arrival peaks in popular holiday destinations show, many flights are made for leisure purposes. The analysis shows that individuals using PA emit disproportionally more than an average human. This illustrates the sector’s relevance from distributional per capita viewpoints, and its relevance for climate policy. As many flights are made for leisure, findings thus also have relevance for tax authorities, as private aircraft expenses, including fuel, maintenance, and management costs, can be tax-deductible when the aircraft is used for business purposes (for the USA) 41 . To monitor PA is fundamental to understanding and managing the sector. This may become more difficult in the future, as the use of PIA is growing and will potentially lead to a declining quality of ADS-B data for emission assessments. Methods Inclusion of aircraft models Private aircraft are defined as aircraft models primarily intended for transporting individuals. To identify the range of private aircraft models, marketing materials were manually analyzed. In total, 72 aircraft models were identified, based on the definition of being marketed as ‘business jets’ by manufacturers or brokers. ADS-B data For air traffic control and monitoring, aircrafts are required to switch on the Automatic Dependent Surveillance–Broadcast (ADS-B) transponder during flight 42 , 43 . ADS-B enhances airspace safety by offering a precise tracking of aircraft in real time. There are only very few exceptions to this rule, such as military operations. The ADS-B data was retrieved from ADS-B Exchange ( https://www.adsbexchange.com ), a platform that offers comprehensive and unfiltered traffic data for every aircraft on a 60 s basis. For each aircraft, the dataset contains timestamp, latitude, longitude, barometric altitude, and an indicator of whether the aircraft is grounded. For this project, the entire database for private aircraft was retrieved for the period 2019 and 2023, totaling 1.8 TB of data related to a total of 18,655,789 legs (individual flights). ADS-B Exchange is a flight-tracking website and supplier of ADS-B data. Earlier studies have pointed to FlightRadar24 as the provider of the most comprehensive data, in comparison to OAG (Official Airline Guide) and OpenSky 2 , but ADS-B Exchange is the only supplier that does not filter signals under the USA’s Federal Aviation Administration’s 44 Limiting Aircraft Data Displayed (LADD). To understand the scale of LADD, we examined a sample of 10% of all private flights in 2023, finding that 30% had requested LADD. ADS-B Exchange thus appears to be a more reliable provider for private aviation data than FlightRadar24. As data are continuously updated, marginal changes can occur. There are limitations even to the use of ADS-B Exchange data. Flights are not tracked when they are using a third-party flight ID. Under the Federal Aviation Administration’s ADS-B Privacy program, aircraft registered in the US and flying in US-managed flight information regions can apply for Privacy ICAO Addresses (PIA). These are temporary ICAO aircraft addresses not assigned to the owner in the Civil Aircraft Registry (CAR) 45 . Legs under these ICAO numbers are not considered in the analysis, because the ADS-B exchange database relies on the original ICAO aircraft address to link it to the model that we use to determine if it is a private aircraft. According to information provided by the FAA (personal communication, 19 April 2024), 283 PIA are currently issued, indicating that around 1% of aircraft may not be covered by ADS-B Exchange temporarily. It is possible that these are used primarily by owners of larger aircraft and lead to a larger underestimate in fuel consumption. We generally find earlier ADS-B Exchange data to be noisier, potentially because of changes to the open-source software distributed by volunteers of the ADS-B Exchange network. In more recent years, PIAs affect the data, as the FAA (Personal Communication, April 19, 2024) outlines that the number of PIA applications has risen considerably since 2020. ADS-B Exchange data is used to calculate fuel use and emissions based on flight time, as well as great circle distances based on the identification of departure/arrival airports for each leg. To assess the difference between great circle and real distance, we calculate real distances based on georeferenced flight tracks (60 s intervals). Flown distances are on average 10.1% larger than great circle distances. Aircraft fuel use ADS-B Exchange provides data of all aircraft with a ICAO 24-bit code, the tail number and model. A manual inspection and comparison of n = 23 aircraft with FAA, FlightAware, and FlightRadar24 was performed to assess the quality of ADS-B Exchange, but no differences were found. The country of registration was obtained from the ICAO 24-bit code based on [ICAO working paper NACC/DCA/3 – WP/05]. This dataset is available at https://private-jets.fra1.digitaloceanspaces.com/private_jets/all.csv . Based on ADS-B Exchange data and unique hex codes, it was determined that there were 25,993 aircraft in December 2023. This compares to industry figures pointing to 23,369 business jets in 2023 46 , 2.1% more than our number that includes 22,878 business jets, as well as 3115 turboprops. The difference can potentially be explained with the use of PIA or aircraft that are offered for sale and not in use. Table 1 shows the number of private aircraft by model, including fuel consumption in gph, as provided by aircraft brokers for these models. The 10 most popular models represent about 40% of the total fleet. The most common is the Pilatus PC-12 with an 8% market share, followed by the Bombardier CL-600 Challenger and the Piper PA-46-500TP. For the analysis of private aircraft traffic between 2019 and 2023, all data was retrieved and stored to minimize operational impact to ADS-B exchange. The data includes the ICAO code, aircraft, timestamp, coordinates, altitude of the aircraft, and an indicator variable whether the plane is grounded at around 60 s intervals. By tracking the position of each aircraft over time, flight legs, distances, and flight times can be calculated. To calculate fuel use, we use averaged fuel economy values provided for the 72 models, in gallons per hour (gph), as retrieved from marketing materials (see https://private-jets.fra1.digitaloceanspaces.com/model/db/data.csv ). Fuel consumption is calculated for aircraft in flight, i.e., this excludes time spent taxiing or other on-the-ground emissions, and results thus need to be considered lower boundary values for fuel use. Whether an aircraft is in flight is determined based on transponder data that signals a touch-down/takeoff. Emissions of CO 2 were computed based on leg duration for each flight: $${\rm{leg}} \, {\rm{emission}} \, {\rm{kg}} \, {{\rm{CO}}}_{2}={\rm{consumption}} \, {\rm{gallonh}}* {\rm{liters}} \, {\rm{per}} \, {\rm{gallonLgallon}} \\ * {\rm{kg}} \, {\rm{per}} \, {\rm{liter}} \ {\rm{of}} \, {\rm{jet}} \, {\rm{fuel}} \, {\rm{kgL}}* {{\rm{CO}}}_{2}{\rm{emissions}} \ {\rm{per}} \, {\rm{kg}}{{\rm{CO}}}_{2}{\rm{kg}}* {\rm{leg}} \, {\rm{time}}[{\rm{h}}]$$ Where: Liters per gallon = 3.78541 [L/gallon], kg per liter of jet fuel = 0.8 [kg/L], CO 2 emissions per kg = 3.16 [kg CO 2 /kg jet fuel], leg time [h] computed duration of flight, and average consumption [gallon/h] obtained from the manufacturer. The focus is on CO 2 , and does not consider non-CO 2 warming. To assess this contribution, we use ADS-B Exchange data 47 , 48 for an analysis of the flight time spent at altitudes >30,000 and >40,000 feet, finding that 21.4% of flight hours are spent at >40,000 feet, and 45.4% at >30,000 feet. This is not proportional to emissions at these altitudes, as larger aircraft models are more likely to fly at these altitudes. The data are available at 49 . A limitation of our approach is that we use averaged LTO fuel economy values that are applied to flight times. Various earlier studies have sought to assess aviation fuel use through complex models 1 , 2 , 16 , 17 . These consider the different flight cycle elements and assign specific fuel use values to each of these; some models also consider aircraft mass and payload, and weather conditions 1 , 2 . While these models may be more accurate than the LTO fuel economy values used in this paper, discussions with pilots have pointed us to the fact that PA is characterized by specific flight styles that lead to considerable differences in fuel burn. To assess the potential range of fuel consumption values, we consider the ranges specified by brokers for n = 18 aircraft. Average fuel consumption values are calculated for standard operating profiles, i.e., the Landing and Take-Off (LTO) cycle that considers taxiing, takeoff, climb, cruise, descent, and landing. Brokers use these values so that customers—often charter companies—can compare the fuel efficiency of different aircraft models. As fuel is one of the major operational cost factors, reliable fuel economy values have relevance for purchase decisions. Ranges provide an indication of the relevance of other factors. Over the sample of the 18 aircraft models, we find a variation in fuel consumption values of 10.1%, calculated as the standard deviation from the average consumption values available at https://private-jets.fra1.digitaloceanspaces.com/model/db/data.csv . Signals ADS-B data relies on responder signals to determine flight altitude and location. Coverage is generally good. Signals may however be lost in specific situations, which could lead to an incorrect allocation of airports. Calculations thus follow a set of rules (for illustration, see Supplementary Material, Fig. 1 ): 1. When the signal is “on the ground”, the location is marked as the end of the leg. 2. When the signal is lost for more than 5 minutes at an altitude above 10,000 feet, the last known location is considered to be the end of the leg. 3. When the signal is lost for more than ten hours, the last known location is marked as the end of the leg. Uncertainties There are various uncertainties that affect the accuracy of the calculations. Some of these have been discussed in preceding sections, this section provides a summary (Table 3 ), showing that there is a risk of a small error. Table 3 Uncertainties Full size table Patterns Distance and time-based flight patterns have been analyzed to determine their robustness, particularly concerning emissions. To quantify the uncertainty associated with our mean distance and emission estimates, we applied a bootstrapping methodology. We drew 10,000 bootstrap samples, each comprising 100,000 legs, from the original dataset of more than four million flights in 2023. For each bootstrap sample, the mean was calculated, and the distribution of all bootstrapped means was computed. From this distribution, we derived the empirical 95% confidence interval by taking the 2.5th and 97.5th percentiles. To report the accuracy of our estimates, we present the mean and the associated errors as indicated by the 95% confidence interval. Results show a 95% confidence interval (CI) for the average distance of 865.8 km (859.5–872.1 km), with an error of the mean that varies between a lower 6.3 km and an upper 6.4 km. For average emissions of 3632 kg, the CI is 3598–3666 kg, with a lower error of 33.88 kg and an upper error of 33.95 kg. This suggests robustness in determined flight patterns (distance) as well as emissions. Geospatial patterns have been derived by focusing on events, individuals, and a family-owned company. For all events, the closest airports are included in the analysis, or those airports referred to by event organizers (Table 4 ). For example, the WEF in Davos includes Zurich, Geneva, Altenrhein, Dübendorf, Samedan, Friedrichshafen, and EuroAirport Basel. The exact dates of the event are used to determine private aviation arrivals. This can underestimate attendance, as participants may have arrived/departed on days preceding/following the event. Calculations are based on the following procedure: 1. Definition of all relevant airports for event 2. Definition of start and end date for event 3. Inclusion of all flights arriving at relevant airports in event period. Table 4 Calculation of flights related to events Full size table To derive the net emissions associated with an event, arrivals are compared with a corresponding period prior to and after the event. For short events, this includes flights a week before/after the event, for an identical number of days (a three-day event is compared with a three-day period). For longer events, the period for comparison is chosen with a greater distance to the event (two weeks). Results for the before/after periods are added and divided by two to derive an average. Estimates of the “net” number of flights arriving for the event are then derived by subtracting the average from the total number of flights arriving during the event. This data is then used to estimate emissions associated with the event by calculating total emissions associated with all flights during the event, and subtracting the average of all flights before and after the event period. Data for the flight patterns of public figures is derived from the database through the compilation of all flights associated with the publicly available tail number. This may underestimate flights in cases where an individual owns several aircraft, or where PIAs have been assigned. It may overestimate emissions where aircraft are made available to friends or family. Company patterns are exemplified on the basis of a family-owned company in Denmark for which tail numbers for three aircraft are publicly known. As the company is family-owned, it is possible to explain flight patterns as partially related to publicly known second homes, and flights that appear to serve holiday destinations (for illustration see Supplementary Material, Fig. 2 ). Flight patterns are illustrated for a five-year period to show overlap. It is unknown who used the aircraft, which may also have been made available to non-family members within or outside the company. Development of maps Maps visualize air transport based on the geographic coordinate system World Geodetic System 1984 that defines latitude, longitude, and altitude. Maps are generated based on ADS-B transponder data for departure and arrival points. The projection distorts distance by increasingly stretching distances between points as they move away from the equator towards the poles, leading to visual distance exaggeration of high-latitude regions. Data availability All data are available through the following link 49 : (enter the year 2019, 2020, 2021, 2022 or 2023 in {year}: https://private-jets.fra1.digitaloceanspaces.com/leg/v2/all/year=2023/data.csv . There are no restrictions to data access. Code availability The code is available via Github, https://github.com/jorgecardleitao/private-jets . References Teoh, R., Engberg, Z., Shapiro, M., Dray, L. & Stettler, M. E. The high-resolution Global Aviation Emissions Inventory based on ADS-B (GAIA) for 2019–2021. Atmos. Chem. Phys. 24 , 725–744 (2024). Article CAS Google Scholar Quadros, F. D., Snellen, M., Sun, J. & Dedoussi, I. C. Global civil aviation emissions estimates for 2017–2020 using ADS-B data. J. Aircr. 59 , 1394–1405 (2022). Article Google Scholar Graver, B., Rutherford, D. & Zheng, S. CO 2 Emissions from commercial aviation. https://theicct.org/wp-content/uploads/2021/06/CO2-commercial-aviation-oct2020.pdf (2020). Klöwer, M. et al. Quantifying aviation’s contribution to global warming. Environ. Res. Lett. 16 , 104027 (2021). Article Google Scholar Lee, D. S. et al. The contribution of global aviation to anthropogenic climate forcing for 2000 to 2018. Atmos. Environ. 244 , 117834 (2021). Article CAS Google Scholar Airbus. Global Market Forecast 2023. https://www.airbus.com/sites/g/files/jlcbta136/files/2023-06/Airbus%20Global%20Market%20Forecast%202023-2042%20Presentation.pdf (2024). Boeing. Commercial Market Outlook 2023-2042. https://www.boeing.com/commercial/market/commercial-market-outlook (2024). Bergero, C. et al. Pathways to net-zero emissions from aviation. Nat. Sustain. 6 , 404–414 (2023). Article Google Scholar Dray, L. et al. Cost and emissions pathways towards net-zero climate impacts in aviation. Nat. Clim. Change 12 , 956–962 (2022). Article CAS Google Scholar Grewe, V. et al. Evaluating the climate impact of aviation emission scenarios towards the Paris agreement including COVID-19 effects. Nat. Commun. 12 , 3841 (2021). Article CAS Google Scholar Delbecq, S., Fontane, J., Gourdain, N., Planès, T. & Simatos, F. Sustainable aviation in the context of the Paris Agreement: a review of prospective scenarios and their technological mitigation levers. Prog. Aerosp. Sci. 141 , 100920 (2023). Article Google Scholar Gössling, S. & Humpe, A. Net-zero aviation: transition barriers and radical climate policy design implications. Sci. Total Environ. 912 , 169107 (2024). Article Google Scholar Sacchi, R. et al. How to make climate-neutral aviation fly. Nat. Commun. 14 , 3989 (2023). Article CAS Google Scholar Gössling, S. & Humpe, A. The global scale, distribution and growth of aviation: Implications for climate change. Glob. Environ. Change 65 , 102194 (2020). Article Google Scholar World Bank. Calculating the carbon footprint from different classes of air travel. Policy Research Working Paper 6471. https://documents1.worldbank.org/curated/en/141851468168853188/pdf/WPS6471.pdf (2023). Sun, J., Olive, X. & Strohmeier, M. Environmental footprint of private and business jets. Eng. Proc. 28 , 13 (2022). Google Scholar Sobieralski, J. B. & Mumbower, S. Jet-setting during COVID-19: environmental implications of the pandemic induced private aviation boom. Transp. Res. Interdiscip. Perspect. 13 , 100575 (2022). Google Scholar Barros, B. & Wilk, R. The outsized carbon footprints of the super-rich. Sustain.: Sci. Pract. Policy 17 , 316–322 (2021). Google Scholar Vista Jet. The Jet Traveler Report 2018. https://www.vistajet.com/globalassets/documents/jettravelerreport.pdf (2018). Lyle, C. Beyond the ICAO’s CORSIA: towards a more climatically effective strategy for mitigation of civil-aviation emissions. Clim. Law 8 , 104–127 (2018). Article Google Scholar Astute Analytics. Business Jet Market. https://www.astuteanalytica.com/industry-report/business-jet-market (2024). Honeywell. 2023 Global Business Aviation Outlook. https://aerospace.honeywell.com/content/dam/aerobt/en/documents/landing-pages/brochures/2023_BusinessAviationReport.pdf (2023). Chancel, L. Global carbon inequality over 1990–2019. Nat. Sustain. 5 , 931–938 (2022). Article Google Scholar Wiedmann, T., Lenzen, M., Keyßer, L. T. & Steinberger, J. K. Scientists’ warning on affluence. Nat. Commun. 11 , 3107 (2020). Article CAS Google Scholar Ivanova, D. & Wood, R. The unequal distribution of household carbon footprints in Europe and its link to sustainability. Glob. Sustain. 3 , e18 (2020). Article Google Scholar Lamboll, R. D. et al. Assessing the size and uncertainty of remaining carbon budgets. Nat. Clim. Change 13 , 1360–1367 (2023). Article Google Scholar Li, S. et al. Revisiting Copenhagen climate mitigation targets. Nat. Clim. Change 14 , 468–475 (2024). Article CAS Google Scholar Liu, Z., Deng, Z., Davis, S. J., Giron, C. & Ciais, P. Monitoring global carbon emissions in 2021. Nat. Rev. Earth Environ. 3 , 217–219 (2022). Article Google Scholar Oswald, Y., Owen, A. & Steinberger, J. K. Large inequality in international and intranational energy footprints between income groups and across consumption categories. Nat. Energy 5 , 231–239 (2020). Article Google Scholar Haberl, H. et al. A systematic review of the evidence on decoupling of GDP, resource use and GHG emissions, part II: synthesizing the insights. Environ. Res. Lett. 15 , 065003 (2020). Article Google Scholar Fremstad, A. & Paul, M. The impact of a carbon tax on inequality. Ecol. Econ. 163 , 88–97 (2019). Article Google Scholar Moz-Christofoletti, M. A. & Pereda, P. C. Winners and losers: the distributional impacts of a carbon tax in Brazil. Ecol. Econ. 183 , 106945 (2021). Article Google Scholar Climate Action Tracker. Home. https://climateactiontracker.org (2024). Kenner, D. Carbon Inequality: The Role of the Richest in Climate Change (Routledge, 2019). World Bank. CO 2 equivalent emissions. https://urldefense.com/v3/__https://data.worldbank.org/indicator/EN.GHG.CO2.PC.CE.AR5__;!!NLFGqXoFfo8MMQ!trwF0JujLwmQ5yc1b8UzjmMQh5HAgNbU8WdmT4hbd-A12TENzJA_1nWcn0_XYiQ408r2rFqRunaIAWwISg6CiPR865lu6_mk-VJP$ (2023). Lee, D. S. et al. Uncertainties in mitigating aviation non-CO 2 emissions for climate and air quality using hydrocarbon fuels. Environ. Sci. Atmos. 3 , 1693–1740 (2023). Article CAS Google Scholar Menkor Aviation. World footballers who own luxurious and expensive private jets. https://www.menkoraviation.com/en/lifestyle/world-footballers-who-own-private-jets/ (2024). Teoh, R. et al. Global aviation contrail climate effects from 2019 to 2021. Atmos. Chem. Phys. 24 , 6071–6093 (2024). Article CAS Google Scholar Planès, T., Delbecq, S., Pommier-Budinger, V. & Bénard, E. Simulation and evaluation of sustainable climate trajectories for aviation. J. Environ. Manag. 295 , 113079 (2021). Article Google Scholar Tol, R. S. Social cost of carbon estimates have increased over time. Nat. Clim. Change 13 , 532–536 (2023). Article Google Scholar IRS. IRS begins audits of private jet usage. https://www.irs.gov/newsroom/irs-begins-audits-of-corporate-jet-usage-part-of-larger-effort-to-ensure-high-income-groups-dont-fly-under-the-radar-on-tax-responsibilities (2024). FAA (Federal Aviation Administration). Automatic Dependent Surveillance—Broadcast (ADS-B). https://www.faa.gov/about/office_org/headquarters_offices/avs/offices/afx/afs/afs400/afs410/ads-b (2023). ICAO (International Civil Aviation Organization). ADS-B implementation and operations guidance document. https://www.icao.int/APAC/Documents/edocs/cns/ADSB_AIGD7.pdf (2014). FAA (Federal Aviation Administration). Limiting Aircraft Data Displayed (LADD). https://www.faa.gov/pilots/ladd (2024). FAA (Federal Aviation Administration). ADS-B Privacy. https://www.faa.gov/air_traffic/technology/equipadsb/privacy (2024). Aviation Week. The global business jet fleet by age & region. https://aviationweek.com/business-aviation/global-business-jet-fleet-age-region (2024). ADS-B Exchange. ADSB Exchange. https://www.adsbexchange.com (2024). IEA (International Energy Agency). Aviation. https://www.iea.org/energy-system/transport/aviation#tracking (2024). Data repository. Aviation data. https://private-jets.fra1.digitaloceanspaces.com/leg/v2/all/year=2023/data.csv (2024). Yard. Just plane wrong. https://weareyard.com/insights/worst-celebrity-private-jet-co2-emission-offenders (2022). Download references Funding Open access funding provided by Linnaeus University. Author information Authors and Affiliations School of Business and Economics Linnaeus University, Kalmar, Sweden Stefan Gössling Munich University of Applied Sciences, München, Germany Andreas Humpe Jorge Leitão ApS, Dieselvej 20 ST TV, Copenhagen, Denmark Jorge Cardoso Leitão Authors Stefan Gössling View author publications You can also search for this author in PubMed Google Scholar Andreas Humpe View author publications You can also search for this author in PubMed Google Scholar Jorge Cardoso Leitão View author publications You can also search for this author in PubMed Google Scholar Contributions S.G., A.H. and J.C.L. conceived and designed the study. A.H. and J.C.L performed the analysis. S.G. wrote the paper. Corresponding author Correspondence to Stefan Gössling . Ethics declarations Competing interests The authors declare no competing interests. Peer review Peer review information Communications Earth & Environment thanks Zarah Zengerling and the other, anonymous, reviewer(s) for their contribution to the peer review of this work. Primary Handling Editor: Alice Drinkwater. A peer review file is available. Additional information Publisher’s note Springer Nature remains neutral with regard to jurisdictional claims in published maps and institutional affiliations. Supplementary information Transparent Peer Review file Supplementary information Rights and permissions Open Access This article is licensed under a Creative Commons Attribution 4.0 International License, which permits use, sharing, adaptation, distribution and reproduction in any medium or format, as long as you give appropriate credit to the original author(s) and the source, provide a link to the Creative Commons licence, and indicate if changes were made. The images or other third party material in this article are included in the article’s Creative Commons licence, unless indicated otherwise in a credit line to the material. If material is not included in the article’s Creative Commons licence and your intended use is not permitted by statutory regulation or exceeds the permitted use, you will need to obtain permission directly from the copyright holder. To view a copy of this licence, visit http://creativecommons.org/licenses/by/4.0/ . Reprints and permissions About this article Cite this article Gössling, S., Humpe, A. & Leitão, J.C. Private aviation is making a growing contribution to climate change. Commun Earth Environ 5 , 666 (2024). https://doi.org/10.1038/s43247-024-01775-z Download citation Received : 07 May 2024 Accepted : 10 October 2024 Published : 07 November 2024 DOI : https://doi.org/10.1038/s43247-024-01775-z Share this article Anyone you share the following link with will be able to read this content: Get shareable link Sorry, a shareable link is not currently available for this article. Copy to clipboard Provided by the Springer Nature SharedIt content-sharing initiative Subjects Attribution Climate-change mitigation Environmental studies Governance
======>
https://blog.rust-lang.org/2024/11/07/gccrs-an-alternative-compiler-for-rust.html
-->>-->>
gccrs: An alternative compiler for Rust Nov. 7, 2024 · Arthur Cohen on behalf of the gccrs project gccrs is a work-in-progress alternative compiler for Rust being developed as part of the GCC project . GCC is a collection of compilers for various programming languages that all share a common compilation framework. You may have heard about gccgo , gfortran , or g++ , which are all binaries within that project, the GNU Compiler Collection . The aim of gccrs is to add support for the Rust programming language to that collection, with the goal of having the exact same behavior as rustc . First and foremost, gccrs was started as a project because it is fun. Compilers are incredibly rewarding pieces of software, and are great fun to put together. The project was started back in 2014, before Rust 1.0 was released, but was quickly put aside due to the shifting nature of the language back then. Around 2019, work on the compiler started again, led by Philip Herron and funded by Open Source Security and Embecosm . Since then, we have kept steadily progressing towards support for the Rust language as a whole, and our team has kept growing with around a dozen contributors working regularly on the project. We have participated in the Google Summer of Code program for the past four years, and multiple students have joined the effort. The main goal of gccrs is to provide an alternative option for compiling Rust. GCC is an old project, as it was first released in 1987. Over the years, it has accumulated numerous contributions and support for multiple targets, including some not supported by LLVM, the main backend used by rustc . A practical example of that reach is the homebrew Dreamcast scene, where passionate engineers develop games for the Dreamcast console. Its processor architecture, SuperH, is supported by GCC but not by LLVM. This means that Rust is not able to be used on those platforms, except through efforts like gccrs or the rustc-codegen-gcc backend - whose main differences will be explained later. GCC also benefits from the decades of software written in unsafe languages. As such, a high amount of safety features have been developed for the project as external plugins, or even within the project as static analyzers. These analyzers and plugins are executed on GCC's internal representations, meaning that they are language-agnostic, and can thus be used on all the programming languages supported by GCC. Likewise, many GCC plugins are used for increasing the safety of critical projects such as the Linux kernel, which has recently gained support for the Rust programming language. This makes gccrs a useful tool for analyzing unsafe Rust code, and more generally Rust code which has to interact with existing C code. We also want gccrs to be a useful tool for rustc itself by helping pan out the Rust specification effort with a unique viewpoint - that of a tool trying to replicate another's functionality, oftentimes through careful experimentation and source reading where the existing documentation did not go into enough detail. We are also in the process of developing various tools around gccrs and rustc , for the sole purpose of ensuring gccrs is as correct as rustc - which could help in discovering surprising behavior, unexpected functionality, or unspoken assumptions. We would like to point out that our goal in aiding the Rust specification effort is not to turn it into a document for certifying alternative compilers as "Rust compilers" - while we believe that the specification will be useful to gccrs , our main goal is to contribute to it, by reviewing and adding to it as much as possible. Furthermore, the project is still "young", and still requires a huge amount of work. There are a lot of places to make your mark, and a lot of easy things to work on for contributors interested in compilers. We have strived to create a safe, fun, and interesting space for all of our team and our GSoC students. We encourage anyone interested to come chat with us on our various communication platforms , and offer mentorship for you to learn how to contribute to the project and to compilers in general. Maybe more importantly however, there is a number of things that gccrs is NOT for. The project has multiple explicit non-goals, which we value just as highly as our goals. The most crucial of these non-goals is for gccrs not to become a gateway for an alternative or extended Rust-like programming language. We do not wish to create a GNU-specific version of Rust, with different semantics or slightly different functionality. gccrs is not a way to introduce new Rust features, and will not be used to circumvent the RFC process - which we will be using, should we want to see something introduced to Rust. Rust is not C, and we do not intend to introduce subtle differences in standard by making some features available only to gccrs users. We know about the pain caused by compiler-specific standards, and have learned from the history of older programming languages. We do not want gccrs to be a competitor to the rustc_codegen_gcc backend. While both projects will effectively achieve the same goal, which is to compile Rust code using the GCC compiler framework, there are subtle differences in what each of these projects will unlock for the language. For example, rustc_codegen_gcc makes it easy to benefit from all of rustc 's amazing diagnostics and helpful error messages, and makes Rust easily usable on GCC-specific platforms. On the other hand, it requires rustc to be available in the first place, whereas gccrs is part of a separate project entirely. This is important for some users and core Linux developers for example, who believe that having the ability to compile the entire kernel (C and Rust parts) using a single compiler is essential. gccrs can also offer more plugin entrypoints by virtue of it being its own separate GCC frontend. It also allows Rust to be used on GCC-specific platforms with an older GCC where libgccjit is not available. Nonetheless, we are very good friends with the folks working on rustc_codegen_gcc , and have helped each other multiple times, especially in dealing with the patch-based contribution process that GCC uses. All of this ties into a much more global goal, which we could summarize as the following: We do not want to split the Rust ecosystem. We want gccrs to help the language reach even more people, and even more platforms. To ensure that, we have taken multiple measures to make sure the values of the Rust project are respected and exposed properly. One of the features we feel most strongly about is the addition of a very annoying command line flag to the compiler, -frust-incomplete-and-experimental-compiler-do-not-use . Without it, you are not able to compile any code with gccrs , and the compiler will output the following error message: crab1: fatal error: gccrs is not yet able to compile Rust code properly. Most of the errors produced will be the fault of gccrs and not the crate you are trying to compile. Because of this, please report errors directly to us instead of opening issues on said crate's repository. Our github repository: https://github.com/rust-gcc/gccrs Our bugzilla tracker: https://gcc.gnu.org/bugzilla/buglist.cgi?bug_status=__open__&component=rust&product=gcc If you understand this, and understand that the binaries produced might not behave accordingly, you may attempt to use gccrs in an experimental manner by passing the following flag: -frust-incomplete-and-experimental-compiler-do-not-use or by defining the following environment variable (any value will do) GCCRS_INCOMPLETE_AND_EXPERIMENTAL_COMPILER_DO_NOT_USE For cargo-gccrs, this means passing GCCRS_EXTRA_ARGS="-frust-incomplete-and-experimental-compiler-do-not-use" as an environment variable. Until the compiler can compile correct Rust and, most importantly, reject incorrect Rust, we will be keeping this command line option in the compiler. The hope is that it will prevent users from potentially annoying existing Rust crate maintainers with issues about code not compiling, when it is most likely our fault for not having implemented part of the language yet. Our goal of creating an alternative compiler for the Rust language must not have a negative effect on any member of the Rust community. Of course, this command line flag is not to the taste of everyone, and there has been significant pushback to its presence... but we believe it to be a good representation of our main values. In a similar vein, gccrs separates itself from the rest of the GCC project by not using a mailing list as its main mode of communication. The compiler we are building will be used by the Rust community, and we believe we should make it easy for that community to get in touch with us and report the problems they encounter. Since Rustaceans are used to GitHub, this is also the development platform we have been using for the past five years. Similarly, we use a Zulip instance as our main communication platform, and encourage anyone wanting to chat with us to join it. Note that we still have a mailing list, as well as an IRC channel (gcc-rust@gcc.gnu.org and #gccrust on oftc.net ), where all are welcome. To further ensure that gccrs does not create friction in the ecosystem, we want to be extremely careful about the finer details of the compiler, which to us means reusing rustc components where possible, sharing effort on those components, and communicating extensively with Rust experts in the community. Two Rust components are already in use by gccrs : a slightly older version of polonius , the next-generation Rust borrow-checker, and the rustc_parse_format crate of the compiler. There are multiple reasons for reusing these crates, with the main one being correctness. Borrow checking is a complex topic and a pillar of the Rust programming language. Having subtle differences between rustc and gccrs regarding the borrow rules would be annoying and unproductive to users - but by making an effort to start integrating polonius into our compilation pipeline, we help ensure that the results we produce will be equivalent to rustc . You can read more about the various components we use, and we plan to reuse even more here . We would also like to contribute to the polonius project itself and help make it better if possible. This cross-pollination of components will obviously benefit us, but we believe it will also be useful for the Rust project and ecosystem as a whole, and will help strengthen these implementations. Reusing rustc components could also be extended to other areas of the compiler: Various components of the type system, such as the trait solver, an essential and complex piece of software, could be integrated into gccrs . Simpler things such as parsing, as we have done for the format string parser and inline assembly parser, also make sense to us. They will help ensure that the internal representation we deal with will correspond to the one expected by the Rust standard library. On a final note, we believe that one of the most important steps we could take to prevent breakage within the Rust ecosystem is to further improve our relationship with the Rust community. The amount of help we have received from Rust folks is great, and we think gccrs can be an interesting project for a wide range of users. We would love to hear about your hopes for the project and your ideas for reducing ecosystem breakage or lowering friction with the crates you have published. We had a great time chatting about gccrs at RustConf 2024, and everyone's interest in the project was heartwarming. Please get in touch with us if you have any ideas on how we could further contribute to Rust.
======>
https://old.reddit.com/r/rust/comments/1gm3frf/next_leveling_my_rust_programming/
-->>-->>
I write c# all day and I'd generally consider myself an "expert". I put that in quotes because you can never truly become an expert, there is always something to learn. But, as a whole, anything I want to build in c#, I can (or I know where to look to figure it out). Now, I've been writing rust for the better part of five years and although I'm competent, I can't say I'm near the level of competent I am with c#. Along this point, even when I write rust I feel as though I'm missing optimizations or ways I can improve my code.    

   So my question is: is there any sort of resource I can use to 'next level' my rust programming?   

   For example, lifetimes or const generics. I understand them (to an extent) and can use them (to an extent), but I struggle on knowing when to use them or how to implement them on a larger scale. Therefore I miss the benefits of these features.    

   Any sort of online course or YouTube video seems to cover the basics. I've come to be of mind that to really gain the benefits of rust, you have to be able to write very efficient code which I am finding difficult in rust. Almost as though I'm missing something? The answer to this might just be to 'practice' and 'write more rust', the problem is I feel as though I need guided practice or examples.    

   Any advice from more experienced rust devs?    
   

======>
https://old.reddit.com/r/rust/comments/1glf5wl/why_rust_doesnt_have_a_std_lib_for_date_time/
-->>-->>
"I've been struggling to create a personal project as a CLI app for financial record-keeping. I would really like to build a project using only the Rust standard library, but it seems like an extremely challenging task.   

   Which leads me to wonder—why isn't this functionality available in the standard library?"   
   
======>
https://old.reddit.com/r/rust/comments/1gm46rh/announcing_rodio_020_and_call_for_help/
-->>-->>
Rodio is an audio playback library. It can decode audio files, synthesize new sounds, apply effects to sounds & mix them. Rodio has been part of the Rust ecosystem for 9 years now! 🎉.   

   New release   

   The rodio contributors have made many improvements in the last 5 months. Rodio can now:   

   
   Seek back and forth through sound efficiently   
   Track the playback position at sample accuracy!   
   Generate more signals such as chirps, white & pink noise and different wavesforms   
   Automatically adjust the gain to limit the peak volume and change in loudness   
   

   This is ignoring the many fixes and smaller additions made by the many contributors who helped out expand rodio.   

   Call for help   

   In its 9 years of existence Rust has changed a lot. Further more Rodio is being used for applications beyond its original scope. To improve rodio we believe its time for larger (breaking) changes.   

   User feedback   

   To ensure we make the right changes we want to know what rodio is being used for and what you all would like to use it for.   

   We can use any input you have but are especially looking for users who are:   

   
   using rodio and feel some part of the API is hard to use.   
   have experienced footguns/pain point   
   wanted to use rodio but could not make it fit their use-case (excluding complex game audio (best served by    kira   ) and advanced dsp). If you disagree and think rodio can server those excluded use-case too let us know!   
   

   The best way to leave your feedback is a short user story on our issue    tracker   . If that is not your thing any other form of feedback posted there works too!   

   Architecture & API   

   We can use input on our planned    changes    and how to best implement them.   
   

======>
https://old.reddit.com/r/rust/comments/1glb3ya/psa_thiserror_200_released_officially_gains_no/
-->>-->>
I discovered quite by accident this morning as I was editing a Cargo.toml that    thiserror    now has a version 2.0.0 release   .   

   I couldn't find any release notes or changelogs*, but looking at the most recent set of commits, it now supports    #[no_std]    environments  by setting    default-features = false    under    rustc    1.81.0+ (where    Error    moved to    core   ).   

   This may be relevant to you if you do embedded, bare-metal or Wasm Rust development.   

   Credit and thanks to the author and maintainer,    /u/dtolnay   .   

   

   thiserror    is a best-in-class Rust "error management library" designed to facilitate creation and maintenance of bespoke error hierarchies, minimizing boilerplate while not appearing in your crate's public API.   

   *Edit: Thanks,    /u/VorpalWay    for the    release notes link   .  There are other new features as well.   
   

======>
https://sander.saares.eu/2024/11/06/why-is-stdpinpin-so-weird/
-->>-->>
Why is std::pin::Pin so weird? Sander Saares Uncategorized November 6, 2024 November 6, 2024 16 Minutes Values of certain Rust types need to be pinned, which prevents them from moving in memory. This is expressed via the std::pin::Pin wrapper type and is typically encountered in the form of a function accepting Pin<&mut T> instead of &mut T . Pinning makes using many “normal” programming techniques difficult and has strange side-effects that do not have an obvious connection to the purpose of pinning. This article briefly introduces what pinning is, explores what is happening in common confusing situations and attempts to explain the strange side-effects by identifying the reasons they occur. It is a collection of lessons learned to try shorten readers’ path to pinning mastery. Note: for complete code samples that you can compile, refer to pins-in-rust/examples at main · sandersaares/pins-in-rust . Snippets below may omit less relevant content in the interest of readability. Why does pinning exist? It is possible to define a Rust type that stops working correctly when it is moved to a different location in memory. The easiest way to do this is to create a type that holds a pointer or reference to itself. Let’s define such a type. We start with a type that does not use pinning. This first example is intentionally wrong – the code compiles but contains undefined behavior, which is always a programming error. .gist table { margin-bottom: 0; } This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters Show hidden characters // BAD CODE: This example is intentionally wrong. pub struct BagOfApples { count : usize , // In the example code, this self-reference is mostly useless. // This is just to keep the example code simple – the emphasis is // on the effects of pinning, not why a type may be designed to need it. self_reference : * mut BagOfApples , } impl BagOfApples { pub fn new ( ) -> Self { BagOfApples { count : 0 , // We cannot set this here because we have not yet // created the BagOfApples – there is nothing to reference. self_reference : ptr :: null_mut ( ) , } } /// Call this after creating a BagOfApples to initialize the instance. pub fn initialize ( & mut self ) { self . self_reference = self ; } pub fn count ( & self ) -> usize { assert ! ( ! self .self_reference.is_null ( ) , "BagOfApples is not initialized" ) ; // SAFETY: Simple read-only access to the count field, which // is safe. We do it via the pointer for example purposes. unsafe { ( * self . self_reference ) . count } } } // BAD CODE: This example is intentionally wrong. view raw 01.rs hosted with by GitHub This article will not examine why or how types that require pinning are useful – we just accept the fact that such types exist and must sometimes be used in the code we write. Accordingly, the example types in this article are not “meaningful” but merely contrived stand-ins that require pinning. If used in a simple manner, the code above does technically work: .gist table { margin-bottom: 0; } This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters Show hidden characters let mut bag = BagOfApples :: new ( ) ; bag . initialize ( ) ; println ! ( "Apple count: {}" , bag.count ( ) ) ; view raw 02.rs hosted with by GitHub However, if we were to move this type to a different location in memory, the pointer in self_reference would become invalid because it would be pointing to a location that is no longer occupied by the BagOfApples . Attempting to read or write through an invalid pointer is a programming error (even if it sometimes appears to work). .gist table { margin-bottom: 0; } This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters Show hidden characters // BAD CODE: This example is intentionally wrong. let mut bag = BagOfApples :: new ( ) ; bag . initialize ( ) ; // We move the bag into a box, which is a different memory location. // Invalid code: it is not legal to move the bag after creation because it is // self-referential. BagOfApples is an unsound type because it allows this. let boxed_bag = Box :: new ( bag ) ; // This could result in invalid memory access, causing undefined behavior. // It may (appear to) work depending on circumstances and what compiler // optimizations are applied in specific situations but this does not make it valid. println ! ( "Apple count: {}" , boxed_bag.count ( ) ) ; // BAD CODE: This example is intentionally wrong. view raw 03.rs hosted with by GitHub In its current form, the BagOfApples type we created is unsound , meaning that it exposes a safe API that makes it possible for the user of the type to cause undefined behavior, for example by moving the value between calling initialize() and count() . There are two ways to solve this soundness problem: We can mark the initialize() function as unsafe and declare in the function comments that the user is now responsible for ensuring that the value is never moved. This would be technically correct because it would make the invalid memory access the fault of the user – the code would no longer be unsound. However, this design choice is not particularly helpful because the only way to identify when the value is moved is by carefully reviewing the code. A well-designed API does not burden the programmer with extra code review duties. We can require that the type be pinned before initialize() or count() can be called. Pinning is a compile-time signal that says “this value is not allowed to move”. As the former option would be poor API design, let’s use the latter and modify our type to require pinning. There are two required modifications. First, we must add a member of type PhantomPinned to BagOfApples . This is a marker for the compiler, stating that values of our type must be pinned. .gist table { margin-bottom: 0; } This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters Show hidden characters pub struct BagOfApples { count: usize, // In the example code, this self-reference is mostly useless. // This is just to keep the example code simple – the emphasis is // on the effects of pinning, not why a type may be designed to need it. self_reference: *mut BagOfApples, _require_pin: std::marker::PhantomPinned, } pub fn new() -> Self { BagOfApples { count: 0, // We cannot set this here because we have not yet // created the BagOfApples – there is nothing to reference. self_reference: ptr::null_mut(), _require_pin: std::marker::PhantomPinned, } } view raw 04.rs hosted with by GitHub Then we need to change the initialize() method to accept a pinned reference. .gist table { margin-bottom: 0; } This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters Show hidden characters /// Call this after creating a BagOfApples to initialize the instance. pub fn initialize ( mut self : Pin < & mut Self > ) { // SAFETY: BagOfApples requires pinning and we do not allow // the obtained pointer to be exposed outside this type, so // we know it always points to a valid value and therefore it // is safe to store the pointer. We have also reviewed the code of // this function to ensure that we do not move the BagOfApples // instance via the reference we obtain from here nor via the pointer. let self_mut = unsafe { self . as_mut ( ) . get_unchecked_mut ( ) } ; self_mut . self_reference = self_mut ; } view raw 05.rs hosted with by GitHub The details of how this method is implemented are described in a later chapter. The main thing to note here is that the parameter changed from &mut self to mut self: Pin<&mut Self> . This change is a signal to the compiler that the method can only be called on pinned values. It is also a hint of the enforcement mechanism we will soon see in action – pinning is enforced by the compiler when methods of our pinning-required type are called. The code using our type must now also change but we will come back to that shortly. Before that, let’s ask an obvious question. Why is this code with Pin better? The purpose of pinning is to cause a compile-time error whenever the possibility exists for a pinning-required type to move in memory. In other words, our previous “bad” example code that tried to move the BagOfApples no longer compiles. That is the entire point of pinning! .gist table { margin-bottom: 0; } This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters Show hidden characters let mut bag = BagOfApples :: new ( ) ; bag . initialize ( ) ; // ^ ERROR // no method named `initialize` found for struct `better::BagOfApples` in the current scope // method not found in `BagOfApples` // lib.rs(66, 5): method `initialize` not found for this struct // lib.rs(114, 9): consider pinning the expression: `let mut pinned = std::pin::pin!(`, `); view raw 06.rs hosted with by GitHub Success! Pinning works! To be clear, this is the only thing that pinning does – it causes compile-time errors . As long as the value in question is never actually moved, there is no difference at runtime between using a pinned type and using a non-pinned type. The weirdness of Pin starts here. While sometimes the pinning-related compile-time errors genuinely help the programmer by turning undefined behavior into a compile time error, at other times the compile errors appear even with “logically correct” code and cause frustration, requiring us to jump through extra hoops to make the compiler happy. Let’s examine some typical scenarios. The “better” code does not compile – help! The first problem pinning creates for us is obvious – we get a compile error when we try to call initialize() which means two things: the “bad code” example that caused undefined behavior by moving the BagOfApples is now broken; that’s good! the original simple example that does not move BagOfApples is now also broken because it too calls initialize() ; not so good! This is expected. Pinning not only causes compile errors when at risk of undefined behavior but also requires correct code to be written differently. Think of it as extra work you must do to help the compiler figure out when the moves may happen. Let’s revisit the phrasing at the start of the previous chapter: “the purpose of pinning is to cause a compile-time error whenever the possibility exists for a pinning-required type to move in memory”. All the side-effects and weirdness that come with Pin are a result of this statement. Pinning does not prevent merely the moves themselves, pinning prevents situations where moves are at all possible! This means pinning can get in the way of things when we try doing something that is not necessarily related to moving a value, merely because such an act could theoretically allow the value to be moved if we chose to. Let’s modify the code so it can successfully use the BagOfApples in the scenario where no moving of the value occurs: .gist table { margin-bottom: 0; } This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters Show hidden characters let mut bag = Box :: pin ( BagOfApples :: new ( ) ) ; bag . as_mut ( ) . initialize ( ) ; println ! ( "Apple count: {}" , bag.count ( ) ) ; view raw 07.rs hosted with by GitHub The changes here are: We wrap the BagOfApples with a Box::pin() call. This pins the value and returns a Pin<Box<BagOfApples>> . We call .as_mut() before calling .initialize() to obtain the form of self that matches the parameter in the updated initialize() method, giving us a Pin<&mut BagOfApples> . This example uses Box::pin() to pin the value. There are different ways to pin values but the details of how to achieve pinning are outside the scope of this article. Box::pin() is merely the most straightforward and general-purpose way to achieve pinning – it is a reasonable default choice if unsure. Warning: avoid the pin! macro unless you have a very good understanding of what it does. This macro is sometimes over-eagerly suggested by the compiler as the “solution” to pinning-related errors (as you may already have noticed in the compiler error listed in the previous chapter). However, this macro is only applicable under specific conditions and often not the right tool for the job. Why did initialize() become so weird when count() did not need to change? You may already have forgotten about count() but here it still is in its original form, compiling just fine with no hint of Pin . A breath of fresh uncomplicated air but why? .gist table { margin-bottom: 0; } This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters Show hidden characters pub fn count ( & self ) -> usize { assert ! ( ! self .self_reference.is_null ( ) , "BagOfApples is not initialized" ) ; // SAFETY: Simple read-only access to the count field, which // is safe. We do it via the pointer for example purposes. unsafe { ( * self . self_reference ) . count } } view raw 08.rs hosted with by GitHub This is because it is impossible to move something through a shared reference ( &self ) because such references by design provide a read-only view of the value. Therefore, a pinned value can always be dereferenced via a shared reference . Only functions that take exclusive references ( &mut self ) or owned values ( self ) have to change for pinned types, as only those functions could possibly move the value. Non-pinned value Pinned value Shared reference &T &T or optionally Pin<&T> Exclusive reference &mut T Pin<&mut T> Owned value T Pin<Box<T>> or similar Given that a Pin can always be dereferenced into a shared reference, the author is not aware of situations where one would be required to use Pin<&T> over &T . If you know of such cases, please leave a comment! Pinned types have a wild childhood Let’s immediately create a seeming contradiction with the above table and add a &mut self function to our pinning-required example type. For example, we can define a set_capacity() that updates a capacity field on the struct: .gist table { margin-bottom: 0; } This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters Show hidden characters pub struct BagOfApples { count : usize , capacity : usize , // … } impl BagOfApples { // … pub fn set_capacity ( & mut self , capacity : usize ) { self . capacity = capacity ; } // … } view raw 09.rs hosted with by GitHub So far so good but of course we have not yet called this method so perhaps that is just a coincidence – recall that pinning is primarily enforced when methods are called. Indeed, if we just add this method call into our code, we get a familiar looking error: .gist table { margin-bottom: 0; } This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters Show hidden characters let mut bag = Box :: pin ( BagOfApples :: new ( ) ) ; bag . as_mut ( ) . initialize ( ) ; // error[E0596]: cannot borrow data in dereference of `Pin<Box<BagOfApples>>` as mutable bag . set_capacity ( 123 ) ; // error[E0596]: cannot borrow data in dereference of `Pin<&mut BagOfApples>` as mutable bag . as_mut ( ) . set_capacity ( 123 ) ; view raw 10.rs hosted with by GitHub A common “technique” people tend to apply when overwhelmed by pinning related errors is to try spam .as_mut() everywhere to try resolve them. As you can see above, it does not matter if we try it with or without the .as_mut() – either way the compiler tells us “no” because it cannot give us a &mut self from the pinned value. After all, an exclusive &mut self reference would allow the value to be moved! Pinning is working as intended by blocking that from happening. However, we do not have to pin our BagOfApples immediately! We can create it as a regular non-pinned value, call set_capacity() , and only then pin it and operate on it as a pinned value. .gist table { margin-bottom: 0; } This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters Show hidden characters let mut bag = BagOfApples :: new ( ) ; bag . set_capacity ( 123 ) ; let mut bag = Box :: pin ( bag ) ; bag . as_mut ( ) . initialize ( ) ; println ! ( "Apple count: {}" , bag.count ( ) ) ; view raw 11.rs hosted with by GitHub That works just fine – great success! This example demonstrates that pinning is a part of the value’s lifecycle – there is a wild non-pinned childhood even for every pinning-required type. How to make use of this lifecycle phase is up to the author of the type to decide, by defining methods that accept &mut self , which are intended to be called in this phase. Every instance of a Rust type starts out as non-pinned. A value only becomes pinned when you use Box::pin() or some other pinning mechanism to wrap it with Pin . Can the Pin wrapper be removed once a type is pinned? Not in safe code – once something is pinned, it stays pinned and remains inside the Pin wrapper forever. However, it is still possible and often even appropriate to get a regular &mut exclusive reference to the value temporarily. There are two ways to do this and both come with strings attached. Let’s set the scene by defining a trait for a bag of fruit. We define just one function to set the bag capacity. We predict that implementations may need to be pinned, so we use a pinned form for the self parameter. .gist table { margin-bottom: 0; } This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters Show hidden characters pub trait BagOfFruit { fn set_capacity ( self : Pin < & mut Self > , capacity : usize ) ; } view raw 12.rs hosted with by GitHub Next, we implement a BagOfBananas , which is a type that requires pinning (just for example purposes). .gist table { margin-bottom: 0; } This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters Show hidden characters pub struct BagOfBananas { capacity : usize , _require_pin : std :: marker :: PhantomPinned , } view raw 13.rs hosted with by GitHub Now we need to implement BagOfFruit::set_capacity() for this type. No matter how we approach the situation, to set the value of the capacity field, we need either an owned value ( mut BagOfBananas ) or an exclusive reference ( &mut BagOfBananas ). Pinning is a mechanism whose entire purpose is to prevent us from getting either of those once we have pinned the value (i.e. added the Pin wrapper type)! Given that self does indeed have the Pin wrapper in set_capacity() , we appear to be stuck. With the BagOfBananas type, there is only one way out of this – we must make a trade with the compiler. In return for the compiler giving us a &mut BagOfBananas we must promise to take over some of its responsibilities and ensure that the value does not get moved while we have the exclusive reference. .gist table { margin-bottom: 0; } This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters Show hidden characters impl BagOfFruit for BagOfBananas { fn set_capacity ( mut self : Pin < & mut Self > , capacity : usize ) { // SAFETY: BagOfBananas requires pinning. We have reviewed the code // in this function  to ensure that we do not move the BagOfBananas // instance via the reference we obtain from here. let self_mut : & mut BagOfBananas = unsafe { self . as_mut ( ) . get_unchecked_mut ( ) } ; self_mut . capacity = capacity ; } } view raw 14.rs hosted with by GitHub The function get_unchecked_mut() returns a regular &mut exclusive reference but is marked unsafe . This means that calling it is only possible inside an unsafe block and requires the caller to promise that the value will not get moved. The safety comment explains how we ensure that we fulfill this promise. Each unsafe function has a chapter in its documentation to describe what is the promise that must be upheld to use that function – different unsafe functions require different promises from the programmer. To be clear, unsafe blocks do not allow the Rust programming rules to be violated, they merely transfer some of the responsibility from the compiler to the programmer. The pinned value is still not allowed to move but some of the guardrails preventing that are lowered temporarily. The above is the general-purpose mechanism to get a &mut exclusive reference to a pinned value. However, there also exists a special case if the type in question satisfies certain criteria (which was not the case with BagOfBananas ). A fact that the preceding chapters glossed over is that you can pin anything, including values of types that do not require pinning. For example, you can pin an integer: .gist table { margin-bottom: 0; } This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters Show hidden characters let pinned = Box :: pin ( 42 ) ; println ! ( "Pinned integer: {}" , *pinned ) ; view raw 15.rs hosted with by GitHub Doing this in the above example is pointless – an integer does not require pinning, so the only thing you get from pinning an integer is extra complexity in usage of the value due to the special constraints Pin forces on you. However, circumstances may force you to do this. For example, if you are the author of a BagOfOranges type which does not require pinning, you may still want to implement the BagOfFruit trait that is designed to be used with pinned values (because some types of bags may need it). While you could create this BagOfOranges type using the same patterns as BagOfBananas above, treating it as a pinning-required type even if it does not actually require pinning, there is also a simpler way: .gist table { margin-bottom: 0; } This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters Show hidden characters pub struct BagOfOranges { capacity : usize , } impl BagOfFruit for BagOfOranges { fn set_capacity ( mut self : Pin < & mut Self > , capacity : usize ) { // This type does not require pinning, so we can simply dereference. let self_mut : & mut BagOfOranges = & mut self ; self_mut . capacity = capacity ; } } view raw 16.rs hosted with by GitHub Wait, what?! The compiler suddenly allows us to simply create a &mut exclusive reference. No unsafe block required! No compile error! Did you notice the other difference? This is the key to what makes it possible: there is no PhantomPinned member in the struct! This member, present in BagOfBananas we defined earlier, was a marker to the compiler, indicating that the type requires pinning. That is the special condition that applies here: you can dereference a Pin<&mut T> into a regular &mut T if the compiler can identify that the type does not actually require pinning. In the Rust ecosystem this is expressed as implementing the Unpin auto trait , with the presence of PhantomPinned (or a field of some other type that requires pinning) removing this auto trait implementation. Non-pinned value Pinned value (type requires pinning) Pinned value (type does not require pinning) T implements Unpin No Yes Shared reference &T &T or optionally Pin<&T> &T or optionally Pin<&T> Exclusive reference &mut T Pin<&mut T> Pin<&mut T> or &mut T Owned value T Pin<Box<T>> or similar Pin<Box<T>> or similar This finding also extends the above table with a new column, to distinguish what can be done with pinned types that do or do not require pinning. How does any of this actually prevent moving the value? The above chapters describe a great deal of ceremony around the use of pinning but it may not be obvious how any of this achieves the goal of preventing the value from being moved. The mechanism achieves its goal by the fact that all standard library functions that could move a value take an exclusive reference ( &mut ). It is not possible to get an exclusive reference to a pinned value. Therefore, a pinned value cannot be moved by any standard library code. For code that you may write yourself or that some 3 rd party crate may contain, the possibility exists to create a custom function that moves a pinned value. However, in this case it would be an intentional act and the author of this code would be responsible for ensuring that the move does not violate any Rust programming rules. The pinning mechanism helps highlight the risk in user code by requiring unsafe blocks to obtain a &mut reference to a pinned value. This puts the responsibility on the author of such code to ensure that the safety expectations of the type are upheld. .gist table { margin-bottom: 0; } This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters Show hidden characters /// Call this after creating a BagOfApples to initialize the instance. pub fn initialize ( mut self : Pin < & mut Self > ) { // SAFETY: BagOfApples requires pinning and we do not allow // the obtained pointer to be exposed outside this type, so // we know it always points to a valid value and therefore it // is safe to store the pointer. We have also reviewed the code of // this function to ensure that we do not move the BagOfApples // instance via the reference we obtain from here nor via the pointer. let self_mut = unsafe { self . as_mut ( ) . get_unchecked_mut ( ) } ; self_mut . self_reference = self_mut ; } view raw 05.rs hosted with by GitHub You should now understand how and why we implemented the initialize() method in our first example the way we did – it uses an unsafe block to obtain an exclusive reference ( &mut ) to update the self_reference field. Whenever an exclusive reference is obtained, we rely on the author of the code to uphold any safety expectations of the type, transferring responsibility from the compiler to the programmer. What exactly these expectations are depend on the specific type being used (e.g. which fields are safe to modify, which are not, and during which part of the value’s lifecycle). The author of the code is expected to document how they uphold the type’s safety requirements in a safety comment, as shown above. Pinned fields Everything above dealt with variables containing pinned values. However, another important place where values exist is in the fields of a struct. Consider a scenario where we have a FruitStand struct that must contain multiple different fruit bags. Without any pinning, it might look like this: .gist table { margin-bottom: 0; } This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters Show hidden characters struct FruitStand { apples : BagOfApples , oranges : BagOfOranges , bananas : BagOfBananas , total_sold : usize , } view raw 17.rs hosted with by GitHub We know that the fruit bags have methods on them similar to fn sell_one(self: Pin<&mut Self>) , which take Pin<&mut Self> as a parameter, indicating that values of these types must be pinned before we can call these methods. At the same time, we also have the field total_sold , which is just an integer that does not require pinning. For each fruit bag, we need to somehow obtain the Pin<&mut Self> that calling such a sell_one() method requires. As one option, we could simply allocate each fruit bag separately as a pinned box. This allows the patterns already familiar from earlier in the article to be used in the FruitStand methods: .gist table { margin-bottom: 0; } This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters Show hidden characters struct FruitStand { apples : Pin < Box < BagOfApples > > , oranges : Pin < Box < BagOfOranges > > , bananas : Pin < Box < BagOfBananas > > , total_sold : usize , } impl FruitStand { fn new ( ) -> Self { FruitStand { apples : Box :: pin ( BagOfApples :: default ( ) ) , oranges : Box :: pin ( BagOfOranges :: default ( ) ) , bananas : Box :: pin ( BagOfBananas :: default ( ) ) , total_sold : 0 , } } fn sell_one_of_each ( & mut self ) { self . apples . as_mut ( ) . sell_one ( ) ; self . oranges . as_mut ( ) . sell_one ( ) ; self . bananas . as_mut ( ) . sell_one ( ) ; self . total_sold += 3 ; } } view raw 18.rs hosted with by GitHub This essentially works but is not good code because: It splits a single memory allocation (the FruitStand ) into four separate memory allocations: the FruitStand , plus one allocation for each fruit bag. This is quite inefficient. The boxes force the fruit bags to be allocated on the heap, which prevents the compiler from placing the data on the stack when possible. This is inefficient. Allocating boxes this way may be incompatible with the intended architecture of the app/service/library being written. Therefore, the above solution should be avoided. A better option is to instead require the entire FruitStand to be pinned. This leaves the caller and the compiler a great deal of flexibility in how the object is allocated while still enabling it to be allocated as a single object, avoiding the pitfalls of the previous solution. Let’s try define a FruitStand that requires itself to be pinned. The most obvious change is that sell_one_of_each() must now take self as a Pin<&mut Self> . Before we even get to calling this method, however, we already see a compile error: .gist table { margin-bottom: 0; } This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters Show hidden characters #[derive(Default)] struct FruitStand { apples: BagOfApples, oranges: BagOfOranges, bananas: BagOfBananas, total_sold: usize, } impl FruitStand { fn sell_one_of_each(self: Pin<&mut Self>) { self.apples.sell_one(); // error[E0599]: no method named `sell_one` found for struct `BagOfApples` in the current scope //   –> examples\05_project.rs:85:21 //    | // 4  | struct BagOfApples { //    | —————— method `sell_one` not found for this struct // … // 85 |         self.apples.sell_one(); //    |                     ^^^^^^^^ method not found in `BagOfApples` //    | // help: consider pinning the expression //    | // 85 ~         let mut pinned = std::pin::pin!(self.apples); // 86 ~         pinned.as_mut().sell_one(); //    | self.oranges.sell_one(); self.bananas.sell_one(); self.total_sold += 3; } } view raw 19.rs hosted with by GitHub What’s going on here? We have a combination of two factors: sell_one() requires the bag of apples to be pinned: fn sell_one(self: Pin<&mut Self>) . Meanwhile, the expression self.apples returns a regular &BagOfApples shared reference. That is a mismatch! The compiler cannot go from &BagOfApples to Pin<&mut BagOfApples> . Not only because of the lack of Pin but also because the former is a shared reference ( &T ), whereas you need an exclusive reference ( &mut T ) for the latter. This highlights a potentially surprising behavior: the compiler treats fields of pinned types as not pinned by default. Even if we wanted to empower the compiler to “just do the right thing” here, whether a field of a pinned type needs to be treated as pinned or not depends on whether the author of the field’s type designed it to be used via the Pin wrapper or not (i.e. it depends on the type of the self parameter in the type’s methods). The compiler does not know what is the right choice. We need to help the compiler and tell it that when our FruitStand type is pinned, certain fields of it need to also be treated as pinned. We do not want all fields to be treated as pinned because not all types are designed to be pinned (i.e. some fields like total_sold may need to be mutated via regular &mut T exclusive references instead of Pin<&mut T> ). This functionality is enabled by the pin_project crate , which we can add to the project via cargo add pin_project . Our updated FruitStand is as follows: .gist table { margin-bottom: 0; } This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters Show hidden characters #[derive(Default)] #[pin_project] struct FruitStand { #[pin] apples: BagOfApples, #[pin] oranges: BagOfOranges, #[pin] bananas: BagOfBananas, total_sold: usize, } impl FruitStand { fn sell_one_of_each(mut self: Pin<&mut Self>) { let self_projected = self.as_mut().project(); self_projected.apples.sell_one(); self_projected.oranges.sell_one(); self_projected.bananas.sell_one(); *self_projected.total_sold += 3; } } view raw 20.rs hosted with by GitHub The #[pin] marker signals which fields need to be treated as pinned if the parent type is pinned. To obtain a version of self that matches this marking in sell_one_of_each() , we must call .as_mut().project() . And now it works! This is the general purpose mechanism to work with pinned fields. Adding all the various .as_mut() and .project() can sometimes get annoyingly verbose if you are dealing with multiple layers of nested types but that is just how it is – accept it as a necessary evil. Avoid relying on the Unpin auto trait As a final caution, note that IDEs and AI assistants very often try generating pinning-related Rust code that only works with types that do not actually require pinning (i.e. that implement the Unpin auto trait). Whenever you see the term unpin in generated code, be suspicious. Whenever you see a Pin wrapper magically disappear as a &mut T exclusive reference pops out, be suspicious. It is very easy to accidentally learn incorrect pinning-related patterns that only work with types that do not actually require pinning. This can not only result in writing code that by accident only works with a subset of pinned types but can delay achieving a proper understanding of the topic and make it seem more confusing than it really is. More reading std::pin – Rust Pin in std::pin – Rust Unpin in std::marker – Rust pin_project – Rust https://without.boats/blog/pin/ Source code pins-in-rust/examples at main · sandersaares/pins-in-rust Share this: Twitter Facebook Like Loading... Related Does Rust have an advantage if memory-safety is not an advantage? February 2, 2024 In "performance" AI will change the world – but not through the AI products of today July 31, 2024 In "ai" Memory allocation is the root of all evil January 9, 2024 In "performance" Tagged programming rust Published by Sander Saares Principal Software Engineer at Microsoft, working on making Rust a top-tier development platform for global-scale web services. View all posts by Sander Saares Published November 6, 2024 November 6, 2024 Post navigation Previous Post AI will change the world – but not through the AI products of today Leave a comment Cancel reply Δ document.getElementById( "ak_js_1" ).setAttribute( "value", ( new Date() ).getTime() ); Create a website or blog at WordPress.com
======>
https://github.com/rust-lang/crates.io/issues/9864
-->>-->>
cyqsimon opened on Nov 7, 2024 TLDR As you the reader probably know, the .io ccTLD is scheduled to be "phased out" in the next couple of years, whatever "phased out" means in this case. In the best case scenario, crates.io 's continued existence would be dependent on IANA's gratuity; in the worst case, a sudden disappearance of crates.io would be disastrous for the entire Rust ecosystem. I think it's a risk that should be discussed and dealt with sooner than later. What will happen to .io ? The answer is nobody knows. Historically, retired ccTLDs due to various geopolitical issues have mostly been removed. Here's a short list: ccTLD Country Deprecation Deletion Note .dd East Germany N/A N/A Never added to root NS .cs Czechoslovakia 1993 1995 .yu Yugoslavia 2003 2010 .su Soviet Union 1994 N/A Retained by Russia .tp East Timor 2005 2015 It's arguable that .io is similar to .su in terms of its wide usage, so IANA may end up making an exception. Although it has to be said, IANA has attempted a move to remove .su entirely, and it took significant convincing by the Russian government for it to end up retained. .io may have a lot of corporate interest backing it too, but it's no nation state. Regardless, I think we can agree this is a significant risk, the outcome of which is beyond any of our control. Impact to crates.io It's likely that nothing horrible is going to happen in the near term, given how slowly such processes progress. However practical issues may start to arise. For example, when Brexit happened, British citizens were no longer able to register or renew their .eu domains in a surprisingly short amount of time . And again, it's good to have some sort of long term plan regardless. 👍 3
======>
https://xnacly.me/posts/2024/rust-pldev/
-->>-->>
1 running 68 tests 2 test lexer::tests::should_pass::string::empty_string ... ok 3 test lexer::tests::should_pass::string::string ... ok 4 test lexer::tests::should_pass::string::string_with_ending ... ok 5 test lexer::tests::should_fail::empty_input::empty ... ok 6 test lexer::tests::should_fail::empty_input::empty_with_escaped ... ok 7 test lexer::tests::should_fail::empty_input::empty_with_space ... ok 8 9 test result: ok. 68 passed; 0 failed; 0 ignored; 0 measured; 0 filtered out; 10 finished in 0.00s
======>
https://old.reddit.com/r/rust/comments/1glpzdl/announcing_plotlars_071_were_back_with_deep/
-->>-->>
Hello Rustaceans!   

   After a long hiatus, I’m thrilled to announce that    Plotlars 0.7.1    is now released!   

   I’ve resumed the project with a deep refactoring. I believe Rust can be a great candidate for data science, but we have a long journey ahead to achieve it. This crate aims to reduce the complexity when making plots, making data visualization in Rust more accessible and straightforward.   

   🚀 New Features   

   
   Heat Maps   : We’ve added support for heat maps, enabling you to create color-coded representations of data matrices. Heat maps are perfect for visualizing data density, correlations, and patterns across two dimensions, making it easier to identify trends and anomalies in your datasets.   
   Scatter 3D Plots   : Introducing 3D scatter plots to Plotlars! Now you can visualize your data in three dimensions, providing a new perspective on relationships and clusters within your data. Rotate and zoom into your plots for an immersive data exploration experience.   
   

   A huge thank you to all of you for your continued support, contributions, and feedback. Your enthusiasm drives this project forward.   

   Explore the    updated documentation    and head over to the    GitHub repository    to see the new features in action. If you enjoy using Plotlars,    consider leaving a star ⭐️ on GitHub to help others discover the project    and support its ongoing development.   

   This project is a breakthrough that’s set to transform the field – share it to be part of the change!   

   Thank you for your support, and happy plotting! 🎉   
   

======>
https://old.reddit.com/r/rust/comments/1glwewo/paper_on_use_of_private_jets_done_in_rust/
-->>-->>
After one year of development and scientific process, the paper    Private aviation is making a growing contribution to climate change    is out.   

   The paper's core analysis was entirely done in Rust(!):    https://github.com/jorgecardleitao/private-jets   

   and is getting some press:   

   
   Associated Press   
   The Guardian   
   BBC   
   The times   
   National Geographic   
   

   Super happy to have chosen Rust for it - it was almost always "if it compiles, it is correct"!   
   

======>
https://blog.rust-lang.org/2024/11/07/gsoc-2024-results.html
-->>-->>
Rust Blog Rust Install Learn Tools Governance Community 🖌 Light Dark Google Summer of Code 2024 results Nov. 7, 2024 · Jakub Beránek, Jack Huey and Paul Lenz As we have previously announced , the Rust Project participated
in Google Summer of Code (GSoC) for the first time this year. Nine contributors have been tirelessly working on their exciting projects
for several months. The projects had various durations; some of them have ended in August, while the last one has been
concluded in the middle of October. Now that the final reports of all the projects have been submitted, we can happily
announce that all nine contributors have passed the final review! That means that we have deemed all of their projects to be successful,
even though they might not have fulfilled all of their original goals (but that was expected). We had a lot of great interactions with our GSoC contributors, and based on their feedback, it seems that they were also
quite happy with the GSoC program and that they had learned a lot. We are of course also incredibly grateful for all their
contributions - some of them have even continued contributing after their project has ended, which is really awesome.
In general, we think that Google Summer of Code 2024 was a success for the Rust Project, and we are looking forward to
participating in GSoC (or similar programs) again in the near future. If you are interested in becoming a (GSoC) contributor,
check out our project idea list . Below you can find a brief summary of each of our GSoC 2024 projects, including feedback
from the contributors and mentors themselves. You can find more information about the projects here . Adding lint-level configuration to cargo-semver-checks Contributor: Max Carr Mentor: Predrag Gruevski Final report cargo-semver-checks is a tool designed for automatically detecting semantic versioning conflicts, which is planned to one day become a part of Cargo itself. The goal of this project was to enable cargo-semver-checks to ship additional opt-in lints by allowing users to configure which lints run in which cases, and whether their findings are reported as errors or warnings. Max achieved this goal by implementing a comprehensive system for configuring cargo-semver-checks lints directly in the Cargo.toml manifest file. He also extensively discussed the design with the Cargo team to ensure that it is compatible with how other Cargo lints are configured, and won't present a future compatibility problem for merging cargo-semver-checks into Cargo. Predrag, who is the author of cargo-semver-checks and who mentored Max on this project, was very happy with his contributions that even went beyond his original project scope: He designed and built one of our most-requested features, and produced design prototypes of several more features our users would love. He also observed that writing quality CLI and functional tests was hard, so he overhauled our test system to make better tests easier to make. Future work on cargo-semver-checks will be much easier thanks to the work Max put in this summer. Great work, Max! Implementation of a faster register allocator for Cranelift Contributor: Demilade Sonuga Mentors: Chris Fallin and Amanieu d'Antras Final report The Rust compiler can use various backends for generating executable code. The main one is of course the LLVM backend, but there are other backends, such as GCC , .NET or Cranelift . Cranelift is a code generator for various hardware targets, essentially something similar to LLVM. The Cranelift backend uses Cranelift to compile Rust code into executable code, with the goal of improving compilation performance, especially for debug (unoptimized) builds. Even though this backend can already be faster than the LLVM backend, we have identified that it was slowed down by the register allocator used by Cranelift. Register allocation is a well-known compiler task where the compiler decides which registers should hold variables and temporary expressions of a program. Usually, the goal of register allocation is to perform the register assignment in a way that maximizes the runtime performance of the compiled program. However, for unoptimized builds, we often care more about the compilation speed instead. Demilade has thus proposed to implement a new Cranelift register allocator called fastalloc , with the goal of making it as fast as possible, at the cost of the quality of the generated code. He was very well-prepared, in fact he had a prototype implementation ready even before his GSoC project has started! However, register allocation is a complex problem, and thus it then took several months to finish the implementation and also optimize it as much as possible. Demilade also made extensive use of fuzzing to make sure that his allocator is robust even in the presence of various edge cases. Once the allocator was ready, Demilade benchmarked the Cranelift backend both with the original and his new register allocator using our compiler benchmark suite . And the performance results look awesome! With his faster register allocator, the Rust compiler executes up to 18% less instructions across several benchmarks, including complex ones like performing a debug build of Cargo itself. Note that this is an end-to-end performance improvement of the time needed to compile a whole crate, which is really impressive. If you would like to examine the results in more detail or even run the benchmark yourself, check out Demilade's final report , which includes detailed instructions on how to reproduce the benchmark. Apart from having the potential to speed up compilation of Rust code, the new register allocator can be also useful for other use-cases, as it can be used in Cranelift on its own (outside the Cranelift codegen backend). What can we can say other than we are very happy with Demilade's work! Note that the new register allocator is not yet available in the Cranelift codegen backend out-of-the-box, but we expect that it will eventually become the default choice for debug builds and that it will thus make compilation of Rust crates using the Cranelift backend faster in the future. Improve Rust benchmark suite Contributor: Eitaro Kubotera Mentor: Jakub Beránek Final report This project was relatively loosely defined, with the overarching goal of improving the user interface of the Rust compiler benchmark suite . Eitaro tackled this challenge from various angles at once. He improved the visualization of runtime benchmarks, which were previously a second-class citizen in the benchmark suite, by adding them to our dashboard and by implementing historical charts of runtime benchmark results, which help us figure out how is a given benchmark behaving over a longer time span. Another improvement that he has worked on was embedding a profiler trace visualizer directly within the rustc-perf website. This was a challenging task, which required him to evaluate several visualizers and figure out a way how to include them within the source code of the benchmark suite in a non-disruptive way. In the end, he managed to integrate Perfetto within the suite website, and also performed various optimizations to improve the performance of loading compilation profiles. Last, but not least, Eitaro also created a completely new user interface for the benchmark suite, which runs entirely in the terminal . Using this interface, Rust compiler contributors can examine the performance of the compiler without having to start the rustc-perf website, which can be challenging to deploy locally. Apart from the mentioned contributions, Eitaro also made a lot of other smaller improvements to various parts of the benchmark suite. Thank you for all your work! Move cargo shell completions to Rust Contributor: shanmu Mentor: Ed Page Final report Cargo's completion scripts have been hand maintained and frequently broken when changed. The goal for this effort was to have the completions automatically generated from the definition of Cargo's command-line, with extension points for dynamically generated results. shanmu took the prototype for dynamic completions in clap (the command-line parser used by Cargo), got it working and tested for common shells, as well as extended the parser to cover more cases. They then added extension points for CLI's to provide custom completion results that can be generated on the fly. In the next phase, shanmu added this to nightly Cargo and added different custom completers to match what the handwritten completions do. As an example, with this feature enabled, when you type cargo test --test= and hit the Tab key, your shell will autocomplete all the test targets in your current Rust crate! If you are interested, see the instructions for trying this out. The link also lists where you can provide feedback. You can also check out the following issues to find out what is left before this can be stabilized: clap#3166 cargo#14520 Rewriting esoteric, error-prone makefile tests using robust Rust features Contributor: Julien Robert Mentor: Jieyou Xu Final report The Rust compiler has several test suites that make sure that it is working correctly under various conditions. One of these suites is the run-make test suite , whose tests were previously written using Makefile s. However, this setup posed several problems . It was not possible to run the suite on the Tier 1 Windows MSVC target ( x86_64-pc-windows-msvc ) and getting it running on Windows at all was quite challenging. Furthermore, the syntax of Makefile s is quite esoteric, which frequently caused mistakes to go unnoticed even when reviewed by multiple people. Julien helped to convert the Makefile -based run-make tests into plain Rust-based tests, supported by a test support library called run_make_support . However, it was not a trivial "rewrite this in Rust" kind of deal. In this project, Julien: Significantly improved the test documentation; Fixed multiple bugs that were present in the Makefile versions that had gone unnoticed for years -- some tests were never testing anything or silently ignored failures, so even if the subject being tested regressed, these tests would not have caught that. Added to and improved the test support library API and implementation; and Improved code organization within the tests to make them easier to understand and maintain. Just to give you an idea of the scope of his work, he has ported almost 250 Makefile tests over the span of his GSoC project! If you like puns, check out the branch names of Julien's PRs, as they are simply fantestic . As a result, Julien has significantly improved the robustness of the run-make test suite, and improved the ergonomics of modifying existing run-make tests and authoring new run-make tests. Multiple contributors have expressed that they were more willing to work with the Rust-based run-make tests over the previous Makefile versions. The vast majority of run-make tests now use the Rust-based test infrastructure , with a few holdouts remaining due to various quirks. After these are resolved, we can finally rip out the legacy Makefile test infrastructure. Rewriting the Rewrite trait Contributor: SeoYoung Lee Mentor: Yacin Tmimi Final report rustfmt is a Rust code formatter that is widely used across the Rust ecosystem thanks to its direct integration within Cargo. Usually, you just run cargo fmt and you can immediately enjoy a properly formatted Rust project. However, there are edge cases in which rustfmt can fail to format your code. That is not such an issue on its own, but it becomes more problematic when it fails silently , without giving the user any context about what went wrong. This is what was happening in rustfmt , as many functions simply returned an Option instead of a Result , which made it difficult to add proper error reporting. The goal of SeoYoung's project was to perform a large internal refactoring of rustfmt that would allow tracking context about what went wrong during reformatting. In turn, this would enable turning silent failures into proper error messages that could help users examine and debug what went wrong, and could even allow rustfmt to retry formatting in more situations. At first, this might sound like an easy task, but performing such large-scale refactoring within a complex project such as rustfmt is not so simple. SeoYoung needed to come up with an approach to incrementally apply these refactors, so that they would be easy to review and wouldn't impact the entire code base at once. She introduced a new trait that enhanced the original Rewrite trait, and modified existing implementations to align with it. She also had to deal with various edge cases that we hadn't anticipated before the project started. SeoYoung was meticulous and systematic with her approach, and made sure that no formatting functions or methods were missed. Ultimately, the refactor was a success! Internally, rustfmt now keeps track of more information related to formatting failures, including errors that it could not possibly report before, such as issues with macro formatting. It also has the ability to provide information about source code spans, which helps identify parts of code that require spacing adjustments when exceeding the maximum line width. We don't yet propagate that additional failure context as user facing error messages, as that was a stretch goal that we didn't have time to complete, but SeoYoung has expressed interest in continuing to work on that as a future improvement! Apart from working on error context propagation, SeoYoung also made various other improvements that enhanced the overall quality of the codebase, and she was also helping other contributors understand rustfmt . Thank you for making the foundations of formatting better for everyone! Rust to .NET compiler - add support for compiling & running cargo tests Contributor: Michał Kostrubiec Mentor: Jack Huey Final report As was already mentioned above, the Rust compiler can be used with various codegen backends. One of these is the .NET backend , which compiles Rust code to the Common Intermediate Language (CIL), which can then be executed by the .NET Common Language Runtime (CLR). This backend allows interoperability of Rust and .NET (e.g. C#) code, in an effort to bring these two ecosystems closer together. At the start of this year, the .NET backend was already able to compile complex Rust programs, but it was still lacking certain crucial features. The goal of this GSoC project, implemented by Michał, who is in fact the sole author of the backend, was to extend the functionality of this backend in various areas. As a target goal, he set out to extend the backend so that it could be used to run tests using the cargo test command. Even though it might sound trivial, properly compiling and running the Rust test harness is non-trivial, as it makes use of complex features such as dynamic trait objects, atomics, panics, unwinding or multithreading. These features were especially tricky to implement in this codegen backend, because the LLVM intermediate representation (IR) and CIL have fundamental differences, and not all LLVM intrinsics have .NET equivalents. However, this did not stop Michał. He has been working on this project tirelessly, implementing new features, fixing various issues and learning more about the compiler's internals every new day. He has also been documenting his journey with (almost) daily updates on Zulip , which were fascinating to read. Once he has reached his original goal, he moved the goalpost up to another level and attempted to run the compiler's own test suite using the .NET backend. This helped him uncover additional edge cases and also led to a refactoring of the whole backend that resulted in significant performance improvements. By the end of the GSoC project, the .NET backend was able to properly compile and run almost 90% of the standard library core and std test suite. That is an incredibly impressive number, since the suite contains thousands of tests, some of which are quite arcane . Michał's pace has not slowed down even after the project has ended and he is still continuously improving the backend. Oh, and did we already mention that his backend also has experimental support for emitting C code, effectively acting as a C codegen backend?! Michał has been very busy over the summer. We thank Michał for all his work on the .NET backend, as it was truly inspirational, and led to fruitful discussions that were relevant also to other codegen backends. Michał's next goal is to get his backend upstreamed and create an official .NET compilation target, which could open up the doors to Rust becoming a first-class citizen in the .NET ecosystem. Sandboxed and deterministic proc macro using WebAssembly Contributor: Apurva Mishra Mentor: David Lattimore Final report Rust procedural (proc) macros are currently run as native code that gets compiled to a shared object which is loaded directly into the process of the Rust compiler. Because of this design, these macros can do whatever they want, for example arbitrarily access the filesystem or communicate through a network. This has not only obvious security implications, but it also affects performance, as this design makes it difficult to cache proc macro invocations. Over the years, there have been various discussions about making proc macros more hermetic , for example by compiling them to WebAssembly modules, which can be easily executed in a sandbox. This would also open the possibility of distributing precompiled versions of proc macros via crates.io, to speed up fresh builds of crates that depend on proc macros. The goal of this project was to examine what would it take to implement WebAssembly module support for proc macros and create a prototype of this idea. We knew this would be a very ambitious project, especially since Apurva did not have prior experience with contributing to the Rust compiler, and because proc macro internals are very complex. Nevertheless, some progress was made. With the help of his mentor, David, Apurva was able to create a prototype that can load WebAssembly code into the compiler via a shared object. Some work was also done to make use of the existing TokenStream serialization and deserialization code in the compiler's proc_macro crate. Even though this project did not fulfill its original goals and more work will be needed in the future to get a functional prototype of WebAssembly proc macros, we are thankful for Apurva's contributions. The WebAssembly loading prototype is a good start, and Apurva's exploration of proc macro internals should serve as a useful reference for anyone working on this feature in the future. Going forward, we will try to describe more incremental steps for our GSoC projects, as this project was perhaps too ambitious from the start. Tokio async support in Miri Contributor: Tiffany Pek Yuan Mentor: Oli Scherer Final report miri is an intepreter that can find possible instances of undefined behavior in Rust code. It is being used across the Rust ecosystem, but previously it was not possible to run it on any non-trivial programs (those that ever await on anything) that use tokio , due a to a fundamental missing feature: support for the epoll syscall on Linux (and similar APIs on other major platforms). Tiffany implemented the basic epoll operations needed to cover the majority of the tokio test suite, by crafting pure libc code examples that exercised those epoll operations, and then implementing their emulation in miri itself. At times, this required refactoring core miri components like file descriptor handling, as they were originally not created with syscalls like epoll in mind. Suprising to everyone (though probably not tokio-internals experts), once these core epoll operations were finished, operations like async file reading and writing started working in miri out of the box! Due to limitations of non-blocking file operations offered by operating systems, tokio is wrapping these file operations in dedicated threads, which was already supported by miri. Once Tiffany has finished the project, including stretch goals like implementing async file operations, she proceeded to contact tokio maintainers and worked with them to run miri on most tokio tests in CI. And we have good news: so far no soundness problems have been discovered! Tiffany has become a regular contributor to miri, focusing on continuing to expand the set of supported file descriptor operations. We thank her for all her contributions! Conclusion We are grateful that we could have been a part of the Google Summer of Code 2024 program, and we would also like to extend our gratitude to all our contributors! We are looking forward to joining the GSoC program again next year. Get help! Documentation Contact the Rust Team Terms and policies Code of Conduct Licenses Logo Policy and Media Guide Security Disclosures All Policies Social RSS Main Blog "Inside Rust" Blog Maintained by the Rust Team. See a typo? Send a fix here !
======>
https://rust-gpu.github.io/blog/2024/11/06/new-maintainers
-->>-->>
Recent posts 2024 Welcoming two new Rust GPU maintainers Rust GPU Transitions to Community Ownership Welcoming two new Rust GPU maintainers November 6, 2024 · 3 min read Schell Carl Scivally Rust GPU and Renderling maintainer Firestar99 Rust GPU maintainer finishing his master thesis We’re thrilled to introduce two new maintainers for the Rust GPU project: Schell
Scivally and Firestar99 . Both bring experience in graphics programming, a deep understanding of Rust, and a
passion for advancing GPU computing. Here’s a bit more about each of them in their own words: Meet Schell Scivally ​ I'm Schell Scivally, a game and graphics programmer living on the South Island of New
Zealand 🇳🇿🌴 with my partner and our two kids. By day, I work at Narrative.so , where I use AI to streamline
photographers' culling and editing. Before moving here, I was a Haskell programmer in
the Bay Area of California. I’m also an NLNet grantee working on Renderling, a cross-platform
GPU-driven renderer that runs on WebGPU. You can check it out at renderling.xyz . I use rust-gpu to debug shaders on the CPU while keeping all the benefits of Rust’s
development experience. It lets me shift a lot of work from the CPU to the GPU without
having to change or duplicate types! I’d love to see rust-gpu grow, get more
contributors, and become the foundation for a thriving shader ecosystem on crates.io. Meet Firestar99 ​ I go as Firestar99 online and am a graphics programmer and master's student from
Germany 🇩🇪. Currently, I'm in the process of finishing off my master’s degree with a thesis about
replicating UE5's Nanite in a custom engine written in rust. For those unfamiliar,
Nanite is a new approach to generate and render models with levels of details (LOD),
being the first to allow a single instance of a mesh to transition smoothly from
higher to lower levels of detail as it gets further away from the camera, without any
visible holes or seams in the model. In the context of rust, you may have heard of bevy implementing it as
well . And of course I'm using rust-gpu for my shaders! By far the most important feature to
me is the ability to share datastructures across GPU and CPU code, which allows me to
preprocess my models in a seconds long offline bake directly into the GPU
representation, enabling me to load even the most complex models like bistro in half a second. On the way there I've made various additions to rust-gpu like Mesh
shaders , subgroup
intrinsics and reworking ByteAddressableBuffer as well as
rebasing a lot of existing PRs. In the future, I hope to be able to contribute my
bindless API specifically designed for rust-gpu and find a job in the industry,
hopefully associated with the project. Please join us in welcoming them to the team! Thanks to our new maintainers, Rust GPU
now has four official maintainers. We’re eager to add more users and contributors to Rust GPU and will be working on
revamping the onboarding and documentation soon. To follow along or get involved,
check out the rust-gpu repo on GitHub . Tags: announcement leadership Edit this page Older post Rust GPU Transitions to Community Ownership Meet Schell Scivally Meet Firestar99
