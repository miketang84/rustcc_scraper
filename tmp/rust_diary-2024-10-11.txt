https://github.com/vincent-herlemont/native_db_tauri_vanilla
-->>-->>
Repository files navigation README Native DB + Tauri V2 + Vanilla This is a simple example of a Tauri app using a native_db . Key points: Define an api: 1 model Person with 2 versions, source lib.rs#L8-L51 . Use native_db as a Tauri managed state , source lib.rs#L61-L85 . Migrate the database during the app setup, source lib.rs#L115-L122 . How to use it? It's super simple: Prerequisites: Have Rust and Cargo installed curl --proto '=https' --tlsv1.2 -sSf https://sh.rustup.rs | sh Have Tauri CLI installed cargo install tauri-cli Clone the repository git clone https://github.com/vincent-herlemont/native_db_tauri_vanilla.git # Navigate to the project folder cd native_db_tauri_vanilla/ Run the project cargo tauri dev There you go!
======>
https://github.com/vincent-herlemont/native_db/tree/main/benches
-->>-->>
Breadcrumbs native_db / benches / Directory actions More options Directory actions More options Latest commit History History Breadcrumbs native_db / benches / Top Folders and files Name Name Last commit message Last commit date parent directory .. results results README.md README.md all.rs all.rs result.json result.json setup.rs setup.rs View all files README.md Benchmarks Table of Contents Overview Benchmark Results Insert Get Select Range Secondary Key Delete Overview ⚠️ This benchmark is an initial version and it can certainly be greatly improved to make the results as relevant as possible. Feel free to open issues to improve it. 👉 Native DB will be further improved in the future as performance issues have not yet been addressed. That is indeed the purpose of this benchmark, which is to provide visibility on what needs to be improved. Comparison between Native DB vs Redb vs SQLite Why compare with Redb ? To highlight the Native DB overhead, because Redb is the backend of Native DB , it should "normally" always be faster than Native DB . Why compare with SQLite ? Because even though SQLite offers a lot more options, Native DB can be seen as a very light alternative to SQLite . And the other databases? Knowing the capabilities of Native DB compared to Redb with the benchmark below, you can check the benchmark of redb here: cberner/redb/benchmarks The benchmarks ignore: native_model overhead. Serialization overhead used by native_model like bincode , postcard etc. The fact that redb can write the data using zero-copy. Explanation: 1:SK , 10:SK , 50:SK , 100:SK , N:SK in this case N is the number of secondary keys ( SK ) for the same data. Regarding SQLite, it is the column with each having a secondary index. 1:T , n:T represent the number of operations per transaction. 1:T means one operation per transaction, for example, for insertion, it means there is only one insert operation per transaction. n:T means n operations per transaction, n is defined by criterion , meaning that all operations are within a single transaction. We can see that Redb sometimes has no comparisons ( N/A ) because Redb is a key-value database and does not support secondary indexes. Therefore, it is pointless to compare with more or fewer secondary indexes. Benchmark Results Insert Native_db Redb Sqlite 1:SK with n:T 3.91 us (✅ 1.00x ) 960.85 ns (🚀 4.07x faster ) 1.11 us (🚀 3.53x faster ) 1:SK with 1:T 4.39 ms (✅ 1.00x ) 4.15 ms (✅ 1.06x faster ) 477.93 us (🚀 9.19x faster ) 10:SK with n:T 24.20 us (✅ 1.00x ) N/A 2.67 us (🚀 9.07x faster ) 10:SK with 1:T 4.39 ms (✅ 1.00x ) N/A 496.44 us (🚀 8.85x faster ) 50:SK with n:T 114.81 us (✅ 1.00x ) N/A 12.74 us (🚀 9.01x faster ) 50:SK with 1:T 5.69 ms (✅ 1.00x ) N/A 525.59 us (🚀 10.83x faster ) 100:SK with n:T 226.27 us (✅ 1.00x ) N/A 36.28 us (🚀 6.24x faster ) 100:SK with 1:T 6.81 ms (✅ 1.00x ) N/A 557.70 us (🚀 12.20x faster ) Get Native_db Redb Sqlite 1:SK 783.99 ns (✅ 1.00x ) 455.76 ns (✅ 1.72x faster ) 1.39 us (❌ 1.77x slower ) 10:SK 1.80 us (✅ 1.00x ) N/A 2.49 us (❌ 1.38x slower ) 50:SK 9.23 us (✅ 1.00x ) N/A 14.72 us (❌ 1.60x slower ) 100:SK 20.74 us (✅ 1.00x ) N/A 34.11 us (❌ 1.65x slower ) Select Range Secondary Key Native_db Sqlite 1:SK value range 1.48 ms (✅ 1.00x ) 671.05 us (🚀 2.21x faster ) 10:SK value range 1.61 ms (✅ 1.00x ) 1.03 ms (✅ 1.56x faster ) 50:SK value range 2.89 ms (✅ 1.00x ) 3.63 ms (❌ 1.25x slower ) 100:SK value range 4.17 ms (✅ 1.00x ) 6.88 ms (❌ 1.65x slower ) 1:SK random range 1.66 ms (✅ 1.00x ) 725.59 us (🚀 2.29x faster ) 10:SK random range 1.78 ms (✅ 1.00x ) 1.10 ms (✅ 1.62x faster ) 50:SK random range 3.45 ms (✅ 1.00x ) 3.85 ms (❌ 1.12x slower ) 100:SK random range 4.45 ms (✅ 1.00x ) 7.16 ms (❌ 1.61x slower ) Delete ⚠️ We can see that when all operations are in a single transaction ( n:T ), Native DB has a huge overhead. An issue has been created to resolve this problem #256 . Native_db Redb Sqlite 1:SK with n:T 4.26 us (✅ 1.00x ) 876.24 ns (🚀 4.86x faster ) 813.67 ns (🚀 5.24x faster ) 1:SK with 1:T 4.20 ms (✅ 1.00x ) 4.13 ms (✅ 1.02x faster ) 546.21 us (🚀 7.70x faster ) 10:SK with n:T 25.64 us (✅ 1.00x ) N/A 980.08 ns (🚀 26.16x faster ) 10:SK with 1:T 5.01 ms (✅ 1.00x ) N/A 576.22 us (🚀 8.70x faster ) 50:SK with n:T 133.34 us (✅ 1.00x ) N/A 1.48 us (🚀 90.36x faster ) 50:SK with 1:T 5.82 ms (✅ 1.00x ) N/A 538.47 us (🚀 10.81x faster ) 100:SK with n:T 259.50 us (✅ 1.00x ) N/A 2.17 us (🚀 119.86x faster ) 100:SK with 1:T 6.89 ms (✅ 1.00x ) N/A 415.64 us (🚀 16.58x faster ) Made with criterion-table
======>
https://github.com/Snowiiii/Pumpkin
-->>-->>
Repository files navigation README Code of conduct MIT license Pumpkin Pumpkin is a Minecraft server built entirely in Rust, offering a fast, efficient,
and customizable experience. It prioritizes performance and player enjoyment while adhering to the core mechanics of the game. What Pumpkin wants to achieve Performance : Leveraging multi-threading for maximum speed and efficiency. Compatibility : Supports the latest Minecraft server version and adheres to vanilla game mechanics. Security : Prioritizes security by preventing known exploits. Flexibility : Highly configurable with the ability to disable unnecessary features. Extensibility : Provides a foundation for plugin development. What Pumpkin will not Provide compatibility with Vanilla or Bukkit servers (including configs and plugins). Function as a framework for building a server from scratch. Important Pumpkin is currently under heavy development. Features (WIP) Configuration (toml) Server Status/Ping Login Player Configuration Registries (biome types, paintings, dimensions) Server Brand Server Links Set Resource Pack Cookies World World Joining Player Tab-list World Loading Entity Spawning Chunk Loading World Generation Chunk Generation World Borders World Saving Player Player Skins Player Client brand Player Teleport Player Movement Player Animation Player Inventory Player Combat Server Plugins Query RCON Inventories Particles Chat Commands Proxy Velocity Check out our Github Project to see current progress How to run See https://snowiiii.github.io/Pumpkin/about/quick-start.html Contributions Contributions are welcome! See CONTRIBUTING.md Docs The Documentation of Pumpkin can be found at https://snowiiii.github.io/Pumpkin/ Communication Consider joining our discord to stay up-to-date on events, updates, and connect with other members. Funding If you want to fund me and help the project, Check out my GitHub sponsors Thanks A big thanks to wiki.vg for providing valuable information used in the development of this project.
======>
https://futurism.com/the-byte/ai-programming-assistants-code-error
-->>-->>
Oct 2, 2:12 PM EDT by Sharon Adarlo / Artificial Intelligence Code Breakers There’s a Problem WIth AI Programming Assistants: They’re Inserting Far More Errors Into Code by Sharon Adarlo AI tools may actually create more work for coders, not less. Oct 2, 2:12 PM EDT Getty / Futurism AI tools may actually create more work for coders, not less. We Regret the Error Proponents of generative AI have claimed that the technology can make human workers more productive , especially when it comes to writing computer code . But does it really? A recent report conducted by coding management software business Uplevel, first spotted by IT magazine CIO , indicates that engineers who use GitHub's popular AI programming assistant Copilot don't experience any significant gains in efficiency. If anything, the study says usage of Copilot results in 41 percent more errors being inadvertently entered into code. For the study, Uplevel tracked the performance of 800 developers for three months before they got access to Copilot. After they got Copilot, Uplevel tracked them once again for another three months. To measure their performance, Uplevel examined the time it took for the developers to merge code into a repository, otherwise known as a pull request , and how many requests they put through. Uplevel found that "Copilot neither helped nor hurt the developers in the sample and also did not increase coding speed." "Our team’s hypothesis was that we thought that PR cycle time would decrease," Uplevel product manager and data analyst Matt Hoffman told CIO . "We thought that they would be able to write more code, and we actually thought that defect rate might go down because you’re using these gen AI tools to help you review your code before you even get it out there." Spin Cycle All this information is not so surprising when you realize that GitHub Copilot is centered around large language models (LLM), which are often prone to hallucinating false information and spitting out incorrect data . Another recent study led by University of Texas at San Antonio researchers found that large language models can generate a significant number of "hallucination packages," or code that "recommends or contains a reference" to files or code that doesn't exist. Tech leaders are starting to get worried that making use of AI-generated code may actually end up being more work. "It becomes increasingly more challenging to understand and debug the AI-generated code, and troubleshooting becomes so resource-intensive that it is easier to rewrite the code from scratch than fix it," software development firm Gehtsoft CEO Ivan Gekht told CIO . More on AI: Cops Say Hallucinating AIs Are Ready to Write Police Reports That Could Send People to Prison Share This Article Not This Facebook Is Being Flooded With Gross AI-Generated Images of Hurricane Helene Devastation Oct 1, 3:56 PM EDT Read More Faster and Cheaper What's Up With Those Sloppy AI-Generated Tattoo Posters in New York City? Oct 1, 10:50 AM EDT Read More Cracked Mirror Desperate Republicans Using AI to Generate Fake Photos of Donald Trump Saving Kittens Sep 9, 5:50 PM EDT Read More Oct 2, 2:12 PM EDT by Sharon Adarlo / Artificial Intelligence Code Breakers There’s a Problem WIth AI Programming Assistants: They’re Inserting Far More Errors Into Code by Sharon Adarlo AI tools may actually create more work for coders, not less. Oct 2, 2:12 PM EDT Getty / Futurism AI tools may actually create more work for coders, not less. We Regret the Error Proponents of generative AI have claimed that the technology can make human workers more productive , especially when it comes to writing computer code . But does it really? A recent report conducted by coding management software business Uplevel, first spotted by IT magazine CIO , indicates that engineers who use GitHub's popular AI programming assistant Copilot don't experience any significant gains in efficiency. If anything, the study says usage of Copilot results in 41 percent more errors being inadvertently entered into code. For the study, Uplevel tracked the performance of 800 developers for three months before they got access to Copilot. After they got Copilot, Uplevel tracked them once again for another three months. To measure their performance, Uplevel examined the time it took for the developers to merge code into a repository, otherwise known as a pull request , and how many requests they put through. Uplevel found that "Copilot neither helped nor hurt the developers in the sample and also did not increase coding speed." "Our team’s hypothesis was that we thought that PR cycle time would decrease," Uplevel product manager and data analyst Matt Hoffman told CIO . "We thought that they would be able to write more code, and we actually thought that defect rate might go down because you’re using these gen AI tools to help you review your code before you even get it out there." Spin Cycle All this information is not so surprising when you realize that GitHub Copilot is centered around large language models (LLM), which are often prone to hallucinating false information and spitting out incorrect data . Another recent study led by University of Texas at San Antonio researchers found that large language models can generate a significant number of "hallucination packages," or code that "recommends or contains a reference" to files or code that doesn't exist. Tech leaders are starting to get worried that making use of AI-generated code may actually end up being more work. "It becomes increasingly more challenging to understand and debug the AI-generated code, and troubleshooting becomes so resource-intensive that it is easier to rewrite the code from scratch than fix it," software development firm Gehtsoft CEO Ivan Gekht told CIO . More on AI: Cops Say Hallucinating AIs Are Ready to Write Police Reports That Could Send People to Prison Share This Article
======>
https://github.com/cessen/tenthash/blob/main/docs/specification.md
-->>-->>
TentHash Specification v0.4 This document defines the TentHash hash function.  It aims to be concise and easy to follow for anyone writing an implementation of TentHash.  It does not explain the rationale behind TentHash's design.  For that, please see the Design Rationale document . NOTE: although it is likely that this version of the spec will become TentHash's final specification, there is still a chance it could change if issues are discovered before it is declared final.  When it is declared final, the version number will be removed, and after that point only changes that do not alter the hash output (such as clarifications and better prose) will be made. Overview This is the general hashing procedure: fn do_hash(input_data):
    hash_state = [A, B, C, D] # Process input data. for each block in input_data:
        hash_state ^= block
        mix hash_state # Finalize. hash_state[0] ^= input_data_length_in_bits
    mix hash_state # Once. mix hash_state # Twice. return first 160 bits of hash_state Details of each step are specified below. Details Hash state. The internal hash state consists of four 64-bit unsigned integers, short-hand labeled A , B , C , and D in this document.  Before hashing starts, the hash state is initialized to the following values: A = 0x5d6daffc4411a967 B = 0xe22d4dea68577f34 C = 0xca50864d814cbc2e D = 0x894e29b9611eb173 Xoring the input data. Input data is processed in 256-bit blocks. If the last block is less than 256 bits, it is padded out to 256 bits with zeros and then processed as normal. Each block of data is treated as four 64-bit little-endian unsigned integers and is xored into the hash state as follows: A ^= block[bits 0-63]
B ^= block[bits 64-127]
C ^= block[bits 128-191]
D ^= block[bits 192-255] Xoring the input length. Once all input data has been processed, the length of the input data in bits (not bytes) is xored as an unsigned integer into the A component of the hash state: A ^= data_length_in_bits Note: conforming implementations of TentHash are not required to handle data streams longer than 2 64 -1 bits.  However, implementations that wish to do so must wrap data_length_in_bits when exceeding 2 64 -1.  Or in other words, A should be xored with the data length in bits modulo 2 64 . Mixing the hash state. The mixing function is defined as follows: rotation_constants = [
    [16, 28], [14, 57], [11, 22], [35, 34],
    [57, 16], [59, 40], [44, 13],
]

fn mix(hash_state):
    for pair in rotation_constants:
        A += C
        B += D
        C = (C <<< pair[0]) ^ A
        D = (D <<< pair[1]) ^ B
        swap(A, B) Where <<< is a bit-wise left rotation and addition is modulo 2 64 . As shown in the overview at the beginning of this document, the hash state is mixed once after xoring each input block and twice during finalization. Producing the digest. The output digest is simply the first 160 bits of the hash state as an array of bytes.  It starts with the least significant byte of A and proceeds in order from there.  Only four bytes of C are included and no bytes of D . TentHash does not mandate a particular printable representation of the digest.  But if a printable digest is desired then by convention it follows the same procedure as most hashes: each byte of the digest is printed in turn as its unsigned numerical hex value. For example, a digest of [10, 212, 156, ...] would be printed as 0ad49c... . Test Vectors Test inputs and their corresponding TentHash digests: Empty (no input data): 68c8213b7a76b8ed267dddb3d8717bb3b6e7cc0a , A single zero byte: 3cf6833cca9c4d5e211318577bab74bf12a4f090 , The ascii string "0123456789": a7d324bde0bf6ce3427701628f0f8fc329c2a116 , The ascii string "abcdefghijklmnopqrstuvwxyz": f1be4be1a0f9eae6500fb2f6b64f3daa3990ac1a , The ascii string "The quick brown fox jumps over the lazy dog.": de77f1c134228be1b5b25c941d5102f87f3e6d39 ,

======>
https://github.com/cessen/tenthash
-->>-->>
Repository files navigation README TentHash v0.4 A robust 160-bit non-cryptographic hash function. TentHash Specification v0.4 NOTE: although it is likely that this will become TentHash's final specification, there is still a chance it could change if issues are discovered before it is declared final. Design Rationale Document TentHash is a high-quality, reasonably fast, large-output hash.  Its target applications are data fingerprinting, content-addressable systems, and other use cases that don't tolerate hash collisions. Importantly, TentHash is explicitly not intended to stand up to attacks.  Its robustness against collisions is only meaningful under non-adversarial conditions.  In other words, like a good tent, it will protect you from the elements, but will do very little to protect you from attackers. Also like a good tent, it is compact (a full implementation is around 50 lines of straightforward code) and you can take it anywhere (no special hardware instructions needed). Why yet another hash? TentHash was born out of a desire for a hash that fulfilled all of the following criteria: Robust against collisions. For all practical purposes, it should be safe to assume that different pieces of (non-malicious) data will never have colliding hashes. Simple and portable. It should be easy to understand and straightforward to write conforming (and performant) implementations, without need for special hardware instructions. Documented & justified design. Its design should be properly documented, along with the rationale justifying that design.  People shouldn't have to guess at the rationale, and they shouldn't have to wade through sprawling, obtuse source code to figure out how to write an independent implementation. Reasonably fast. It doesn't need to win any speed competitions, but its speed should be measured in GB/sec, not MB/sec, on typical hardware. When I started work on TentHash I was unable to find any hashes that met all four of these criteria, and TentHash aims to fill that gap. Comparison with other hashes. The table below is a comparison of TentHash to a selection of other hashes with outputs large enough to be used as data fingerprints.  Some cryptographic hashes are also included at the bottom for reference. The "blocks per full diffusion" column is a partial indicator of hash quality, with 1 block being optimal and more blocks (typically) being worse. 1 Data throughput was measured single-threaded on an AMD Ryzen 5 7640U.  TentHash's throughput was measured using its Rust implementation, and the other hashes using their implementations in SMHasher . Name Output size Data throughput 2 Blocks per full diffusion 1 Documented design rationale TentHash 160 bits 3 9.0 GB/s 1 block Yes - xxHash3 (128-bit) 128 bits 56.0 GB/s Never No MeowHash v0.5 128 bits 50.5 GB/s ~6 blocks No 4 MetroHash128 128 bits 20.4 GB/s ~22 blocks No CityHash128 / FarmHash128 5 128 bits 17.5 GB/s ~3 blocks No Murmur3 (x64 128-bit) 128 bits 8.2 GB/s ~6 blocks No FNV-1a (128-bit) 128 bits 0.46 GB/s Never No - SHA2-256 256 bits 0.3 GB/s - Yes Blake2b 256 bits 0.74 GB/s - Yes Blake3 (SSE2) 256 bits 1.9 GB/s 6 - Yes Aside from TentHash, none of the listed non-cryptographic hashes appear to be conservative about quality, pending design rationale documents that show otherwise.  They may be fine, but it's hard to say.  Due to the enormous state space at these hash sizes, passing empirical test suites (such as SMHasher) is insufficient evidence of quality. TentHash is the only non-cryptographic hash in the list that is unambiguously conservative about quality, and which can confidently be used in situations that can't tolerate collisions.  It's also the only non-cryptographic hash in the list that publishes a full design rationale for auditing and critique. In those respects, TentHash is better compared to the cryptographic hashes in the list.  TentHash is, of course, in no way cryptographically secure.  But for use cases where that isn't needed, TentHash compares favorably while being both faster and substantially simpler to implement and port. Not listed in the comparison table are hashes like UMASH and HalftimeHash, which are non-cryptographic but have provable bounds on their collision probabilities.  Such hashes are an excellent contribution to the world of hashing, and have many applications.  However, their collision probabilities (usually around 2 -70 to 2 -80 for a single pair of hashes) are insufficient for use cases like content addressable systems due to the birthday paradox.  These kinds of hashes also tend to be somewhat complex to implement and/or require special hardware instructions. License This project is licensed under either of MIT license (licenses/MIT.txt or https://opensource.org/licenses/MIT ) Apache License, Version 2.0, (licenses/APACHE-2.0.txt or https://www.apache.org/licenses/LICENSE-2.0 ) at your option. The files under docs/ are additionally released under Creative Commons Zero (licenses/CC0.txt or https://creativecommons.org/publicdomain/zero/1.0/legalcode ) Contributing Contributions are absolutely welcome!  Especially (but not limited to): Audits of the hash design for (non-cryptographic) weaknesses. Implementations of the current specification in other programming languages. Unless you explicitly state otherwise, any contribution intentionally submitted for inclusion in this project by you will be licensed as above (MIT/Apache/CC0), without any additional terms or conditions. Footnotes "Blocks per full diffusion" means the number of input blocks that must be processed before the mixing/absorption component of the hash diffuses the hash state enough to reach the output size of the hash. This is an incomplete measure of quality both in the sense that it's insufficient on its own to assert quality and in the sense that (due to being a simplistic measure of a single internal component) a hash can be conservative about quality without meeting the "ideal" of 1 block, depending on its design.  Additionally, this measure isn't fully applicable to hashes like FNV that don't process data in blocks (although in FNV's case it never fully diffuses anyway).  So the results in the table should be interpreted carefully. The testing for this measure was done via the supplementary code from Hash Design and Goodhart's Law , in case you want to verify the work or see how it was computed for the various hashes. ↩ ↩ 2 The data throughput listed does not reflect small-input performance, because TentHash's target use case is data identification/fingerprinting rather than hash maps.  TentHash's data throughput is relatively worse on small inputs. ↩ For non-cryptographic hashes, a 160-bit output is unlikely to be meaningfully better than 128-bit in most applications.  Its listing is just for completeness.  See the design rationale document for how TentHash ended up at 160 bits. ↩ MeowHash is still a work in progress, and thus insofar as it isn't yet recommending itself for real use, lacking a design rationle document doesn't yet count against it. ↩ CityHash128 and FarmHash128 are listed together because they use exactly the same construction for at least the part of the hash relevant to the diffusion metric, and also have the same data throughput.  (I think they're even just identical hashes, but I haven't bothered to properly confirm that.) ↩ This is the speed of Blake3 in SMHasher, which by default only builds it with SSE2.  The official implementation of Blake3 can reach up to 7 GB/sec, depending on build flags.  Those higher speeds are achieved via wider SIMD instructions and hand-written assembly. ↩
======>
https://old.reddit.com/r/rust/comments/1g1oczx/i_think_rust_needs_some_sort_of_limited/
-->>-->>
Yes, I'm bracing for impact after posting a title like that haha.   

   Perhaps 'inheritance' is the wrong word here and a more accurate statement would be something like 'trait implementation delegation'   

   I was recently building a project on top of a very modular library that's almost entirely built using 100s of traits which is awesome! My goal was to take an existing implementation of this library, and only slightly modify a couple of its trait implementations.    

   Suppose we have traits    A   ,    B   ,    C   , .... And there is another crate with a primary type we'll call    Other    which implements all of those traits. Now I need to create a new type    MyType(Other)    which behaves exactly the same as    Other    except of its implementation of    A   .   

   I've now got to implements all    N    traits for    MyType    even though they all just default to the inner type. This sounds like not the end of the world, but in this particular example it was literally over 1000 lines of code to implement all the traits.   

   Perhaps some new syntax is warranted for types like this which automatically delegate all trait implementations to the inner type except for methods that are explicitly overridden. Something like this maybe   

   rust
// This is in the upstream crate
trait DoSomethingCool: A + B + C {
    fn do_something_cool(&self) { .. }
}
   

   ```rust
// If a trait is not explicitly defined for MyType, The implementation
// for 'Other' will be used
stuct MyType(delegate Other)     

   // Here's how it could look with named fields
stuct MyTypeAlt {
    pub delegate inner: Other,
    pub other_field: String, 
}     

   // This overrides the implementation of A for Other
impl A for MyType {
   ...
}
```   

   rust
// now we can use our new type like this
let my_struct = MyStruct(other);
my_struct.do_something_cool();
   
   

======>
https://old.reddit.com/r/rust/comments/1g1x2a1/native_db_release_080_benchmarks_vs_sqlite_redb/
-->>-->>
I am excited to announce the launch of Native DB version 0.8.0 (see    changelog 0.8.0   ), which brings significant bug fixes, new features, and    initial benchmarks    comparing it to SQLite. While the benchmarks were conducted in a basic manner, we plan to refine them further and welcome your feedback in the issues. Additionally, several issues are marked with the "help wanted" label for those interested in contributing ❤️   

   Note: The example with Tauri has been updated, using Tauri V2 see    native_db_tauri_vanilla   .   

   Btw, wishing you a fantastic weekend!   
   

======>
https://github.com/niklak/dom_query
-->>-->>
Repository files navigation README MIT license DOM_QUERY A crate for HTML querying and manipulations with CSS selectors. DOM_QUERY is based on HTML crate html5ever and the CSS selector crate selectors. You can use the jQuery-like syntax to query and manipulate an HTML document quickly. With its help you can query dom and modify it. It is a fork of nipper , with some updates. Also this fork supports :has , :has-text , :contains pseudo-classes, and some others. Examples Parsing a document use dom_query :: Document ; use tendril :: StrTendril ; // Document may consume &str, String, StrTendril let contents_str = r#"<!DOCTYPE html> <html><head><title>Test Page</title></head><body></body></html>"# ; let doc = Document :: from ( contents_str ) ; let contents_string = contents_str . to_string ( ) ; let doc = Document :: from ( contents_string ) ; let contents_tendril = StrTendril :: from ( contents_str ) ; let doc = Document :: from ( contents_tendril ) ; // The root element for the `Document` is a Document assert ! ( doc.root ( ) .is_document ( ) ) ; // if the source has DocType, then the Document will also have one // as a first child. assert ! ( doc.root ( ) .first_child ( ) .unwrap ( ) .is_doctype ( ) ) ; //both of them are not elements. Parsing a fragment use dom_query :: Document ; use tendril :: StrTendril ; // fragment can be created with Document::fragment(), which accepts &str, String, StrTendril let contents_str = r#"<!DOCTYPE html> <html><head><title>Test Page</title></head><body></body></html>"# ; let fragment = Document :: fragment ( contents_str ) ; let contents_string = contents_str . to_string ( ) ; let fragment = Document :: fragment ( contents_string ) ; let contents_tendril = StrTendril :: from ( contents_str ) ; let fragment = Document :: fragment ( contents_tendril ) ; // The root element for the  fragment is not a Document but a Fragment assert ! ( !fragment.root ( ) .is_document ( ) ) ; assert ! ( fragment.root ( ) .is_fragment ( ) ) ; // and when it parses a fragment, it drops Doctype assert ! ( !fragment.root ( ) .first_child ( ) .unwrap ( ) .is_doctype ( ) ) ; Selecting elements use dom_query :: Document ; let html = r#"<!DOCTYPE html> <html> <head> <meta charset="utf-8"> <title>Test Page</title> </head> <body> <h1>Test Page</h1> <ul> <li>One</li> <li><a href="/2">Two</a></li> <li><a href="/3">Three</a></li> </ul> </body> </html>"# ; let document = Document :: from ( html ) ; // select a single element let a = document . select ( "ul li:nth-child(2)" ) ; let text = a . text ( ) . to_string ( ) ; assert ! ( text == "Two" ) ; // selecting multiple elements document . select ( "ul > li:has(a)" ) . iter ( ) . for_each ( |el| { assert ! ( el.is ( "li" ) ) ; } ) // there is also `try_select` which returns an Option let no_sel = document . try_select ( "p" ) ; assert ! ( no_sel.is_none ( ) ) ; Selecting a single match and multiple matches use dom_query :: Document ; let doc : Document = r#"<!DOCTYPE html> <html lang="en"> <head></head> <body> <ul class="list"> <li>1</li><li>2</li><li>3</li> </ul> <ul class="list"> <li>4</li><li>5</li><li>6</li> </ul> </body> </html>"# . into ( ) ; // if you need to select only the first, single match, you can use following: let single_selection = doc . select_single ( ".list" ) ; // access is only for the first matching: assert_eq ! ( single_selection.length ( ) , 1 ) ; assert_eq ! ( single_selection.inner_html ( ) .to_string ( ) .trim ( ) , "<li>1</li><li>2</li><li>3</li>" ) ; // simple selection contains all matches: let selection = doc . select ( ".list" ) ; assert_eq ! ( selection.length ( ) , 2 ) ; // but if you call inner_html() on it, you will get the inner_html of the first match: assert_eq ! ( selection.inner_html ( ) .to_string ( ) .trim ( ) , "<li>1</li><li>2</li><li>3</li>" ) ; //this approach is using the first node from nodes vec and `select_single` consumes one iteration instead. let first_selection = doc . select ( ".list" ) . first ( ) ; assert_eq ! ( first_selection.length ( ) , 1 ) ; assert_eq ! ( first_selection.inner_html ( ) .to_string ( ) .trim ( ) , "<li>1</li><li>2</li><li>3</li>" ) ; // this approach is consuming all nodes into vec at first, and then you can call `iter().next()` to get the first one. let next_selection = doc . select ( ".list" ) . iter ( ) . next ( ) . unwrap ( ) ; assert_eq ! ( next_selection.length ( ) , 1 ) ; assert_eq ! ( next_selection.inner_html ( ) .to_string ( ) .trim ( ) , "<li>1</li><li>2</li><li>3</li>" ) ; // currently, to get data from all matches you need to iterate over them: let all_matched : String = selection . iter ( ) . map ( |s| s . inner_html ( ) . trim ( ) . to_string ( ) ) . collect ( ) ; assert_eq ! ( all_matched, "<li>1</li><li>2</li><li>3</li><li>4</li><li>5</li><li>6</li>" ) ; Selecting descendent elements use dom_query :: Document ; let html = r#"<!DOCTYPE html> <html> <head> <meta charset="utf-8"> <title>Test Page</title> </head> <body> <h1>Test Page</h1> <ul class="list-a"> <li>One</li> <li><a href="/2">Two</a></li> <li><a href="/3">Three</a></li> </ul> <ul class="list-b"> <li><a href="/4">Four</a></li> </ul> </body> </html>"# ; let document = Document :: from ( html ) ; // select a parent element let ul = document . select ( "ul" ) ; // selecting multiple elements ul . select ( "li" ) . iter ( ) . for_each ( |el| { assert ! ( el.is ( "li" ) ) ; } ) ; // also descendant selector may be specified starting from the parent elements let el = ul . select ( "body ul.list-b li" ) . first ( ) ; let text = el . text ( ) ; assert_eq ! ( "Four" , text.to_string ( ) ) ; Selecting with precompiled matchers (for reuse) use dom_query :: { Document , Matcher } ; let html1 = r#"<!DOCTYPE html><html><head><title>Test Page 1</title></head><body></body></html>"# ; let html2 = r#"<!DOCTYPE html><html><head><title>Test Page 2</title></head><body></body></html>"# ; let doc1 = Document :: from ( html1 ) ; let doc2 = Document :: from ( html2 ) ; // create a matcher once, reuse on different documents let title_matcher = Matcher :: new ( "title" ) . unwrap ( ) ; let title_el1 = doc1 . select_matcher ( & title_matcher ) ; assert_eq ! ( title_el1.text ( ) , "Test Page 1" .into ( ) ) ; let title_el2 = doc2 . select_matcher ( & title_matcher ) ; assert_eq ! ( title_el2.text ( ) , "Test Page 2" .into ( ) ) ; // selecting a single match let title_single = doc1 . select_single_matcher ( & title_matcher ) ; assert_eq ! ( title_single.text ( ) , "Test Page 1" .into ( ) ) ; Manipulating the attribute of an HTML element let html = r#"<!DOCTYPE html> <html> <head><title>Test</title></head> <body><input type="hidden" name="k" data-k="100"/></body> </html>"# ; let doc = Document :: from ( html ) ; let mut input_selection = doc . select ( "input[name=k]" ) ; // get the value of attribute "data-k" let val = input_selection . attr ( "data-k" ) . unwrap ( ) ; assert_eq ! ( val.to_string ( ) , "100" ) ; // remove the attribute "data-k" from the element input_selection . remove_attr ( "data-k" ) ; // get the value of attribute "data-k", if missing, return default value let val_or = input_selection . attr_or ( "data-k" , "0" ) ; assert_eq ! ( val_or.to_string ( ) , "0" ) ; // set a attribute "data-k" with value "200" input_selection . set_attr ( "data-k" , "200" ) ; assert_eq ! ( input_selection.html ( ) , r#"<input type="hidden" name="k" data-k="200">"# .into ( ) ) ; Serializing to HTML use dom_query :: Document ; let html = r#"<!DOCTYPE html> <html> <head><title>Test</title></head> <body><div class="content"><h1>Test Page</h1></div></body> </html>"# ; let doc = Document :: from ( html ) ; let heading_selector = doc . select ( "div.content" ) ; // serializing including the outer html tag let content = heading_selector . html ( ) ; assert_eq ! ( content.to_string ( ) , r#"<div class="content"><h1>Test Page</h1></div>"# ) ; // serializing without the outer html tag let inner_content = heading_selector . inner_html ( ) ; assert_eq ! ( inner_content.to_string ( ) , "<h1>Test Page</h1>" ) ; // there is also `try_html()` method, which returns an `Option<StrTendril>`, // and if there is no matching selection it returns None let opt_no_content = doc . select ( "div.no-content" ) . try_html ( ) ; assert_eq ! ( opt_no_content, None ) ; //`html()` method will return an empty `StrTendril` if there is no matching selection let no_content = doc . select ( "div.no-content" ) . html ( ) ; assert_eq ! ( no_content, "" .into ( ) ) ; //Same things works for `inner_html()` and `try_inner_html()` method. assert_eq ! ( doc.select ( "div.no-content" ) .try_inner_html ( ) , None ) ; assert_eq ! ( doc.select ( "div.no-content" ) .inner_html ( ) , "" .into ( ) ) ; Accessing descendent text use dom_query :: Document ; let html = r#"<!DOCTYPE html> <html> <head><title>Test</title></head> <body><div><h1>Test <span>Page</span></h1></div></body> </html>"# ; let doc = Document :: from ( html ) ; let body_selection = doc . select ( "body div" ) . first ( ) ; let text = body_selection . text ( ) ; assert_eq ! ( text.to_string ( ) , "Test Page" ) ; Extract data with pseudo-classes (:has, :has-text, :contains) use dom_query :: Document ; let html = include_str ! ( "../test-pages/rustwiki_2024.html" ) ; let doc = Document :: from ( html ) ; // searching list items inside a `tr` element which has a `a` element with title="Programming paradigm" let paradigm_selection = doc . select ( r#"table tr:has(a[title="Programming paradigm"]) td.infobox-data ul > li"# ) ; println ! ( "Rust programming paradigms:" ) ; for item in paradigm_selection . iter ( ) { println ! ( " {}" , item.text ( ) ) ; } println ! ( "{:-<50}" , "" ) ; //since `th` contains text "Paradigms" without sibling tags, we can use `:has-text` pseudo class let influenced_by_selection = doc . select ( r#"table tr:has-text("Influenced by") + tr td  ul > li > a"# ) ; println ! ( "Rust influenced by:" ) ; for item in influenced_by_selection . iter ( ) { println ! ( " {}" , item.text ( ) ) ; } println ! ( "{:-<50}" , "" ) ; // Extract all links from the block that contains certain text. // Since `foreign function interface` located in its own tag, // we have to use `:contains` pseudo class let links_selection = doc . select ( r#"p:contains("Rust has a foreign function interface") a[href^="/"]"# ) ; println ! ( "Links in the FFI block:" ) ; for item in links_selection . iter ( ) { println ! ( " {}" , item.attr ( "href" ) .unwrap ( ) ) ; } println ! ( "{:-<50}" , "" ) ; Manipulating the DOM use dom_query :: Document ; let html_contents = r#"<!DOCTYPE html> <html> <head><title>Test</title></head> <body> <div class="content"> <p>9,8,7</p> </div> <div class="remove-it"> Remove me </div> <div class="replace-it"> <div>Replace me</div> </div> </body> </html>"# ; ; let doc = Document :: from ( html_contents ) ; let mut content_selection = doc . select ( "body .content" ) ; // append a new html node to the selection content_selection . append_html ( r#"<div class="inner">inner block</div>"# ) ; assert ! ( doc.select ( "body .content .inner" ) .exists ( ) ) ; // set a new content to the selection, replacing existing content let mut set_selection = doc . select ( ".inner" ) ; set_selection . set_html ( r#"<p>1,2,3</p>"# ) ; assert_eq ! ( doc.select ( ".inner" ) .html ( ) , r#"<div class="inner"><p>1,2,3</p></div>"# .into ( ) ) ; // remove the selection doc . select ( ".remove-it" ) . remove ( ) ; assert ! ( !doc.select ( ".remove-it" ) .exists ( ) ) ; // replace the selection with a new html, current selection will not change. let mut replace_selection = doc . select ( ".replace-it" ) ; replace_selection . replace_with_html ( r#"<div class="replaced">Replaced</div>"# ) ; assert_eq ! ( replace_selection.text ( ) .trim ( ) , "Replace me" ) ; //but the document will change assert_eq ! ( doc.select ( ".replaced" ) .text ( ) , "Replaced" .into ( ) ) ; More Examples Related projects html5ever selectors select.rs goquery dom_finder Features hashbrown — optional, standard hashmaps and hashsets will be replaced hashbrown hashmaps and hashsets; Changelog Changelog License Licensed under MIT ( LICENSE or http://opensource.org/licenses/MIT ) Contribution Any contribution intentionally submitted for inclusion in the work by you, shall be
licensed with MIT license, without any additional terms or conditions.
======>
https://old.reddit.com/r/rust/comments/1g1pguq/managing_libs_for_c_is_just_painful_should_i/
-->>-->>
I really like C++ and all but I swear to god, I've spent more time trying to learn how to use Cmake and use external libs rather than actually learning how to use cpp and making projects. This is getting old fast.   

   I was going to use Cpp primarily for machine learning with libs such as mlpack & REST APIs but I've realised managing dependencies really sucks. So, rust is next in line since the performance between the 2 are close enough.   

   This is really just unfortunate since I was looking forward to learning cpp for a lot of other things such as godot.   

   Should I switch to rust since the process of installing libs is simpler?   
   

   

======>
https://community.amd.com/t5/corporate/addressing-security-integrating-project-caliptra-into-amd-s/ba-p/716837
-->>-->>
Addressing Security: Integrating Project Caliptra into AMD’s Product Lineup Alex_Tzonkov Staff 0 0 2,793 Subscribe to RSS Feed Bookmark Subscribe Printer Friendly Page Report Inappropriate Content yesterday Addressing Security: Integrating Project Caliptra into AMD’s Product Lineup In today's rapidly evolving digital landscape, addressing the security of our technology is more critical than ever. As cyber threats become increasingly sophisticated, AMD’s commitment to helping customers safeguard their data and systems remains unwavering. AMD has strategic plans to integrate Project Caliptra into its 2026+ product lineup. This initiative underscores AMD’s dedication to providing cutting-edge solutions that help our customers meet their demands for security and reliability. What is Project Caliptra? Project Caliptra is an innovative open-source Root of Trust (RoT) initiative under the Open Compute Project (OCP). It is designed to establish a standardized, secure foundation for hardware security, promoting collaboration and innovation across the industry. With AMD as one of the Technical Advisory Committee (TAC) members and co-creators, Project Caliptra benefits from the expertise and insights of leading security technology pioneers. This initiative not only addresses security but also fosters a community-driven approach to developing robust security standards that can be adopted industry-wide. Key Benefits of Integrating Project Caliptra Transparency and Collaboration Open-Source Foundation: Embracing an open-source approach enhances transparency in our security measures, fostering trust and continuous improvement. Community Effort: By joining a community of experts dedicated to advancing security standards, we ensure our solutions remain at the forefront of technological advancements. Consistency and Reliability Standardized Security: Project Caliptra provides a consistent security framework across our products, simplifying integration and maintenance. Unified Approach: A consistent RoT across our product lineup provides greater security options for solutions that have integrated the technology. Enhanced Security Robust Protection: Integrating Project Caliptra enables end users to strengthen the security of their products through additional measures that help safeguard sensitive data and maintaining system integrity. Futureproofing: The open-source nature of Project Caliptra allows for rapid updates and innovation, keeping our customers armed with cutting-edge technologies to help them secure their products against emerging threats. Our Commitment to You At the heart of our mission is a dedication to delivering solutions that ensure end users have access to cutting-edge technologies addressing security, transparency, and consistency. By integrating Project Caliptra into our products starting in 2026 and beyond, we are taking a significant step forward in addressing the needs of our customers for enabling security and trust in their products. This open-source Root of Trust, co-created with industry leaders Microsoft, Google, NVIDIA, and AMD ensures that our future product offerings will be at the cutting edge of security advancements. © 2024 Advanced Micro Devices, Inc. All rights reserved. AMD, the AMD Arrow logo, and combinations thereof are trademarks of Advanced Micro Devices, Inc. Microsoft is a registered trademark of Microsoft Corporation in the US and/or other countries. Other product names used in this publication are for identification purposes only and may be trademarks of their respective owners. Certain AMD technologies may require third-party enablement or activation. Supported features may vary by operating system. Please confirm with the system manufacturer for specific features. No technology or product can be completely secure. Labels AMD Corporate Blog 0 Likes
======>
https://old.reddit.com/r/rust/comments/1g28siy/how_i_can_hardening_my_server/
-->>-->>
Hello. Im currently developing a Game Server written in Rust:    https://github.com/Snowiiii/Pumpkin   
I really care about security and want to prevent any crashes or exploits, I wonder if there are any good concepts/techniques for Securing a Game Server?   
   

======>
https://github.com/blacksky-algorithms/rsky
-->>-->>
Skip to content {"props":{"docsUrl":"https://docs.github.com/get-started/accessibility/keyboard-shortcuts"}} {"resolvedServerColorMode":"day"} Navigation Menu Toggle navigation Sign in Product GitHub Copilot Write better code with AI Security Find and fix vulnerabilities Actions Automate any workflow Codespaces Instant dev environments Issues Plan and track work Code Review Manage code changes Discussions Collaborate outside of code Code Search Find more, search less Explore All features Documentation GitHub Skills Blog Solutions By size Enterprise Teams Startups By industry Healthcare Financial services Manufacturing By use case CI/CD & Automation DevOps DevSecOps Resources Topics AI DevOps Security Software Development View all Explore Learning Pathways White papers, Ebooks, Webinars Customer Stories Partners Open Source GitHub Sponsors Fund open source developers The ReadME Project GitHub community articles Repositories Topics Trending Collections Enterprise Enterprise platform AI-powered developer platform Available add-ons Advanced Security Enterprise-grade security features GitHub Copilot Enterprise-grade AI features Premium Support Enterprise-grade 24/7 support Pricing Search or jump to... Search code, repositories, users, issues, pull requests... Search Clear Search syntax tips Provide feedback We read every piece of feedback, and take your input very seriously. Include my email address so I can be contacted Cancel Submit feedback Saved searches Use saved searches to filter your results more quickly Name Query To see all available qualifiers, see our documentation . Cancel Create saved search Sign in Sign up Reseting focus You signed in with another tab or window. Reload to refresh your session. You signed out in another tab or window. Reload to refresh your session. You switched accounts on another tab or window. Reload to refresh your session. Dismiss alert {{ message }} blacksky-algorithms / rsky Public Sponsor Sponsor blacksky-algorithms/rsky GitHub Sponsors Learn more about Sponsors blacksky-algorithms blacksky-algorithms Sponsor External links opencollective.com/ blacksky Learn more about funding links in repositories . Report abuse Notifications You must be signed in to change notification settings Fork 4 Star 66 An AT Protocol Implementation built in Rust. blackskyweb.xyz License Apache-2.0 license 66 stars 4 forks Branches Tags Activity Star Notifications You must be signed in to change notification settings Code Issues 7 Pull requests 0 Actions Projects 0 Security Insights Additional navigation options Code Issues Pull requests Actions Projects Security Insights blacksky-algorithms/rsky This commit does not belong to any branch on this repository, and may belong to a fork outside of the repository. {"props":{"initialPayload":{"allShortcutsEnabled":false,"path":"/","repo":{"id":656992231,"defaultBranch":"main","name":"rsky","ownerLogin":"blacksky-algorithms","currentUserCanPush":false,"isFork":false,"isEmpty":false,"createdAt":"2023-06-22T04:47:21.000Z","ownerAvatar":"https://avatars.githubusercontent.com/u/137938180?v=4","public":true,"private":false,"isOrgOwned":true},"currentUser":null,"refInfo":{"name":"main","listCacheKey":"v0:1718079751.0","canEdit":false,"refType":"branch","currentOid":"4e2963dc273379c415660aa1012d03123314db13"},"tree":{"items":[{"name":".github","path":".github","contentType":"directory"},{"name":".idea","path":".idea","contentType":"directory"},{"name":"bots","path":"bots","contentType":"directory"},{"name":"labeler","path":"labeler","contentType":"directory"},{"name":"rsky-crypto","path":"rsky-crypto","contentType":"directory"},{"name":"rsky-feedgen","path":"rsky-feedgen","contentType":"directory"},{"name":"rsky-firehose","path":"rsky-firehose","contentType":"directory"},{"name":"rsky-identity","path":"rsky-identity","contentType":"directory"},{"name":"rsky-lexicon","path":"rsky-lexicon","contentType":"directory"},{"name":"rsky-pds","path":"rsky-pds","contentType":"directory"},{"name":"rsky-syntax","path":"rsky-syntax","contentType":"directory"},{"name":".dockerignore","path":".dockerignore","contentType":"file"},{"name":".gitignore","path":".gitignore","contentType":"file"},{"name":"Cargo.toml","path":"Cargo.toml","contentType":"file"},{"name":"LICENSE","path":"LICENSE","contentType":"file"},{"name":"README.md","path":"README.md","contentType":"file"},{"name":"rust-toolchain","path":"rust-toolchain","contentType":"file"}],"templateDirectorySuggestionUrl":null,"readme":null,"totalCount":17,"showBranchInfobar":false},"fileTree":null,"fileTreeProcessingTime":null,"foldersToFetch":[],"treeExpanded":false,"symbolsExpanded":false,"isOverview":true,"overview":{"banners":{"shouldRecommendReadme":false,"isPersonalRepo":false,"showUseActionBanner":false,"actionSlug":null,"actionId":null,"showProtectBranchBanner":false,"publishBannersInfo":{"dismissActionNoticePath":"/settings/dismiss-notice/publish_action_from_repo","releasePath":"/blacksky-algorithms/rsky/releases/new?marketplace=true","showPublishActionBanner":false},"interactionLimitBanner":null,"showInvitationBanner":false,"inviterName":null,"actionsMigrationBannerInfo":{"releaseTags":[],"showImmutableActionsMigrationBanner":false,"initialMigrationStatus":null}},"codeButton":{"contactPath":"/contact","isEnterprise":false,"local":{"protocolInfo":{"httpAvailable":true,"sshAvailable":null,"httpUrl":"https://github.com/blacksky-algorithms/rsky.git","showCloneWarning":null,"sshUrl":null,"sshCertificatesRequired":null,"sshCertificatesAvailable":null,"ghCliUrl":"gh repo clone blacksky-algorithms/rsky","defaultProtocol":"http","newSshKeyUrl":"/settings/ssh/new","setProtocolPath":"/users/set_protocol"},"platformInfo":{"cloneUrl":"https://desktop.github.com","showVisualStudioCloneButton":false,"visualStudioCloneUrl":"https://windows.github.com","showXcodeCloneButton":false,"xcodeCloneUrl":"xcode://clone?repo=https%3A%2F%2Fgithub.com%2Fblacksky-algorithms%2Frsky","zipballUrl":"/blacksky-algorithms/rsky/archive/refs/heads/main.zip"}},"newCodespacePath":"/codespaces/new?hide_repo_select=true\u0026repo=656992231"},"popovers":{"rename":null,"renamedParentRepo":null},"commitCount":"326","overviewFiles":[{"displayName":"README.md","repoName":"rsky","refName":"main","path":"README.md","preferredFileType":"readme","tabName":"README","richText":"\u003carticle class=\"markdown-body entry-content container-lg\" itemprop=\"text\"\u003e\u003cp align=\"center\" dir=\"auto\"\u003e\n    \u003ca href=\"https://blackskyweb.xyz\" rel=\"nofollow\"\u003e\n    \u003cimg src=\"https://camo.githubusercontent.com/8e6310f87f7ef87d338a538523e3f550915e3ab16f3a4f59d4f02504643b10b5/68747470733a2f2f63646e2e70726f642e776562736974652d66696c65732e636f6d2f3635346431393561373730303735346438313064323639332f3636656638323338346639336238306266623133323733385f72736b792d62616e6e65722d322e6a7067\" data-canonical-src=\"https://cdn.prod.website-files.com/654d195a7700754d810d2693/66ef82384f93b80bfb132738_rsky-banner-2.jpg\" style=\"max-width: 100%;\"\u003e\n    \u003c/a\u003e\n\u003c/p\u003e\n\u003cdiv class=\"markdown-heading\" dir=\"auto\"\u003e\u003ch3 align=\"center\" tabindex=\"-1\" class=\"heading-element\" dir=\"auto\"\u003e\n  AT Protocol Implementation (Rust)\n\u003c/h3\u003e\u003ca id=\"user-content---at-protocol-implementation-rust\" class=\"anchor\" aria-label=\"Permalink: \n  AT Protocol Implementation (Rust)\n\" href=\"#--at-protocol-implementation-rust\"\u003e\u003csvg class=\"octicon octicon-link\" viewBox=\"0 0 16 16\" version=\"1.1\" width=\"16\" height=\"16\" aria-hidden=\"true\"\u003e\u003cpath d=\"m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z\"\u003e\u003c/path\u003e\u003c/svg\u003e\u003c/a\u003e\u003c/div\u003e\n\u003cdiv align=\"center\" dir=\"auto\"\u003e\n\u003cp dir=\"auto\"\u003e\u003ca href=\"https://techforpalestine.org/learn-more\" rel=\"nofollow\"\u003e\u003cimg src=\"https://camo.githubusercontent.com/7e092f78eafdcf13ff2c471fd6c1ee3a7b1168359d569b05ff1b5ee3875c08ea/68747470733a2f2f62616467652e74656368666f7270616c657374696e652e6f72672f64656661756c74\" alt=\"Ceasefire Now\" data-canonical-src=\"https://badge.techforpalestine.org/default\" style=\"max-width: 100%;\"\u003e\u003c/a\u003e\n\u003ca href=\"https://deps.rs/repo/github/blacksky-algorithms/rsky\" rel=\"nofollow\"\u003e\u003cimg src=\"https://camo.githubusercontent.com/c8f05085121ffed5ab3ef8bbdbf1d9e4f830d33884458a0a6baa59b569e861f3/68747470733a2f2f646570732e72732f7265706f2f6769746875622f626c61636b736b792d616c676f726974686d732f72736b792f7374617475732e7376673f7374796c653d666c61742d737175617265\" alt=\"dependency status\" data-canonical-src=\"https://deps.rs/repo/github/blacksky-algorithms/rsky/status.svg?style=flat-square\" style=\"max-width: 100%;\"\u003e\u003c/a\u003e\n\u003ca href=\"https://bsky.app/profile/blacksky.app\" rel=\"nofollow\"\u003e\u003cimg src=\"https://camo.githubusercontent.com/97354ae78cbfe05adf24a7c6cb0bf456607f918fcdc33af0223f77e6ecdffb9a/68747470733a2f2f696d672e736869656c64732e696f2f62616467652f466f6c6c6f772d253430626c61636b736b792e6170702d3030373366613f7374796c653d666c6174266c6f676f3d626c7565736b79266c6162656c436f6c6f723d253233313531653237266c696e6b3d687474707325334125324625324662736b792e61707025324670726f66696c65253246626c61636b736b792e617070\" alt=\"Follow\" data-canonical-src=\"https://img.shields.io/badge/Follow-%40blacksky.app-0073fa?style=flat\u0026amp;logo=bluesky\u0026amp;labelColor=%23151e27\u0026amp;link=https%3A%2F%2Fbsky.app%2Fprofile%2Fblacksky.app\" style=\"max-width: 100%;\"\u003e\u003c/a\u003e\n\u003ca href=\"https://opensource.org/licenses/Apache-2.0\" rel=\"nofollow\"\u003e\u003cimg src=\"https://camo.githubusercontent.com/5ce2e21e84680df1ab24807babebc3417d27d66e0826a350eb04ab57f4c8f3e5/68747470733a2f2f696d672e736869656c64732e696f2f62616467652f4c6963656e73652d4170616368655f322e302d626c75652e737667\" alt=\"License\" data-canonical-src=\"https://img.shields.io/badge/License-Apache_2.0-blue.svg\" style=\"max-width: 100%;\"\u003e\u003c/a\u003e\n\u003ca href=\"https://github.com/blacksky-algorithms/rsky\"\u003e\u003cimg src=\"https://camo.githubusercontent.com/a12c839e65974c27e683e4abc090b55bcfb913ee3fcc020aa04dc86f676b18bf/68747470733a2f2f696d672e736869656c64732e696f2f6769746875622f6c616e6775616765732f636f64652d73697a652f626c61636b736b792d616c676f726974686d732f72736b793f6c6f676f3d676974687562\" alt=\"GitHub code size in bytes\" data-canonical-src=\"https://img.shields.io/github/languages/code-size/blacksky-algorithms/rsky?logo=github\" style=\"max-width: 100%;\"\u003e\u003c/a\u003e\n\u003ca href=\"https://github.com/blacksky-algorithms/rsky\"\u003e\u003cimg src=\"https://camo.githubusercontent.com/14234f01644312f513a05f706a2b6c4aaa11d8da58c6a459ef94d745c8b1b1a1/68747470733a2f2f696d672e736869656c64732e696f2f6769746875622f73746172732f626c61636b736b792d616c676f726974686d732f72736b793f7374796c653d666c6174266c6f676f3d676974687562\" alt=\"GitHub Repo stars\" data-canonical-src=\"https://img.shields.io/github/stars/blacksky-algorithms/rsky?style=flat\u0026amp;logo=github\" style=\"max-width: 100%;\"\u003e\u003c/a\u003e\n\u003ca href=\"#backers\"\u003e\u003cimg src=\"https://camo.githubusercontent.com/8ae9731b9050dcba5b04eefd9e3f92676ad430edb014bb4ec06b1822a4f4e8eb/68747470733a2f2f6f70656e636f6c6c6563746976652e636f6d2f626c61636b736b792f6261636b6572732f62616467652e737667\" alt=\"Backers on Open Collective\" data-canonical-src=\"https://opencollective.com/blacksky/backers/badge.svg\" style=\"max-width: 100%;\"\u003e\u003c/a\u003e\n\u003ca href=\"#sponsors\"\u003e\u003cimg src=\"https://camo.githubusercontent.com/f276ce9a606d760344aeb10d909add20cd17c76b7425a1b3906c7c0984ca3c46/68747470733a2f2f6f70656e636f6c6c6563746976652e636f6d2f626c61636b736b792f73706f6e736f72732f62616467652e737667\" alt=\"Sponsors on Open Collective\" data-canonical-src=\"https://opencollective.com/blacksky/sponsors/badge.svg\" style=\"max-width: 100%;\"\u003e\u003c/a\u003e\u003c/p\u003e\n\u003c/div\u003e\n\u003chr\u003e\n\u003cdiv class=\"markdown-alert markdown-alert-warning\" dir=\"auto\"\u003e\u003cp class=\"markdown-alert-title\" dir=\"auto\"\u003e\u003csvg class=\"octicon octicon-alert mr-2\" viewBox=\"0 0 16 16\" version=\"1.1\" width=\"16\" height=\"16\" aria-hidden=\"true\"\u003e\u003cpath d=\"M6.457 1.047c.659-1.234 2.427-1.234 3.086 0l6.082 11.378A1.75 1.75 0 0 1 14.082 15H1.918a1.75 1.75 0 0 1-1.543-2.575Zm1.763.707a.25.25 0 0 0-.44 0L1.698 13.132a.25.25 0 0 0 .22.368h12.164a.25.25 0 0 0 .22-.368Zm.53 3.996v2.5a.75.75 0 0 1-1.5 0v-2.5a.75.75 0 0 1 1.5 0ZM9 11a1 1 0 1 1-2 0 1 1 0 0 1 2 0Z\"\u003e\u003c/path\u003e\u003c/svg\u003eWarning\u003c/p\u003e\u003cp dir=\"auto\"\u003e\u003cem\u003e\u003cstrong\u003eThis library is a work in progress. Things will change. Things are incomplete. Things will break. Until the project reaches version 1.0.0, stability will not be guaranteed.\u003c/strong\u003e\u003c/em\u003e\u003c/p\u003e\n\u003c/div\u003e\n\u003cp dir=\"auto\"\u003ersky (/ˈrɪski/) is intended to be a full implementation of \u003ca href=\"https://atproto.com/\" rel=\"nofollow\"\u003eAT Protocol\u003c/a\u003e in the Rust language. Most of the code here are general purpose implementations while some (like rsky-feedgen) are specific to the use cases of the Blacksky community.\u003c/p\u003e\n\u003cdiv class=\"markdown-heading\" dir=\"auto\"\u003e\u003ch2 tabindex=\"-1\" class=\"heading-element\" dir=\"auto\"\u003eWhat is in here?\u003c/h2\u003e\u003ca id=\"user-content-what-is-in-here\" class=\"anchor\" aria-label=\"Permalink: What is in here?\" href=\"#what-is-in-here\"\u003e\u003csvg class=\"octicon octicon-link\" viewBox=\"0 0 16 16\" version=\"1.1\" width=\"16\" height=\"16\" aria-hidden=\"true\"\u003e\u003cpath d=\"m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z\"\u003e\u003c/path\u003e\u003c/svg\u003e\u003c/a\u003e\u003c/div\u003e\n\u003cp dir=\"auto\"\u003e\u003cstrong\u003eRust Crates:\u003c/strong\u003e\u003c/p\u003e\n\u003cmarkdown-accessiblity-table\u003e\u003ctable\u003e\n\u003cthead\u003e\n\u003ctr\u003e\n\u003cth\u003eCrate\u003c/th\u003e\n\u003cth\u003eDocs\u003c/th\u003e\n\u003cth\u003ecrates.io\u003c/th\u003e\n\u003c/tr\u003e\n\u003c/thead\u003e\n\u003ctbody\u003e\n\u003ctr\u003e\n\u003ctd\u003e\u003ccode\u003ersky-crypto\u003c/code\u003e: cryptographic signing and key serialization\u003c/td\u003e\n\u003ctd\u003e\u003ca href=\"/blacksky-algorithms/rsky/blob/main/rsky-crypto/README.md\"\u003eREADME\u003c/a\u003e\u003c/td\u003e\n\u003ctd\u003e\u003ca href=\"https://crates.io/crates/rsky-crypto\" rel=\"nofollow\"\u003e\u003cimg src=\"https://camo.githubusercontent.com/9ce0b5df6c021d1f4580bb0f2727be761106fa5e853a3b5bd4843cc455d4d8e9/68747470733a2f2f696d672e736869656c64732e696f2f6372617465732f762f72736b792d63727970746f3f6c6f676f3d72757374267374796c653d666c61742d737175617265266c6f676f436f6c6f723d45303544343426636f6c6f723d453035443434\" alt=\"Crate\" data-canonical-src=\"https://img.shields.io/crates/v/rsky-crypto?logo=rust\u0026amp;style=flat-square\u0026amp;logoColor=E05D44\u0026amp;color=E05D44\" style=\"max-width: 100%;\"\u003e\u003c/a\u003e\u003c/td\u003e\n\u003c/tr\u003e\n\u003ctr\u003e\n\u003ctd\u003e\u003ccode\u003ersky-identity\u003c/code\u003e: DID and handle resolution\u003c/td\u003e\n\u003ctd\u003e\u003ca href=\"/blacksky-algorithms/rsky/blob/main/rsky-identity/README.md\"\u003eREADME\u003c/a\u003e\u003c/td\u003e\n\u003ctd\u003e\u003ca href=\"https://crates.io/crates/rsky-identity\" rel=\"nofollow\"\u003e\u003cimg src=\"https://camo.githubusercontent.com/0f983e125c03073cfd247af6bacd2110e974e84dda661b83f0f9519f08dd7d50/68747470733a2f2f696d672e736869656c64732e696f2f6372617465732f762f72736b792d6964656e746974793f6c6f676f3d72757374267374796c653d666c61742d737175617265266c6f676f436f6c6f723d45303544343426636f6c6f723d453035443434\" alt=\"Crate\" data-canonical-src=\"https://img.shields.io/crates/v/rsky-identity?logo=rust\u0026amp;style=flat-square\u0026amp;logoColor=E05D44\u0026amp;color=E05D44\" style=\"max-width: 100%;\"\u003e\u003c/a\u003e\u003c/td\u003e\n\u003c/tr\u003e\n\u003ctr\u003e\n\u003ctd\u003e\u003ccode\u003ersky-lexicon\u003c/code\u003e: schema definition language\u003c/td\u003e\n\u003ctd\u003e\u003ca href=\"/blacksky-algorithms/rsky/blob/main/rsky-lexicon/README.md\"\u003eREADME\u003c/a\u003e\u003c/td\u003e\n\u003ctd\u003e\u003ca href=\"https://crates.io/crates/rsky-lexicon\" rel=\"nofollow\"\u003e\u003cimg src=\"https://camo.githubusercontent.com/1a509eb49efa2a02794f7b7663b066fa8270d482703599f5beba670ecb876e25/68747470733a2f2f696d672e736869656c64732e696f2f6372617465732f762f72736b792d6c657869636f6e3f6c6f676f3d72757374267374796c653d666c61742d737175617265266c6f676f436f6c6f723d45303544343426636f6c6f723d453035443434\" alt=\"Crate\" data-canonical-src=\"https://img.shields.io/crates/v/rsky-lexicon?logo=rust\u0026amp;style=flat-square\u0026amp;logoColor=E05D44\u0026amp;color=E05D44\" style=\"max-width: 100%;\"\u003e\u003c/a\u003e\u003c/td\u003e\n\u003c/tr\u003e\n\u003ctr\u003e\n\u003ctd\u003e\u003ccode\u003ersky-syntax\u003c/code\u003e: string parsers for identifiers\u003c/td\u003e\n\u003ctd\u003e\u003ca href=\"/blacksky-algorithms/rsky/blob/main/rsky-syntax/README.md\"\u003eREADME\u003c/a\u003e\u003c/td\u003e\n\u003ctd\u003e\u003ca href=\"https://crates.io/crates/rsky-syntax\" rel=\"nofollow\"\u003e\u003cimg src=\"https://camo.githubusercontent.com/f184ede4edb6e9f21a4250510863463bb3931d68cc930f0dc8cc1e46b39657be/68747470733a2f2f696d672e736869656c64732e696f2f6372617465732f762f72736b792d73796e7461783f6c6f676f3d72757374267374796c653d666c61742d737175617265266c6f676f436f6c6f723d45303544343426636f6c6f723d453035443434\" alt=\"Crate\" data-canonical-src=\"https://img.shields.io/crates/v/rsky-syntax?logo=rust\u0026amp;style=flat-square\u0026amp;logoColor=E05D44\u0026amp;color=E05D44\" style=\"max-width: 100%;\"\u003e\u003c/a\u003e\u003c/td\u003e\n\u003c/tr\u003e\n\u003c/tbody\u003e\n\u003c/table\u003e\u003c/markdown-accessiblity-table\u003e\n\u003cp dir=\"auto\"\u003e\u003cstrong\u003eRust Services:\u003c/strong\u003e\u003c/p\u003e\n\u003cul dir=\"auto\"\u003e\n\u003cli\u003e\u003ccode\u003ersky-pds\u003c/code\u003e: \"Personal Data Server\", hosting repo content for atproto accounts.\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003ersky-feedgen\u003c/code\u003e: Bluesky feed generator that closely follows the use cases of the Blacksky community.\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003ersky-firehose\u003c/code\u003e: Firehose consumer.\u003c/li\u003e\n\u003c/ul\u003e\n\u003cdiv class=\"markdown-heading\" dir=\"auto\"\u003e\u003ch2 tabindex=\"-1\" class=\"heading-element\" dir=\"auto\"\u003eAbout AT Protocol\u003c/h2\u003e\u003ca id=\"user-content-about-at-protocol\" class=\"anchor\" aria-label=\"Permalink: About AT Protocol\" href=\"#about-at-protocol\"\u003e\u003csvg class=\"octicon octicon-link\" viewBox=\"0 0 16 16\" version=\"1.1\" width=\"16\" height=\"16\" aria-hidden=\"true\"\u003e\u003cpath d=\"m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z\"\u003e\u003c/path\u003e\u003c/svg\u003e\u003c/a\u003e\u003c/div\u003e\n\u003cp dir=\"auto\"\u003eThe Authenticated Transfer Protocol (\"ATP\" or \"atproto\") is a decentralized social media protocol, developed by \u003ca href=\"https://bsky.social\" rel=\"nofollow\"\u003eBluesky PBC\u003c/a\u003e. Learn more at:\u003c/p\u003e\n\u003cul dir=\"auto\"\u003e\n\u003cli\u003e\u003ca href=\"https://atproto.com/guides/overview\" rel=\"nofollow\"\u003eOverview and Guides\u003c/a\u003e 👈🏾 Best starting point\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"https://github.com/bluesky-social/atproto/discussions\"\u003eGithub Discussions\u003c/a\u003e 👈🏾 Great place to ask questions\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"https://atproto.com/specs/atp\" rel=\"nofollow\"\u003eProtocol Specifications\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"https://bsky.social/about/blog/3-6-2022-a-self-authenticating-social-protocol\" rel=\"nofollow\"\u003eBlogpost on self-authenticating data structures\u003c/a\u003e\u003c/li\u003e\n\u003c/ul\u003e\n\u003cdiv class=\"markdown-heading\" dir=\"auto\"\u003e\u003ch2 tabindex=\"-1\" class=\"heading-element\" dir=\"auto\"\u003eRoadmap\u003c/h2\u003e\u003ca id=\"user-content-roadmap\" class=\"anchor\" aria-label=\"Permalink: Roadmap\" href=\"#roadmap\"\u003e\u003csvg class=\"octicon octicon-link\" viewBox=\"0 0 16 16\" version=\"1.1\" width=\"16\" height=\"16\" aria-hidden=\"true\"\u003e\u003cpath d=\"m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z\"\u003e\u003c/path\u003e\u003c/svg\u003e\u003c/a\u003e\u003c/div\u003e\n\u003cul class=\"contains-task-list\"\u003e\n\u003cli class=\"task-list-item\"\u003e\u003cinput type=\"checkbox\" id=\"\" disabled=\"\" class=\"task-list-item-checkbox\" checked=\"\"\u003e Feedgen and firehose consumer\u003c/li\u003e\n\u003cli class=\"task-list-item\"\u003e\u003cinput type=\"checkbox\" id=\"\" disabled=\"\" class=\"task-list-item-checkbox\" checked=\"\"\u003e PDS implementation\u003c/li\u003e\n\u003cli class=\"task-list-item\"\u003e\u003cinput type=\"checkbox\" id=\"\" disabled=\"\" class=\"task-list-item-checkbox\"\u003e Frontend bluesky client\u003c/li\u003e\n\u003cli class=\"task-list-item\"\u003e\u003cinput type=\"checkbox\" id=\"\" disabled=\"\" class=\"task-list-item-checkbox\"\u003e Feedgen admin client\u003c/li\u003e\n\u003c/ul\u003e\n\u003cdiv class=\"markdown-heading\" dir=\"auto\"\u003e\u003ch2 tabindex=\"-1\" class=\"heading-element\" dir=\"auto\"\u003eBackers\u003c/h2\u003e\u003ca id=\"user-content-backers\" class=\"anchor\" aria-label=\"Permalink: Backers\" href=\"#backers\"\u003e\u003csvg class=\"octicon octicon-link\" viewBox=\"0 0 16 16\" version=\"1.1\" width=\"16\" height=\"16\" aria-hidden=\"true\"\u003e\u003cpath d=\"m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z\"\u003e\u003c/path\u003e\u003c/svg\u003e\u003c/a\u003e\u003c/div\u003e\n\u003cp dir=\"auto\"\u003e\u003ca href=\"https://opencollective.com/blacksky#backer\" rel=\"nofollow\"\u003eBecome a backer\u003c/a\u003e and get your image on our README on GitHub with a link to your site.\u003c/p\u003e\n\u003cp dir=\"auto\"\u003e\u003ca href=\"https://opencollective.com/blacksky/backer/0/website?requireActive=false\" rel=\"nofollow\"\u003e\u003cimg src=\"https://camo.githubusercontent.com/0970630c2952bd71bf7f2f663ff16c3467853f338a65f875d7fb2dbb5d39696a/68747470733a2f2f6f70656e636f6c6c6563746976652e636f6d2f626c61636b736b792f6261636b65722f302f6176617461722e7376673f726571756972654163746976653d66616c7365\" data-canonical-src=\"https://opencollective.com/blacksky/backer/0/avatar.svg?requireActive=false\" style=\"max-width: 100%;\"\u003e\u003c/a\u003e\n\u003ca href=\"https://opencollective.com/blacksky/backer/1/website?requireActive=false\" rel=\"nofollow\"\u003e\u003cimg src=\"https://camo.githubusercontent.com/afa6811d0a1b38693c900da215b425730bf55c6e22324f6d2df42e0f734b472b/68747470733a2f2f6f70656e636f6c6c6563746976652e636f6d2f626c61636b736b792f6261636b65722f312f6176617461722e7376673f726571756972654163746976653d66616c7365\" data-canonical-src=\"https://opencollective.com/blacksky/backer/1/avatar.svg?requireActive=false\" style=\"max-width: 100%;\"\u003e\u003c/a\u003e\n\u003ca href=\"https://opencollective.com/blacksky/backer/2/website?requireActive=false\" rel=\"nofollow\"\u003e\u003cimg src=\"https://camo.githubusercontent.com/dae97588a5abef6231308c7a1c886e6b3428896b38ac221caf1435b2be70f517/68747470733a2f2f6f70656e636f6c6c6563746976652e636f6d2f626c61636b736b792f6261636b65722f322f6176617461722e7376673f726571756972654163746976653d66616c7365\" data-canonical-src=\"https://opencollective.com/blacksky/backer/2/avatar.svg?requireActive=false\" style=\"max-width: 100%;\"\u003e\u003c/a\u003e\n\u003ca href=\"https://opencollective.com/blacksky/backer/3/website?requireActive=false\" rel=\"nofollow\"\u003e\u003cimg src=\"https://camo.githubusercontent.com/6c8e395360e8f10eabdcc5639e1b5db4634466ae3d36c0ec4fb5f9dee4ca19bc/68747470733a2f2f6f70656e636f6c6c6563746976652e636f6d2f626c61636b736b792f6261636b65722f332f6176617461722e7376673f726571756972654163746976653d66616c7365\" data-canonical-src=\"https://opencollective.com/blacksky/backer/3/avatar.svg?requireActive=false\" style=\"max-width: 100%;\"\u003e\u003c/a\u003e\n\u003ca href=\"https://opencollective.com/blacksky/backer/4/website?requireActive=false\" rel=\"nofollow\"\u003e\u003cimg src=\"https://camo.githubusercontent.com/910ce10749712fc12637dff50dee1d5da497eeef02b88077e9b2dcf209c13238/68747470733a2f2f6f70656e636f6c6c6563746976652e636f6d2f626c61636b736b792f6261636b65722f342f6176617461722e7376673f726571756972654163746976653d66616c7365\" data-canonical-src=\"https://opencollective.com/blacksky/backer/4/avatar.svg?requireActive=false\" style=\"max-width: 100%;\"\u003e\u003c/a\u003e\n\u003ca href=\"https://opencollective.com/blacksky/backer/5/website?requireActive=false\" rel=\"nofollow\"\u003e\u003cimg src=\"https://camo.githubusercontent.com/eb89de368a5d954a40c0eaf273278df953bd6340028fbb7857d379a5e665120b/68747470733a2f2f6f70656e636f6c6c6563746976652e636f6d2f626c61636b736b792f6261636b65722f352f6176617461722e7376673f726571756972654163746976653d66616c7365\" data-canonical-src=\"https://opencollective.com/blacksky/backer/5/avatar.svg?requireActive=false\" style=\"max-width: 100%;\"\u003e\u003c/a\u003e\n\u003ca href=\"https://opencollective.com/blacksky/backer/6/website?requireActive=false\" rel=\"nofollow\"\u003e\u003cimg src=\"https://camo.githubusercontent.com/71cd9e06f40179a77fdc86f762c0836f59aaab6f657bd9fa305ea4bf52982009/68747470733a2f2f6f70656e636f6c6c6563746976652e636f6d2f626c61636b736b792f6261636b65722f362f6176617461722e7376673f726571756972654163746976653d66616c7365\" data-canonical-src=\"https://opencollective.com/blacksky/backer/6/avatar.svg?requireActive=false\" style=\"max-width: 100%;\"\u003e\u003c/a\u003e\n\u003ca href=\"https://opencollective.com/blacksky/backer/7/website?requireActive=false\" rel=\"nofollow\"\u003e\u003cimg src=\"https://camo.githubusercontent.com/836cd76071969897343a1fba8f4812c2493d6562d0e27837e7596ac4bf56b1bb/68747470733a2f2f6f70656e636f6c6c6563746976652e636f6d2f626c61636b736b792f6261636b65722f372f6176617461722e7376673f726571756972654163746976653d66616c7365\" data-canonical-src=\"https://opencollective.com/blacksky/backer/7/avatar.svg?requireActive=false\" style=\"max-width: 100%;\"\u003e\u003c/a\u003e\n\u003ca href=\"https://opencollective.com/blacksky/backer/8/website?requireActive=false\" rel=\"nofollow\"\u003e\u003cimg src=\"https://camo.githubusercontent.com/69036c33076ce7442e5a668331821b5e7d5b5c140230ab8e384da2ee7d41b3df/68747470733a2f2f6f70656e636f6c6c6563746976652e636f6d2f626c61636b736b792f6261636b65722f382f6176617461722e7376673f726571756972654163746976653d66616c7365\" data-canonical-src=\"https://opencollective.com/blacksky/backer/8/avatar.svg?requireActive=false\" style=\"max-width: 100%;\"\u003e\u003c/a\u003e\n\u003ca href=\"https://opencollective.com/blacksky/backer/9/website?requireActive=false\" rel=\"nofollow\"\u003e\u003cimg src=\"https://camo.githubusercontent.com/3b104bf514d495edd604e48ae491ca5664d1c4800973eb474720880319fb5598/68747470733a2f2f6f70656e636f6c6c6563746976652e636f6d2f626c61636b736b792f6261636b65722f392f6176617461722e7376673f726571756972654163746976653d66616c7365\" data-canonical-src=\"https://opencollective.com/blacksky/backer/9/avatar.svg?requireActive=false\" style=\"max-width: 100%;\"\u003e\u003c/a\u003e\n\u003ca href=\"https://opencollective.com/blacksky/backer/10/website?requireActive=false\" rel=\"nofollow\"\u003e\u003cimg src=\"https://camo.githubusercontent.com/39cabf243f11b9d7e74183578521bcabfd24111877a336a6f61a441b608372e3/68747470733a2f2f6f70656e636f6c6c6563746976652e636f6d2f626c61636b736b792f6261636b65722f31302f6176617461722e7376673f726571756972654163746976653d66616c7365\" data-canonical-src=\"https://opencollective.com/blacksky/backer/10/avatar.svg?requireActive=false\" style=\"max-width: 100%;\"\u003e\u003c/a\u003e\n\u003ca href=\"https://opencollective.com/blacksky/backer/11/website?requireActive=false\" rel=\"nofollow\"\u003e\u003cimg src=\"https://camo.githubusercontent.com/5f722f5a3317023eb4c35491e5a5f3085f3ea94901549949669219c8a4012510/68747470733a2f2f6f70656e636f6c6c6563746976652e636f6d2f626c61636b736b792f6261636b65722f31312f6176617461722e7376673f726571756972654163746976653d66616c7365\" data-canonical-src=\"https://opencollective.com/blacksky/backer/11/avatar.svg?requireActive=false\" style=\"max-width: 100%;\"\u003e\u003c/a\u003e\n\u003ca href=\"https://opencollective.com/blacksky/backer/12/website?requireActive=false\" rel=\"nofollow\"\u003e\u003cimg src=\"https://camo.githubusercontent.com/62c4250a30150736c40a34e6b3bfdab6bb2dbe08a6f8db7145e54028b3b44c4a/68747470733a2f2f6f70656e636f6c6c6563746976652e636f6d2f626c61636b736b792f6261636b65722f31322f6176617461722e7376673f726571756972654163746976653d66616c7365\" data-canonical-src=\"https://opencollective.com/blacksky/backer/12/avatar.svg?requireActive=false\" style=\"max-width: 100%;\"\u003e\u003c/a\u003e\n\u003ca href=\"https://opencollective.com/blacksky/backer/13/website?requireActive=false\" rel=\"nofollow\"\u003e\u003cimg src=\"https://camo.githubusercontent.com/318d98384c23e8fcb028ad9d8c741a3588dce4fcefeed50331e13660d6907832/68747470733a2f2f6f70656e636f6c6c6563746976652e636f6d2f626c61636b736b792f6261636b65722f31332f6176617461722e7376673f726571756972654163746976653d66616c7365\" data-canonical-src=\"https://opencollective.com/blacksky/backer/13/avatar.svg?requireActive=false\" style=\"max-width: 100%;\"\u003e\u003c/a\u003e\n\u003ca href=\"https://opencollective.com/blacksky/backer/14/website?requireActive=false\" rel=\"nofollow\"\u003e\u003cimg src=\"https://camo.githubusercontent.com/7e5355e3e34ac25f36f7ebef5e55d812f488e3b14d8946fc4331cbbd9640c5a0/68747470733a2f2f6f70656e636f6c6c6563746976652e636f6d2f626c61636b736b792f6261636b65722f31342f6176617461722e7376673f726571756972654163746976653d66616c7365\" data-canonical-src=\"https://opencollective.com/blacksky/backer/14/avatar.svg?requireActive=false\" style=\"max-width: 100%;\"\u003e\u003c/a\u003e\n\u003ca href=\"https://opencollective.com/blacksky/backer/15/website?requireActive=false\" rel=\"nofollow\"\u003e\u003cimg src=\"https://camo.githubusercontent.com/13f861156da2f06c6a7b2c81b5fbb0c46aecbb53521975cecfb8bcadd37dc21f/68747470733a2f2f6f70656e636f6c6c6563746976652e636f6d2f626c61636b736b792f6261636b65722f31352f6176617461722e7376673f726571756972654163746976653d66616c7365\" data-canonical-src=\"https://opencollective.com/blacksky/backer/15/avatar.svg?requireActive=false\" style=\"max-width: 100%;\"\u003e\u003c/a\u003e\n\u003ca href=\"https://opencollective.com/blacksky/backer/16/website?requireActive=false\" rel=\"nofollow\"\u003e\u003cimg src=\"https://camo.githubusercontent.com/3e080f2c44ff21983c90981e0c513a025752e2e86c5177b2925e1a30406e8b58/68747470733a2f2f6f70656e636f6c6c6563746976652e636f6d2f626c61636b736b792f6261636b65722f31362f6176617461722e7376673f726571756972654163746976653d66616c7365\" data-canonical-src=\"https://opencollective.com/blacksky/backer/16/avatar.svg?requireActive=false\" style=\"max-width: 100%;\"\u003e\u003c/a\u003e\n\u003ca href=\"https://opencollective.com/blacksky/backer/17/website?requireActive=false\" rel=\"nofollow\"\u003e\u003cimg src=\"https://camo.githubusercontent.com/dee8153bb67d8652d6839ca49ed72524c7394f77ab9026fb7e200e825ea117be/68747470733a2f2f6f70656e636f6c6c6563746976652e636f6d2f626c61636b736b792f6261636b65722f31372f6176617461722e7376673f726571756972654163746976653d66616c7365\" data-canonical-src=\"https://opencollective.com/blacksky/backer/17/avatar.svg?requireActive=false\" style=\"max-width: 100%;\"\u003e\u003c/a\u003e\n\u003ca href=\"https://opencollective.com/blacksky/backer/18/website?requireActive=false\" rel=\"nofollow\"\u003e\u003cimg src=\"https://camo.githubusercontent.com/eeaaf77fa73baf35ec5d21fc4d369f0276e76286d446959c6558832e0511b321/68747470733a2f2f6f70656e636f6c6c6563746976652e636f6d2f626c61636b736b792f6261636b65722f31382f6176617461722e7376673f726571756972654163746976653d66616c7365\" data-canonical-src=\"https://opencollective.com/blacksky/backer/18/avatar.svg?requireActive=false\" style=\"max-width: 100%;\"\u003e\u003c/a\u003e\n\u003ca href=\"https://opencollective.com/blacksky/backer/19/website?requireActive=false\" rel=\"nofollow\"\u003e\u003cimg src=\"https://camo.githubusercontent.com/d4704549f0ddde89584851b7bb597f76e8d7649c0ba87fe153eeed78e4f2f56a/68747470733a2f2f6f70656e636f6c6c6563746976652e636f6d2f626c61636b736b792f6261636b65722f31392f6176617461722e7376673f726571756972654163746976653d66616c7365\" data-canonical-src=\"https://opencollective.com/blacksky/backer/19/avatar.svg?requireActive=false\" style=\"max-width: 100%;\"\u003e\u003c/a\u003e\n\u003ca href=\"https://opencollective.com/blacksky/backer/20/website?requireActive=false\" rel=\"nofollow\"\u003e\u003cimg src=\"https://camo.githubusercontent.com/daf427fef98c2d0dd6771e97aff39be31aa1a45cff2495c839b3753981b45e81/68747470733a2f2f6f70656e636f6c6c6563746976652e636f6d2f626c61636b736b792f6261636b65722f32302f6176617461722e7376673f726571756972654163746976653d66616c7365\" data-canonical-src=\"https://opencollective.com/blacksky/backer/20/avatar.svg?requireActive=false\" style=\"max-width: 100%;\"\u003e\u003c/a\u003e\n\u003ca href=\"https://opencollective.com/blacksky/backer/21/website?requireActive=false\" rel=\"nofollow\"\u003e\u003cimg src=\"https://camo.githubusercontent.com/748a9ed36c13a3a24f8e3d213c3fd5ede9c1dc2da695c086b0efc92b18503ba9/68747470733a2f2f6f70656e636f6c6c6563746976652e636f6d2f626c61636b736b792f6261636b65722f32312f6176617461722e7376673f726571756972654163746976653d66616c7365\" data-canonical-src=\"https://opencollective.com/blacksky/backer/21/avatar.svg?requireActive=false\" style=\"max-width: 100%;\"\u003e\u003c/a\u003e\n\u003ca href=\"https://opencollective.com/blacksky/backer/22/website?requireActive=false\" rel=\"nofollow\"\u003e\u003cimg src=\"https://camo.githubusercontent.com/d546ddc667925ca0af1e21bfe0a002985c1a7281f1c0a83385a78c9e4504157d/68747470733a2f2f6f70656e636f6c6c6563746976652e636f6d2f626c61636b736b792f6261636b65722f32322f6176617461722e7376673f726571756972654163746976653d66616c7365\" data-canonical-src=\"https://opencollective.com/blacksky/backer/22/avatar.svg?requireActive=false\" style=\"max-width: 100%;\"\u003e\u003c/a\u003e\n\u003ca href=\"https://opencollective.com/blacksky/backer/23/website?requireActive=false\" rel=\"nofollow\"\u003e\u003cimg src=\"https://camo.githubusercontent.com/5b5c1472e2f6efb613bb6801a65d510631dba6f6d4ddf3d11933b7f3a4bfbba1/68747470733a2f2f6f70656e636f6c6c6563746976652e636f6d2f626c61636b736b792f6261636b65722f32332f6176617461722e7376673f726571756972654163746976653d66616c7365\" data-canonical-src=\"https://opencollective.com/blacksky/backer/23/avatar.svg?requireActive=false\" style=\"max-width: 100%;\"\u003e\u003c/a\u003e\n\u003ca href=\"https://opencollective.com/blacksky/backer/24/website?requireActive=false\" rel=\"nofollow\"\u003e\u003cimg src=\"https://camo.githubusercontent.com/ed4221c737c817d195a8b337d5937e9852a87387fb47ec8051bb61f8d1166b64/68747470733a2f2f6f70656e636f6c6c6563746976652e636f6d2f626c61636b736b792f6261636b65722f32342f6176617461722e7376673f726571756972654163746976653d66616c7365\" data-canonical-src=\"https://opencollective.com/blacksky/backer/24/avatar.svg?requireActive=false\" style=\"max-width: 100%;\"\u003e\u003c/a\u003e\n\u003ca href=\"https://opencollective.com/blacksky/backer/25/website?requireActive=false\" rel=\"nofollow\"\u003e\u003cimg src=\"https://camo.githubusercontent.com/4f419491bccc69c81288d24af43b68a226e939400dd3500d29c1c300d72f263b/68747470733a2f2f6f70656e636f6c6c6563746976652e636f6d2f626c61636b736b792f6261636b65722f32352f6176617461722e7376673f726571756972654163746976653d66616c7365\" data-canonical-src=\"https://opencollective.com/blacksky/backer/25/avatar.svg?requireActive=false\" style=\"max-width: 100%;\"\u003e\u003c/a\u003e\n\u003ca href=\"https://opencollective.com/blacksky/backer/26/website?requireActive=false\" rel=\"nofollow\"\u003e\u003cimg src=\"https://camo.githubusercontent.com/c34aed679993b947d78930394b3d02c084da1065512ba1b887f2bc34d6635557/68747470733a2f2f6f70656e636f6c6c6563746976652e636f6d2f626c61636b736b792f6261636b65722f32362f6176617461722e7376673f726571756972654163746976653d66616c7365\" data-canonical-src=\"https://opencollective.com/blacksky/backer/26/avatar.svg?requireActive=false\" style=\"max-width: 100%;\"\u003e\u003c/a\u003e\n\u003ca href=\"https://opencollective.com/blacksky/backer/27/website?requireActive=false\" rel=\"nofollow\"\u003e\u003cimg src=\"https://camo.githubusercontent.com/241c8386c7f5ee5009e1440db3184124f5c46fac010919860cf3034285d47709/68747470733a2f2f6f70656e636f6c6c6563746976652e636f6d2f626c61636b736b792f6261636b65722f32372f6176617461722e7376673f726571756972654163746976653d66616c7365\" data-canonical-src=\"https://opencollective.com/blacksky/backer/27/avatar.svg?requireActive=false\" style=\"max-width: 100%;\"\u003e\u003c/a\u003e\n\u003ca href=\"https://opencollective.com/blacksky/backer/28/website?requireActive=false\" rel=\"nofollow\"\u003e\u003cimg src=\"https://camo.githubusercontent.com/281de08b735f7d8ea3aa18314251e40ad8a3ec8303554c657b1307a066ca5820/68747470733a2f2f6f70656e636f6c6c6563746976652e636f6d2f626c61636b736b792f6261636b65722f32382f6176617461722e7376673f726571756972654163746976653d66616c7365\" data-canonical-src=\"https://opencollective.com/blacksky/backer/28/avatar.svg?requireActive=false\" style=\"max-width: 100%;\"\u003e\u003c/a\u003e\n\u003ca href=\"https://opencollective.com/blacksky/backer/29/website?requireActive=false\" rel=\"nofollow\"\u003e\u003cimg src=\"https://camo.githubusercontent.com/9911b8a89c78994ab6249effd57fdf165ca27eb7c988d4f9621d7ebdae7d4ec2/68747470733a2f2f6f70656e636f6c6c6563746976652e636f6d2f626c61636b736b792f6261636b65722f32392f6176617461722e7376673f726571756972654163746976653d66616c7365\" data-canonical-src=\"https://opencollective.com/blacksky/backer/29/avatar.svg?requireActive=false\" style=\"max-width: 100%;\"\u003e\u003c/a\u003e\n\u003ca href=\"https://opencollective.com/blacksky/backer/30/website?requireActive=false\" rel=\"nofollow\"\u003e\u003cimg src=\"https://camo.githubusercontent.com/d05f43d3dfa3c9343e84b50ef9b937d65c85bc476aeba460d2d748d9d626aba1/68747470733a2f2f6f70656e636f6c6c6563746976652e636f6d2f626c61636b736b792f6261636b65722f33302f6176617461722e7376673f726571756972654163746976653d66616c7365\" data-canonical-src=\"https://opencollective.com/blacksky/backer/30/avatar.svg?requireActive=false\" style=\"max-width: 100%;\"\u003e\u003c/a\u003e\n\u003ca href=\"https://opencollective.com/blacksky/backer/31/website?requireActive=false\" rel=\"nofollow\"\u003e\u003cimg src=\"https://camo.githubusercontent.com/7484f50f4eef940ff3e48e760897ef669ddc811e8d0caf4bb413a50264cef583/68747470733a2f2f6f70656e636f6c6c6563746976652e636f6d2f626c61636b736b792f6261636b65722f33312f6176617461722e7376673f726571756972654163746976653d66616c7365\" data-canonical-src=\"https://opencollective.com/blacksky/backer/31/avatar.svg?requireActive=false\" style=\"max-width: 100%;\"\u003e\u003c/a\u003e\n\u003ca href=\"https://opencollective.com/blacksky/backer/32/website?requireActive=false\" rel=\"nofollow\"\u003e\u003cimg src=\"https://camo.githubusercontent.com/15049ebd77fa4bd149b659e9265b28ede3623e75f192e8dbc2e43d64bc7a9540/68747470733a2f2f6f70656e636f6c6c6563746976652e636f6d2f626c61636b736b792f6261636b65722f33322f6176617461722e7376673f726571756972654163746976653d66616c7365\" data-canonical-src=\"https://opencollective.com/blacksky/backer/32/avatar.svg?requireActive=false\" style=\"max-width: 100%;\"\u003e\u003c/a\u003e\n\u003ca href=\"https://opencollective.com/blacksky/backer/33/website?requireActive=false\" rel=\"nofollow\"\u003e\u003cimg src=\"https://camo.githubusercontent.com/d3abc8abd14bd3913083ef112ec622e2f1985174b4a97a0c624fa06fc7768eb8/68747470733a2f2f6f70656e636f6c6c6563746976652e636f6d2f626c61636b736b792f6261636b65722f33332f6176617461722e7376673f726571756972654163746976653d66616c7365\" data-canonical-src=\"https://opencollective.com/blacksky/backer/33/avatar.svg?requireActive=false\" style=\"max-width: 100%;\"\u003e\u003c/a\u003e\n\u003ca href=\"https://opencollective.com/blacksky/backer/34/website?requireActive=false\" rel=\"nofollow\"\u003e\u003cimg src=\"https://camo.githubusercontent.com/f1303b2297269680249d05d466469ec7f761cd0c416d2f1ee4ab9744e9a30a8c/68747470733a2f2f6f70656e636f6c6c6563746976652e636f6d2f626c61636b736b792f6261636b65722f33342f6176617461722e7376673f726571756972654163746976653d66616c7365\" data-canonical-src=\"https://opencollective.com/blacksky/backer/34/avatar.svg?requireActive=false\" style=\"max-width: 100%;\"\u003e\u003c/a\u003e\n\u003ca href=\"https://opencollective.com/blacksky/backer/35/website?requireActive=false\" rel=\"nofollow\"\u003e\u003cimg src=\"https://camo.githubusercontent.com/84e15e0f63c2c90cfc180706e26fa46fc4ee241505b971c6a64db21b01f8e926/68747470733a2f2f6f70656e636f6c6c6563746976652e636f6d2f626c61636b736b792f6261636b65722f33352f6176617461722e7376673f726571756972654163746976653d66616c7365\" data-canonical-src=\"https://opencollective.com/blacksky/backer/35/avatar.svg?requireActive=false\" style=\"max-width: 100%;\"\u003e\u003c/a\u003e\n\u003ca href=\"https://opencollective.com/blacksky/backer/36/website?requireActive=false\" rel=\"nofollow\"\u003e\u003cimg src=\"https://camo.githubusercontent.com/d671c6e7b20daff284f19c506db9101de09ec012c17568a5c1c3b9653a1d65f6/68747470733a2f2f6f70656e636f6c6c6563746976652e636f6d2f626c61636b736b792f6261636b65722f33362f6176617461722e7376673f726571756972654163746976653d66616c7365\" data-canonical-src=\"https://opencollective.com/blacksky/backer/36/avatar.svg?requireActive=false\" style=\"max-width: 100%;\"\u003e\u003c/a\u003e\n\u003ca href=\"https://opencollective.com/blacksky/backer/37/website?requireActive=false\" rel=\"nofollow\"\u003e\u003cimg src=\"https://camo.githubusercontent.com/413df5737b03c816b2d97f5e960fecf6b349f9f475db3118fec2cc855f514ac2/68747470733a2f2f6f70656e636f6c6c6563746976652e636f6d2f626c61636b736b792f6261636b65722f33372f6176617461722e7376673f726571756972654163746976653d66616c7365\" data-canonical-src=\"https://opencollective.com/blacksky/backer/37/avatar.svg?requireActive=false\" style=\"max-width: 100%;\"\u003e\u003c/a\u003e\n\u003ca href=\"https://opencollective.com/blacksky/backer/38/website?requireActive=false\" rel=\"nofollow\"\u003e\u003cimg src=\"https://camo.githubusercontent.com/aa5e1b6fef614de5ec1d1a9bf4985e26eea5fbeceb3f793244ab3862d78d2d4c/68747470733a2f2f6f70656e636f6c6c6563746976652e636f6d2f626c61636b736b792f6261636b65722f33382f6176617461722e7376673f726571756972654163746976653d66616c7365\" data-canonical-src=\"https://opencollective.com/blacksky/backer/38/avatar.svg?requireActive=false\" style=\"max-width: 100%;\"\u003e\u003c/a\u003e\n\u003ca href=\"https://opencollective.com/blacksky/backer/39/website?requireActive=false\" rel=\"nofollow\"\u003e\u003cimg src=\"https://camo.githubusercontent.com/48ecc8848bd467cfb76512d31b6ed5f97bbda8a3e0393242814313a8cb84581a/68747470733a2f2f6f70656e636f6c6c6563746976652e636f6d2f626c61636b736b792f6261636b65722f33392f6176617461722e7376673f726571756972654163746976653d66616c7365\" data-canonical-src=\"https://opencollective.com/blacksky/backer/39/avatar.svg?requireActive=false\" style=\"max-width: 100%;\"\u003e\u003c/a\u003e\n\u003ca href=\"https://opencollective.com/blacksky/backer/40/website?requireActive=false\" rel=\"nofollow\"\u003e\u003cimg src=\"https://camo.githubusercontent.com/554f422244e414c05e659f1af9bcb87c9c70489f2539275243fc36ba01b9df9f/68747470733a2f2f6f70656e636f6c6c6563746976652e636f6d2f626c61636b736b792f6261636b65722f34302f6176617461722e7376673f726571756972654163746976653d66616c7365\" data-canonical-src=\"https://opencollective.com/blacksky/backer/40/avatar.svg?requireActive=false\" style=\"max-width: 100%;\"\u003e\u003c/a\u003e\n\u003ca href=\"https://opencollective.com/blacksky/backer/41/website?requireActive=false\" rel=\"nofollow\"\u003e\u003cimg src=\"https://camo.githubusercontent.com/3c1cb4e87b5578b12baa449b1886dbde387967d4fa4a3a7ec409aa01a4e1917a/68747470733a2f2f6f70656e636f6c6c6563746976652e636f6d2f626c61636b736b792f6261636b65722f34312f6176617461722e7376673f726571756972654163746976653d66616c7365\" data-canonical-src=\"https://opencollective.com/blacksky/backer/41/avatar.svg?requireActive=false\" style=\"max-width: 100%;\"\u003e\u003c/a\u003e\n\u003ca href=\"https://opencollective.com/blacksky/backer/42/website?requireActive=false\" rel=\"nofollow\"\u003e\u003cimg src=\"https://camo.githubusercontent.com/c026b67d91748c502d0859708c10ad1177ee6288a685fefade06b3ca43e2925f/68747470733a2f2f6f70656e636f6c6c6563746976652e636f6d2f626c61636b736b792f6261636b65722f34322f6176617461722e7376673f726571756972654163746976653d66616c7365\" data-canonical-src=\"https://opencollective.com/blacksky/backer/42/avatar.svg?requireActive=false\" style=\"max-width: 100%;\"\u003e\u003c/a\u003e\n\u003ca href=\"https://opencollective.com/blacksky/backer/43/website?requireActive=false\" rel=\"nofollow\"\u003e\u003cimg src=\"https://camo.githubusercontent.com/22a38cdbf3109c57ed1fcee54b626885d22e01ae7f7b3a4a1fe07d90c7c83f5c/68747470733a2f2f6f70656e636f6c6c6563746976652e636f6d2f626c61636b736b792f6261636b65722f34332f6176617461722e7376673f726571756972654163746976653d66616c7365\" data-canonical-src=\"https://opencollective.com/blacksky/backer/43/avatar.svg?requireActive=false\" style=\"max-width: 100%;\"\u003e\u003c/a\u003e\n\u003ca href=\"https://opencollective.com/blacksky/backer/44/website?requireActive=false\" rel=\"nofollow\"\u003e\u003cimg src=\"https://camo.githubusercontent.com/70f8365ab5f78fa099b308afb413b7b746a4e48562420283d150897c417ebe14/68747470733a2f2f6f70656e636f6c6c6563746976652e636f6d2f626c61636b736b792f6261636b65722f34342f6176617461722e7376673f726571756972654163746976653d66616c7365\" data-canonical-src=\"https://opencollective.com/blacksky/backer/44/avatar.svg?requireActive=false\" style=\"max-width: 100%;\"\u003e\u003c/a\u003e\n\u003ca href=\"https://opencollective.com/blacksky/backer/45/website?requireActive=false\" rel=\"nofollow\"\u003e\u003cimg src=\"https://camo.githubusercontent.com/48ea47c18447f9547ae95c83e869af6d8e9456760a60f6871b056017c6172eb1/68747470733a2f2f6f70656e636f6c6c6563746976652e636f6d2f626c61636b736b792f6261636b65722f34352f6176617461722e7376673f726571756972654163746976653d66616c7365\" data-canonical-src=\"https://opencollective.com/blacksky/backer/45/avatar.svg?requireActive=false\" style=\"max-width: 100%;\"\u003e\u003c/a\u003e\n\u003ca href=\"https://opencollective.com/blacksky/backer/46/website?requireActive=false\" rel=\"nofollow\"\u003e\u003cimg src=\"https://camo.githubusercontent.com/e3307a8f33009faeaf36ac914f7b9ed3d917522d4958be600e892dda7f90ad1b/68747470733a2f2f6f70656e636f6c6c6563746976652e636f6d2f626c61636b736b792f6261636b65722f34362f6176617461722e7376673f726571756972654163746976653d66616c7365\" data-canonical-src=\"https://opencollective.com/blacksky/backer/46/avatar.svg?requireActive=false\" style=\"max-width: 100%;\"\u003e\u003c/a\u003e\n\u003ca href=\"https://opencollective.com/blacksky/backer/47/website?requireActive=false\" rel=\"nofollow\"\u003e\u003cimg src=\"https://camo.githubusercontent.com/7ea7f846582122abccdf26e2b634217d9cd3bd18e0295f918cf2c530620d3b17/68747470733a2f2f6f70656e636f6c6c6563746976652e636f6d2f626c61636b736b792f6261636b65722f34372f6176617461722e7376673f726571756972654163746976653d66616c7365\" data-canonical-src=\"https://opencollective.com/blacksky/backer/47/avatar.svg?requireActive=false\" style=\"max-width: 100%;\"\u003e\u003c/a\u003e\n\u003ca href=\"https://opencollective.com/blacksky/backer/48/website?requireActive=false\" rel=\"nofollow\"\u003e\u003cimg src=\"https://camo.githubusercontent.com/38e639e49cb73170e39f162822bf105cfceff1d09976368a0e6ddeafb3a0af22/68747470733a2f2f6f70656e636f6c6c6563746976652e636f6d2f626c61636b736b792f6261636b65722f34382f6176617461722e7376673f726571756972654163746976653d66616c7365\" data-canonical-src=\"https://opencollective.com/blacksky/backer/48/avatar.svg?requireActive=false\" style=\"max-width: 100%;\"\u003e\u003c/a\u003e\n\u003ca href=\"https://opencollective.com/blacksky/backer/49/website?requireActive=false\" rel=\"nofollow\"\u003e\u003cimg src=\"https://camo.githubusercontent.com/e41fdc3ec5792e1463438ebe6bc6a97760028db506014cd5f8d7c4cc6e0bff9f/68747470733a2f2f6f70656e636f6c6c6563746976652e636f6d2f626c61636b736b792f6261636b65722f34392f6176617461722e7376673f726571756972654163746976653d66616c7365\" data-canonical-src=\"https://opencollective.com/blacksky/backer/49/avatar.svg?requireActive=false\" style=\"max-width: 100%;\"\u003e\u003c/a\u003e\n\u003ca href=\"https://opencollective.com/blacksky/backer/50/website?requireActive=false\" rel=\"nofollow\"\u003e\u003cimg src=\"https://camo.githubusercontent.com/ee0010a279e66b9a4e87df7ec62c143acdf08152c870867b8b86623da6a5f8f3/68747470733a2f2f6f70656e636f6c6c6563746976652e636f6d2f626c61636b736b792f6261636b65722f35302f6176617461722e7376673f726571756972654163746976653d66616c7365\" data-canonical-src=\"https://opencollective.com/blacksky/backer/50/avatar.svg?requireActive=false\" style=\"max-width: 100%;\"\u003e\u003c/a\u003e\n\u003ca href=\"https://opencollective.com/blacksky/backer/51/website?requireActive=false\" rel=\"nofollow\"\u003e\u003cimg src=\"https://camo.githubusercontent.com/7c3aa9d91fefddf56f4cab7c44986efab79c5bd769b402c8d4b6a6188520f99d/68747470733a2f2f6f70656e636f6c6c6563746976652e636f6d2f626c61636b736b792f6261636b65722f35312f6176617461722e7376673f726571756972654163746976653d66616c7365\" data-canonical-src=\"https://opencollective.com/blacksky/backer/51/avatar.svg?requireActive=false\" style=\"max-width: 100%;\"\u003e\u003c/a\u003e\n\u003ca href=\"https://opencollective.com/blacksky/backer/52/website?requireActive=false\" rel=\"nofollow\"\u003e\u003cimg src=\"https://camo.githubusercontent.com/aa34615869104c3f2dae2418b1e58b852a5b1768572de4e4bb7331ea4d80e4f5/68747470733a2f2f6f70656e636f6c6c6563746976652e636f6d2f626c61636b736b792f6261636b65722f35322f6176617461722e7376673f726571756972654163746976653d66616c7365\" data-canonical-src=\"https://opencollective.com/blacksky/backer/52/avatar.svg?requireActive=false\" style=\"max-width: 100%;\"\u003e\u003c/a\u003e\n\u003ca href=\"https://opencollective.com/blacksky/backer/53/website?requireActive=false\" rel=\"nofollow\"\u003e\u003cimg src=\"https://camo.githubusercontent.com/97c37a2eedfb980689112816a3ed0f2f4bf7727e8b6365874a73dc1a8848fe58/68747470733a2f2f6f70656e636f6c6c6563746976652e636f6d2f626c61636b736b792f6261636b65722f35332f6176617461722e7376673f726571756972654163746976653d66616c7365\" data-canonical-src=\"https://opencollective.com/blacksky/backer/53/avatar.svg?requireActive=false\" style=\"max-width: 100%;\"\u003e\u003c/a\u003e\n\u003ca href=\"https://opencollective.com/blacksky/backer/54/website?requireActive=false\" rel=\"nofollow\"\u003e\u003cimg src=\"https://camo.githubusercontent.com/9d0ddfc1120a4cc2e0ba20694221fd017abdc8c31ab65bd316560ca6557d5165/68747470733a2f2f6f70656e636f6c6c6563746976652e636f6d2f626c61636b736b792f6261636b65722f35342f6176617461722e7376673f726571756972654163746976653d66616c7365\" data-canonical-src=\"https://opencollective.com/blacksky/backer/54/avatar.svg?requireActive=false\" style=\"max-width: 100%;\"\u003e\u003c/a\u003e\n\u003ca href=\"https://opencollective.com/blacksky/backer/55/website?requireActive=false\" rel=\"nofollow\"\u003e\u003cimg src=\"https://camo.githubusercontent.com/37c40c562644fba8740287806f6e8bb7036bbb022c53ef8a3353823ac36d04b2/68747470733a2f2f6f70656e636f6c6c6563746976652e636f6d2f626c61636b736b792f6261636b65722f35352f6176617461722e7376673f726571756972654163746976653d66616c7365\" data-canonical-src=\"https://opencollective.com/blacksky/backer/55/avatar.svg?requireActive=false\" style=\"max-width: 100%;\"\u003e\u003c/a\u003e\n\u003ca href=\"https://opencollective.com/blacksky/backer/56/website?requireActive=false\" rel=\"nofollow\"\u003e\u003cimg src=\"https://camo.githubusercontent.com/3cb7a7a07eab1d62dc4fafcc4979239d5baa30231731a87e9a164f2c5f208916/68747470733a2f2f6f70656e636f6c6c6563746976652e636f6d2f626c61636b736b792f6261636b65722f35362f6176617461722e7376673f726571756972654163746976653d66616c7365\" data-canonical-src=\"https://opencollective.com/blacksky/backer/56/avatar.svg?requireActive=false\" style=\"max-width: 100%;\"\u003e\u003c/a\u003e\n\u003ca href=\"https://opencollective.com/blacksky/backer/57/website?requireActive=false\" rel=\"nofollow\"\u003e\u003cimg src=\"https://camo.githubusercontent.com/640fc582d6e8c3d47f5875a95e8332083ba884ef304329e8f4bb2945ae25c371/68747470733a2f2f6f70656e636f6c6c6563746976652e636f6d2f626c61636b736b792f6261636b65722f35372f6176617461722e7376673f726571756972654163746976653d66616c7365\" data-canonical-src=\"https://opencollective.com/blacksky/backer/57/avatar.svg?requireActive=false\" style=\"max-width: 100%;\"\u003e\u003c/a\u003e\n\u003ca href=\"https://opencollective.com/blacksky/backer/58/website?requireActive=false\" rel=\"nofollow\"\u003e\u003cimg src=\"https://camo.githubusercontent.com/9087f9874891df25ce02cf27ecb5870651fc4cb9a7d20bf3b2c8702056fe8b23/68747470733a2f2f6f70656e636f6c6c6563746976652e636f6d2f626c61636b736b792f6261636b65722f35382f6176617461722e7376673f726571756972654163746976653d66616c7365\" data-canonical-src=\"https://opencollective.com/blacksky/backer/58/avatar.svg?requireActive=false\" style=\"max-width: 100%;\"\u003e\u003c/a\u003e\n\u003ca href=\"https://opencollective.com/blacksky/backer/59/website?requireActive=false\" rel=\"nofollow\"\u003e\u003cimg src=\"https://camo.githubusercontent.com/aa82c42e94ce80cfa730458a8bba3e79dc4d531ed1bc70117b5b988c2a7a9b22/68747470733a2f2f6f70656e636f6c6c6563746976652e636f6d2f626c61636b736b792f6261636b65722f35392f6176617461722e7376673f726571756972654163746976653d66616c7365\" data-canonical-src=\"https://opencollective.com/blacksky/backer/59/avatar.svg?requireActive=false\" style=\"max-width: 100%;\"\u003e\u003c/a\u003e\n\u003ca href=\"https://opencollective.com/blacksky/backer/60/website?requireActive=false\" rel=\"nofollow\"\u003e\u003cimg src=\"https://camo.githubusercontent.com/fed2811c73c455e400de3eb764ab9f15aa2f223eef985cb469a0ae100f39a4b1/68747470733a2f2f6f70656e636f6c6c6563746976652e636f6d2f626c61636b736b792f6261636b65722f36302f6176617461722e7376673f726571756972654163746976653d66616c7365\" data-canonical-src=\"https://opencollective.com/blacksky/backer/60/avatar.svg?requireActive=false\" style=\"max-width: 100%;\"\u003e\u003c/a\u003e\n\u003ca href=\"https://opencollective.com/blacksky/backer/61/website?requireActive=false\" rel=\"nofollow\"\u003e\u003cimg src=\"https://camo.githubusercontent.com/48aec54f347dc243774b5b09887c9524c676a626c2b3d59f548865e9960e3a8f/68747470733a2f2f6f70656e636f6c6c6563746976652e636f6d2f626c61636b736b792f6261636b65722f36312f6176617461722e7376673f726571756972654163746976653d66616c7365\" data-canonical-src=\"https://opencollective.com/blacksky/backer/61/avatar.svg?requireActive=false\" style=\"max-width: 100%;\"\u003e\u003c/a\u003e\n\u003ca href=\"https://opencollective.com/blacksky/backer/62/website?requireActive=false\" rel=\"nofollow\"\u003e\u003cimg src=\"https://camo.githubusercontent.com/758a8619feac15c143d2124840a8dcc6daf78a001a20f2bcd7f9cfdb4474e365/68747470733a2f2f6f70656e636f6c6c6563746976652e636f6d2f626c61636b736b792f6261636b65722f36322f6176617461722e7376673f726571756972654163746976653d66616c7365\" data-canonical-src=\"https://opencollective.com/blacksky/backer/62/avatar.svg?requireActive=false\" style=\"max-width: 100%;\"\u003e\u003c/a\u003e\n\u003ca href=\"https://opencollective.com/blacksky/backer/63/website?requireActive=false\" rel=\"nofollow\"\u003e\u003cimg src=\"https://camo.githubusercontent.com/b68028458fecf32850d2a8954ae5f558c63bb8b0b4f6431378949a23d684ccea/68747470733a2f2f6f70656e636f6c6c6563746976652e636f6d2f626c61636b736b792f6261636b65722f36332f6176617461722e7376673f726571756972654163746976653d66616c7365\" data-canonical-src=\"https://opencollective.com/blacksky/backer/63/avatar.svg?requireActive=false\" style=\"max-width: 100%;\"\u003e\u003c/a\u003e\n\u003ca href=\"https://opencollective.com/blacksky/backer/64/website?requireActive=false\" rel=\"nofollow\"\u003e\u003cimg src=\"https://camo.githubusercontent.com/39dfc1f6ff77c91b6982b1eff077e97060c454f82b3c2ac7b48e2a0af0d9dd00/68747470733a2f2f6f70656e636f6c6c6563746976652e636f6d2f626c61636b736b792f6261636b65722f36342f6176617461722e7376673f726571756972654163746976653d66616c7365\" data-canonical-src=\"https://opencollective.com/blacksky/backer/64/avatar.svg?requireActive=false\" style=\"max-width: 100%;\"\u003e\u003c/a\u003e\n\u003ca href=\"https://opencollective.com/blacksky/backer/65/website?requireActive=false\" rel=\"nofollow\"\u003e\u003cimg src=\"https://camo.githubusercontent.com/1b698744f8826416d5eddcf2b6598f0e9e314c758150df9a78f33115baccf057/68747470733a2f2f6f70656e636f6c6c6563746976652e636f6d2f626c61636b736b792f6261636b65722f36352f6176617461722e7376673f726571756972654163746976653d66616c7365\" data-canonical-src=\"https://opencollective.com/blacksky/backer/65/avatar.svg?requireActive=false\" style=\"max-width: 100%;\"\u003e\u003c/a\u003e\n\u003ca href=\"https://opencollective.com/blacksky/backer/66/website?requireActive=false\" rel=\"nofollow\"\u003e\u003cimg src=\"https://camo.githubusercontent.com/30d881f7054efe8897328ff0f13eefd360782aa9b8ecde2b6432d5145fd78901/68747470733a2f2f6f70656e636f6c6c6563746976652e636f6d2f626c61636b736b792f6261636b65722f36362f6176617461722e7376673f726571756972654163746976653d66616c7365\" data-canonical-src=\"https://opencollective.com/blacksky/backer/66/avatar.svg?requireActive=false\" style=\"max-width: 100%;\"\u003e\u003c/a\u003e\n\u003ca href=\"https://opencollective.com/blacksky/backer/67/website?requireActive=false\" rel=\"nofollow\"\u003e\u003cimg src=\"https://camo.githubusercontent.com/85dd6e8e2a4c25fb2e34ee02345233cde823ce7af4f69413a0a749470434b03e/68747470733a2f2f6f70656e636f6c6c6563746976652e636f6d2f626c61636b736b792f6261636b65722f36372f6176617461722e7376673f726571756972654163746976653d66616c7365\" data-canonical-src=\"https://opencollective.com/blacksky/backer/67/avatar.svg?requireActive=false\" style=\"max-width: 100%;\"\u003e\u003c/a\u003e\n\u003ca href=\"https://opencollective.com/blacksky/backer/68/website?requireActive=false\" rel=\"nofollow\"\u003e\u003cimg src=\"https://camo.githubusercontent.com/1a49866b1af26b9a822fda10c68b4bfa901200f1d9a79553ab1fe827f8e72dcf/68747470733a2f2f6f70656e636f6c6c6563746976652e636f6d2f626c61636b736b792f6261636b65722f36382f6176617461722e7376673f726571756972654163746976653d66616c7365\" data-canonical-src=\"https://opencollective.com/blacksky/backer/68/avatar.svg?requireActive=false\" style=\"max-width: 100%;\"\u003e\u003c/a\u003e\n\u003ca href=\"https://opencollective.com/blacksky/backer/69/website?requireActive=false\" rel=\"nofollow\"\u003e\u003cimg src=\"https://camo.githubusercontent.com/4a93e5aa886487303583be3467d1218b8f9f69b4d2a3f5f399e2828ecc65481a/68747470733a2f2f6f70656e636f6c6c6563746976652e636f6d2f626c61636b736b792f6261636b65722f36392f6176617461722e7376673f726571756972654163746976653d66616c7365\" data-canonical-src=\"https://opencollective.com/blacksky/backer/69/avatar.svg?requireActive=false\" style=\"max-width: 100%;\"\u003e\u003c/a\u003e\n\u003ca href=\"https://opencollective.com/blacksky/backer/70/website?requireActive=false\" rel=\"nofollow\"\u003e\u003cimg src=\"https://camo.githubusercontent.com/7fcfbf6aa0e0d2909b620a8e6b279b2cad95104eccb79b33acbfd93220f8a05b/68747470733a2f2f6f70656e636f6c6c6563746976652e636f6d2f626c61636b736b792f6261636b65722f37302f6176617461722e7376673f726571756972654163746976653d66616c7365\" data-canonical-src=\"https://opencollective.com/blacksky/backer/70/avatar.svg?requireActive=false\" style=\"max-width: 100%;\"\u003e\u003c/a\u003e\n\u003ca href=\"https://opencollective.com/blacksky/backer/71/website?requireActive=false\" rel=\"nofollow\"\u003e\u003cimg src=\"https://camo.githubusercontent.com/5f059cfdc10d00ba8a1b3e9c27557ad6a57a8c9e2582320a8f895ef37207f94c/68747470733a2f2f6f70656e636f6c6c6563746976652e636f6d2f626c61636b736b792f6261636b65722f37312f6176617461722e7376673f726571756972654163746976653d66616c7365\" data-canonical-src=\"https://opencollective.com/blacksky/backer/71/avatar.svg?requireActive=false\" style=\"max-width: 100%;\"\u003e\u003c/a\u003e\n\u003ca href=\"https://opencollective.com/blacksky/backer/72/website?requireActive=false\" rel=\"nofollow\"\u003e\u003cimg src=\"https://camo.githubusercontent.com/d27e5bbe00de8ff0d9a3b9b874f68d3c2665c06f3510529bb554ea279074f18c/68747470733a2f2f6f70656e636f6c6c6563746976652e636f6d2f626c61636b736b792f6261636b65722f37322f6176617461722e7376673f726571756972654163746976653d66616c7365\" data-canonical-src=\"https://opencollective.com/blacksky/backer/72/avatar.svg?requireActive=false\" style=\"max-width: 100%;\"\u003e\u003c/a\u003e\n\u003ca href=\"https://opencollective.com/blacksky/backer/73/website?requireActive=false\" rel=\"nofollow\"\u003e\u003cimg src=\"https://camo.githubusercontent.com/224533a50af1e6f5de8b6e5282c263d41492461abc3db5cd1d16b4f03390cffd/68747470733a2f2f6f70656e636f6c6c6563746976652e636f6d2f626c61636b736b792f6261636b65722f37332f6176617461722e7376673f726571756972654163746976653d66616c7365\" data-canonical-src=\"https://opencollective.com/blacksky/backer/73/avatar.svg?requireActive=false\" style=\"max-width: 100%;\"\u003e\u003c/a\u003e\n\u003ca href=\"https://opencollective.com/blacksky/backer/74/website?requireActive=false\" rel=\"nofollow\"\u003e\u003cimg src=\"https://camo.githubusercontent.com/2b3d7a1a5d39ca8d2350ad60997181e51ceb700bb2c463ceff4882a46ea84f9d/68747470733a2f2f6f70656e636f6c6c6563746976652e636f6d2f626c61636b736b792f6261636b65722f37342f6176617461722e7376673f726571756972654163746976653d66616c7365\" data-canonical-src=\"https://opencollective.com/blacksky/backer/74/avatar.svg?requireActive=false\" style=\"max-width: 100%;\"\u003e\u003c/a\u003e\n\u003ca href=\"https://opencollective.com/blacksky/backer/75/website?requireActive=false\" rel=\"nofollow\"\u003e\u003cimg src=\"https://camo.githubusercontent.com/f6a14e6a33232250b4396450f8bb83612c290e144fb3dc2c7a67efef4b2b42c6/68747470733a2f2f6f70656e636f6c6c6563746976652e636f6d2f626c61636b736b792f6261636b65722f37352f6176617461722e7376673f726571756972654163746976653d66616c7365\" data-canonical-src=\"https://opencollective.com/blacksky/backer/75/avatar.svg?requireActive=false\" style=\"max-width: 100%;\"\u003e\u003c/a\u003e\n\u003ca href=\"https://opencollective.com/blacksky/backer/76/website?requireActive=false\" rel=\"nofollow\"\u003e\u003cimg src=\"https://camo.githubusercontent.com/27b3244d12e2a39a488f0b9ce76930e7cf9135ba02200ac3de67d69c3a03ffb6/68747470733a2f2f6f70656e636f6c6c6563746976652e636f6d2f626c61636b736b792f6261636b65722f37362f6176617461722e7376673f726571756972654163746976653d66616c7365\" data-canonical-src=\"https://opencollective.com/blacksky/backer/76/avatar.svg?requireActive=false\" style=\"max-width: 100%;\"\u003e\u003c/a\u003e\n\u003ca href=\"https://opencollective.com/blacksky/backer/77/website?requireActive=false\" rel=\"nofollow\"\u003e\u003cimg src=\"https://camo.githubusercontent.com/82b3ac269dd7d011b419f582329653920acd660e676cfb6591cc194dfe320183/68747470733a2f2f6f70656e636f6c6c6563746976652e636f6d2f626c61636b736b792f6261636b65722f37372f6176617461722e7376673f726571756972654163746976653d66616c7365\" data-canonical-src=\"https://opencollective.com/blacksky/backer/77/avatar.svg?requireActive=false\" style=\"max-width: 100%;\"\u003e\u003c/a\u003e\n\u003ca href=\"https://opencollective.com/blacksky/backer/78/website?requireActive=false\" rel=\"nofollow\"\u003e\u003cimg src=\"https://camo.githubusercontent.com/ac1a6d370d8fd97748e774bc7d29ee405346988c5c513971b0a8fa2161c22cee/68747470733a2f2f6f70656e636f6c6c6563746976652e636f6d2f626c61636b736b792f6261636b65722f37382f6176617461722e7376673f726571756972654163746976653d66616c7365\" data-canonical-src=\"https://opencollective.com/blacksky/backer/78/avatar.svg?requireActive=false\" style=\"max-width: 100%;\"\u003e\u003c/a\u003e\n\u003ca href=\"https://opencollective.com/blacksky/backer/79/website?requireActive=false\" rel=\"nofollow\"\u003e\u003cimg src=\"https://camo.githubusercontent.com/7bb61e2c6a8c0c8af9caa0d046cc4eb5ed63ba8191f3a0ed23e3fee295279929/68747470733a2f2f6f70656e636f6c6c6563746976652e636f6d2f626c61636b736b792f6261636b65722f37392f6176617461722e7376673f726571756972654163746976653d66616c7365\" data-canonical-src=\"https://opencollective.com/blacksky/backer/79/avatar.svg?requireActive=false\" style=\"max-width: 100%;\"\u003e\u003c/a\u003e\n\u003ca href=\"https://opencollective.com/blacksky/backer/80/website?requireActive=false\" rel=\"nofollow\"\u003e\u003cimg src=\"https://camo.githubusercontent.com/7931105dbf702f18486e951bd1d4d18be0adac29285240bde449b2806a439b32/68747470733a2f2f6f70656e636f6c6c6563746976652e636f6d2f626c61636b736b792f6261636b65722f38302f6176617461722e7376673f726571756972654163746976653d66616c7365\" data-canonical-src=\"https://opencollective.com/blacksky/backer/80/avatar.svg?requireActive=false\" style=\"max-width: 100%;\"\u003e\u003c/a\u003e\n\u003ca href=\"https://opencollective.com/blacksky/backer/81/website?requireActive=false\" rel=\"nofollow\"\u003e\u003cimg src=\"https://camo.githubusercontent.com/daeffc1419847475db2ff6b3b2418de256bb3d56a58d027dc059505be1fc1e31/68747470733a2f2f6f70656e636f6c6c6563746976652e636f6d2f626c61636b736b792f6261636b65722f38312f6176617461722e7376673f726571756972654163746976653d66616c7365\" data-canonical-src=\"https://opencollective.com/blacksky/backer/81/avatar.svg?requireActive=false\" style=\"max-width: 100%;\"\u003e\u003c/a\u003e\n\u003ca href=\"https://opencollective.com/blacksky/backer/82/website?requireActive=false\" rel=\"nofollow\"\u003e\u003cimg src=\"https://camo.githubusercontent.com/80420e2cdb583caefea743a75d90387d7dac76ca7c6c33e11c0b87465123df08/68747470733a2f2f6f70656e636f6c6c6563746976652e636f6d2f626c61636b736b792f6261636b65722f38322f6176617461722e7376673f726571756972654163746976653d66616c7365\" data-canonical-src=\"https://opencollective.com/blacksky/backer/82/avatar.svg?requireActive=false\" style=\"max-width: 100%;\"\u003e\u003c/a\u003e\n\u003ca href=\"https://opencollective.com/blacksky/backer/83/website?requireActive=false\" rel=\"nofollow\"\u003e\u003cimg src=\"https://camo.githubusercontent.com/51de9087bc1d9a713b89af62e9fd4886ac8bc3079a2a5722d66cb71fcb249883/68747470733a2f2f6f70656e636f6c6c6563746976652e636f6d2f626c61636b736b792f6261636b65722f38332f6176617461722e7376673f726571756972654163746976653d66616c7365\" data-canonical-src=\"https://opencollective.com/blacksky/backer/83/avatar.svg?requireActive=false\" style=\"max-width: 100%;\"\u003e\u003c/a\u003e\n\u003ca href=\"https://opencollective.com/blacksky/backer/84/website?requireActive=false\" rel=\"nofollow\"\u003e\u003cimg src=\"https://camo.githubusercontent.com/66200eae3e9877ab1ecd8a593befae460f8e67f73d6ea3c07f170696ea83bd73/68747470733a2f2f6f70656e636f6c6c6563746976652e636f6d2f626c61636b736b792f6261636b65722f38342f6176617461722e7376673f726571756972654163746976653d66616c7365\" data-canonical-src=\"https://opencollective.com/blacksky/backer/84/avatar.svg?requireActive=false\" style=\"max-width: 100%;\"\u003e\u003c/a\u003e\n\u003ca href=\"https://opencollective.com/blacksky/backer/85/website?requireActive=false\" rel=\"nofollow\"\u003e\u003cimg src=\"https://camo.githubusercontent.com/1bce54f9f6ee46b3340d3cf474acc2d100b2897cd7ed7405e7574781b6157ccf/68747470733a2f2f6f70656e636f6c6c6563746976652e636f6d2f626c61636b736b792f6261636b65722f38352f6176617461722e7376673f726571756972654163746976653d66616c7365\" data-canonical-src=\"https://opencollective.com/blacksky/backer/85/avatar.svg?requireActive=false\" style=\"max-width: 100%;\"\u003e\u003c/a\u003e\n\u003ca href=\"https://opencollective.com/blacksky/backer/86/website?requireActive=false\" rel=\"nofollow\"\u003e\u003cimg src=\"https://camo.githubusercontent.com/d55ccddb3f6640d0d4ed242f420e388e857b17e1d747c79e58a8cc3c79baec14/68747470733a2f2f6f70656e636f6c6c6563746976652e636f6d2f626c61636b736b792f6261636b65722f38362f6176617461722e7376673f726571756972654163746976653d66616c7365\" data-canonical-src=\"https://opencollective.com/blacksky/backer/86/avatar.svg?requireActive=false\" style=\"max-width: 100%;\"\u003e\u003c/a\u003e\n\u003ca href=\"https://opencollective.com/blacksky/backer/87/website?requireActive=false\" rel=\"nofollow\"\u003e\u003cimg src=\"https://camo.githubusercontent.com/8494c4289f9e915067f184a7418ff7709e44869c200355f0acd51285137244b7/68747470733a2f2f6f70656e636f6c6c6563746976652e636f6d2f626c61636b736b792f6261636b65722f38372f6176617461722e7376673f726571756972654163746976653d66616c7365\" data-canonical-src=\"https://opencollective.com/blacksky/backer/87/avatar.svg?requireActive=false\" style=\"max-width: 100%;\"\u003e\u003c/a\u003e\n\u003ca href=\"https://opencollective.com/blacksky/backer/88/website?requireActive=false\" rel=\"nofollow\"\u003e\u003cimg src=\"https://camo.githubusercontent.com/2c3b0bc775cd0add26241bf4837b7fc7ffe28314f8cf3c9ebb82e4e7680af820/68747470733a2f2f6f70656e636f6c6c6563746976652e636f6d2f626c61636b736b792f6261636b65722f38382f6176617461722e7376673f726571756972654163746976653d66616c7365\" data-canonical-src=\"https://opencollective.com/blacksky/backer/88/avatar.svg?requireActive=false\" style=\"max-width: 100%;\"\u003e\u003c/a\u003e\n\u003ca href=\"https://opencollective.com/blacksky/backer/89/website?requireActive=false\" rel=\"nofollow\"\u003e\u003cimg src=\"https://camo.githubusercontent.com/ef5c55b930b293b403fb89e9060a97b3aa3e748ffd729efa633d0c7ae146bff7/68747470733a2f2f6f70656e636f6c6c6563746976652e636f6d2f626c61636b736b792f6261636b65722f38392f6176617461722e7376673f726571756972654163746976653d66616c7365\" data-canonical-src=\"https://opencollective.com/blacksky/backer/89/avatar.svg?requireActive=false\" style=\"max-width: 100%;\"\u003e\u003c/a\u003e\n\u003ca href=\"https://opencollective.com/blacksky/backer/90/website?requireActive=false\" rel=\"nofollow\"\u003e\u003cimg src=\"https://camo.githubusercontent.com/88ce4d56e61c497b79c289f7666d7d66d0677917997395339c955406a1607da5/68747470733a2f2f6f70656e636f6c6c6563746976652e636f6d2f626c61636b736b792f6261636b65722f39302f6176617461722e7376673f726571756972654163746976653d66616c7365\" data-canonical-src=\"https://opencollective.com/blacksky/backer/90/avatar.svg?requireActive=false\" style=\"max-width: 100%;\"\u003e\u003c/a\u003e\n\u003ca href=\"https://opencollective.com/blacksky/backer/91/website?requireActive=false\" rel=\"nofollow\"\u003e\u003cimg src=\"https://camo.githubusercontent.com/8e582cd5cc744085b81e3c9c66950e5c69e12a61704390d690691fda2aef3d56/68747470733a2f2f6f70656e636f6c6c6563746976652e636f6d2f626c61636b736b792f6261636b65722f39312f6176617461722e7376673f726571756972654163746976653d66616c7365\" data-canonical-src=\"https://opencollective.com/blacksky/backer/91/avatar.svg?requireActive=false\" style=\"max-width: 100%;\"\u003e\u003c/a\u003e\n\u003ca href=\"https://opencollective.com/blacksky/backer/92/website?requireActive=false\" rel=\"nofollow\"\u003e\u003cimg src=\"https://camo.githubusercontent.com/700da2ca0e362a6f80b44daecee1e3a134b4dab5bfed0cf2bc9d9732810d968b/68747470733a2f2f6f70656e636f6c6c6563746976652e636f6d2f626c61636b736b792f6261636b65722f39322f6176617461722e7376673f726571756972654163746976653d66616c7365\" data-canonical-src=\"https://opencollective.com/blacksky/backer/92/avatar.svg?requireActive=false\" style=\"max-width: 100%;\"\u003e\u003c/a\u003e\n\u003ca href=\"https://opencollective.com/blacksky/backer/93/website?requireActive=false\" rel=\"nofollow\"\u003e\u003cimg src=\"https://camo.githubusercontent.com/eb01de354cc1d2ba2c05849d27f20a24810b67d021bd02e7d95e091baac450ca/68747470733a2f2f6f70656e636f6c6c6563746976652e636f6d2f626c61636b736b792f6261636b65722f39332f6176617461722e7376673f726571756972654163746976653d66616c7365\" data-canonical-src=\"https://opencollective.com/blacksky/backer/93/avatar.svg?requireActive=false\" style=\"max-width: 100%;\"\u003e\u003c/a\u003e\n\u003ca href=\"https://opencollective.com/blacksky/backer/94/website?requireActive=false\" rel=\"nofollow\"\u003e\u003cimg src=\"https://camo.githubusercontent.com/915e98c205af945fd66481928fa708c4c0aa3372d028f6de0ef273428d2e86fb/68747470733a2f2f6f70656e636f6c6c6563746976652e636f6d2f626c61636b736b792f6261636b65722f39342f6176617461722e7376673f726571756972654163746976653d66616c7365\" data-canonical-src=\"https://opencollective.com/blacksky/backer/94/avatar.svg?requireActive=false\" style=\"max-width: 100%;\"\u003e\u003c/a\u003e\n\u003ca href=\"https://opencollective.com/blacksky/backer/95/website?requireActive=false\" rel=\"nofollow\"\u003e\u003cimg src=\"https://camo.githubusercontent.com/8254a67cf24e72cac1b8e1e26d949964480b18187fa5f18f43f0e397610bfdce/68747470733a2f2f6f70656e636f6c6c6563746976652e636f6d2f626c61636b736b792f6261636b65722f39352f6176617461722e7376673f726571756972654163746976653d66616c7365\" data-canonical-src=\"https://opencollective.com/blacksky/backer/95/avatar.svg?requireActive=false\" style=\"max-width: 100%;\"\u003e\u003c/a\u003e\n\u003ca href=\"https://opencollective.com/blacksky/backer/96/website?requireActive=false\" rel=\"nofollow\"\u003e\u003cimg src=\"https://camo.githubusercontent.com/e17d36a7f0e4c8036f575059eeedd4a9ce547ac49886cd33c4751dcb9640e774/68747470733a2f2f6f70656e636f6c6c6563746976652e636f6d2f626c61636b736b792f6261636b65722f39362f6176617461722e7376673f726571756972654163746976653d66616c7365\" data-canonical-src=\"https://opencollective.com/blacksky/backer/96/avatar.svg?requireActive=false\" style=\"max-width: 100%;\"\u003e\u003c/a\u003e\n\u003ca href=\"https://opencollective.com/blacksky/backer/97/website?requireActive=false\" rel=\"nofollow\"\u003e\u003cimg src=\"https://camo.githubusercontent.com/36ac46f8692eaa63c6e80bb3757518aa2728251c2f2f13b9b9796cdce574d9cb/68747470733a2f2f6f70656e636f6c6c6563746976652e636f6d2f626c61636b736b792f6261636b65722f39372f6176617461722e7376673f726571756972654163746976653d66616c7365\" data-canonical-src=\"https://opencollective.com/blacksky/backer/97/avatar.svg?requireActive=false\" style=\"max-width: 100%;\"\u003e\u003c/a\u003e\n\u003ca href=\"https://opencollective.com/blacksky/backer/98/website?requireActive=false\" rel=\"nofollow\"\u003e\u003cimg src=\"https://camo.githubusercontent.com/ef50f1e86bf51bd1cf7aaff7c33c366d98f61c6725cd1b6b6f373f363c46a5f3/68747470733a2f2f6f70656e636f6c6c6563746976652e636f6d2f626c61636b736b792f6261636b65722f39382f6176617461722e7376673f726571756972654163746976653d66616c7365\" data-canonical-src=\"https://opencollective.com/blacksky/backer/98/avatar.svg?requireActive=false\" style=\"max-width: 100%;\"\u003e\u003c/a\u003e\n\u003ca href=\"https://opencollective.com/blacksky/backer/99/website?requireActive=false\" rel=\"nofollow\"\u003e\u003cimg src=\"https://camo.githubusercontent.com/c0fa7d3596fdaa291421ef727b4b5988ddf91b8bdd18a4b240c5b1c6b9c862b9/68747470733a2f2f6f70656e636f6c6c6563746976652e636f6d2f626c61636b736b792f6261636b65722f39392f6176617461722e7376673f726571756972654163746976653d66616c7365\" data-canonical-src=\"https://opencollective.com/blacksky/backer/99/avatar.svg?requireActive=false\" style=\"max-width: 100%;\"\u003e\u003c/a\u003e\n\u003ca href=\"https://opencollective.com/blacksky/backer/100/website?requireActive=false\" rel=\"nofollow\"\u003e\u003cimg src=\"https://camo.githubusercontent.com/8617a80b85230d224bb8943b275dd1e26abf06e256d3ebade1475e645d78670c/68747470733a2f2f6f70656e636f6c6c6563746976652e636f6d2f626c61636b736b792f6261636b65722f3130302f6176617461722e7376673f726571756972654163746976653d66616c7365\" data-canonical-src=\"https://opencollective.com/blacksky/backer/100/avatar.svg?requireActive=false\" style=\"max-width: 100%;\"\u003e\u003c/a\u003e\u003c/p\u003e\n\u003cdiv class=\"markdown-heading\" dir=\"auto\"\u003e\u003ch2 tabindex=\"-1\" class=\"heading-element\" dir=\"auto\"\u003eContribution\u003c/h2\u003e\u003ca id=\"user-content-contribution\" class=\"anchor\" aria-label=\"Permalink: Contribution\" href=\"#contribution\"\u003e\u003csvg class=\"octicon octicon-link\" viewBox=\"0 0 16 16\" version=\"1.1\" width=\"16\" height=\"16\" aria-hidden=\"true\"\u003e\u003cpath d=\"m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z\"\u003e\u003c/path\u003e\u003c/svg\u003e\u003c/a\u003e\u003c/div\u003e\n\u003cp dir=\"auto\"\u003eWe welcome contributions from the community to help us improve and expand rsky. If you're interested in contributing, please feel free to submit issues or pull requests on the GitHub repository. We appreciate your support!\u003c/p\u003e\n\u003cp dir=\"auto\"\u003e\u003cstrong\u003eRules:\u003c/strong\u003e\u003c/p\u003e\n\u003cul dir=\"auto\"\u003e\n\u003cli\u003eWe'll try our best but may not respond to your issue or PR.\u003c/li\u003e\n\u003cli\u003eWe may close an issue or PR without much feedback.\u003c/li\u003e\n\u003cli\u003eWe may lock discussions or contributions if our attention is getting DDOSed.\u003c/li\u003e\n\u003cli\u003eWe do not provide support for build issues.\u003c/li\u003e\n\u003c/ul\u003e\n\u003cp dir=\"auto\"\u003e\u003cstrong\u003eGuidelines:\u003c/strong\u003e\u003c/p\u003e\n\u003cul dir=\"auto\"\u003e\n\u003cli\u003eStrict adherence to our \u003ca href=\"/blacksky-algorithms/rsky/blob/main/.github/CODE_OF_CONDUCT.md\"\u003eCode of Conduct\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003eImplementations should follow closely to the \u003ca href=\"https://github.com/bluesky-social/atproto\"\u003ecanonical Typescript implementation\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003eCheck for existing issues before filing a new one, please.\u003c/li\u003e\n\u003cli\u003eOpen an issue and give some time for discussion before submitting a PR.\u003c/li\u003e\n\u003cli\u003eStay away from PRs that:\n\u003cul dir=\"auto\"\u003e\n\u003cli\u003eRefactor large parts of the codebase\u003c/li\u003e\n\u003cli\u003eAdd entirely new features without prior discussion\u003c/li\u003e\n\u003cli\u003eChange the tooling or frameworks used without prior discussion\u003c/li\u003e\n\u003cli\u003eIntroduce new unnecessary dependencies\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003c/ul\u003e\n\u003cdiv class=\"markdown-heading\" dir=\"auto\"\u003e\u003ch2 tabindex=\"-1\" class=\"heading-element\" dir=\"auto\"\u003eLicense\u003c/h2\u003e\u003ca id=\"user-content-license\" class=\"anchor\" aria-label=\"Permalink: License\" href=\"#license\"\u003e\u003csvg class=\"octicon octicon-link\" viewBox=\"0 0 16 16\" version=\"1.1\" width=\"16\" height=\"16\" aria-hidden=\"true\"\u003e\u003cpath d=\"m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z\"\u003e\u003c/path\u003e\u003c/svg\u003e\u003c/a\u003e\u003c/div\u003e\n\u003cp dir=\"auto\"\u003ersky is released under the \u003ca href=\"/blacksky-algorithms/rsky/blob/main/LICENSE\"\u003eApache License 2.0\u003c/a\u003e.\u003c/p\u003e\n\u003c/article\u003e","loaded":true,"timedOut":false,"errorMessage":null,"headerInfo":{"toc":[{"level":3,"text":"\n  AT Protocol Implementation (Rust)\n","anchor":"--at-protocol-implementation-rust","htmlText":"\n  AT Protocol Implementation (Rust)\n"},{"level":2,"text":"What is in here?","anchor":"what-is-in-here","htmlText":"What is in here?"},{"level":2,"text":"About AT Protocol","anchor":"about-at-protocol","htmlText":"About AT Protocol"},{"level":2,"text":"Roadmap","anchor":"roadmap","htmlText":"Roadmap"},{"level":2,"text":"Backers","anchor":"backers","htmlText":"Backers"},{"level":2,"text":"Contribution","anchor":"contribution","htmlText":"Contribution"},{"level":2,"text":"License","anchor":"license","htmlText":"License"}],"siteNavLoginPath":"/login?return_to=https%3A%2F%2Fgithub.com%2Fblacksky-algorithms%2Frsky"}},{"displayName":"CODE_OF_CONDUCT.md","repoName":"rsky","refName":"main","path":".github/CODE_OF_CONDUCT.md","preferredFileType":"code_of_conduct","tabName":"Code of conduct","richText":null,"loaded":false,"timedOut":false,"errorMessage":null,"headerInfo":{"toc":null,"siteNavLoginPath":"/login?return_to=https%3A%2F%2Fgithub.com%2Fblacksky-algorithms%2Frsky"}},{"displayName":"LICENSE","repoName":"rsky","refName":"main","path":"LICENSE","preferredFileType":"license","tabName":"Apache-2.0","richText":null,"loaded":false,"timedOut":false,"errorMessage":null,"headerInfo":{"toc":null,"siteNavLoginPath":"/login?return_to=https%3A%2F%2Fgithub.com%2Fblacksky-algorithms%2Frsky"}}],"overviewFilesProcessingTime":0}},"appPayload":{"helpUrl":"https://docs.github.com","findFileWorkerPath":"/assets-cdn/worker/find-file-worker-1583894afd38.js","findInFileWorkerPath":"/assets-cdn/worker/find-in-file-worker-03b87d52cf57.js","githubDevUrl":null,"enabled_features":{"code_nav_ui_events":false,"overview_shared_code_dropdown_button":false,"react_blob_overlay":false,"copilot_conversational_ux_embedding_update":false,"copilot_smell_icebreaker_ux":true,"copilot_workspace":false,"accessible_code_button":true,"overview_spoofed_commit_banner_react":false}}}} main 6 Branches 0 Tags Go to file Code Folders and files Name Name Last commit message Last commit date Latest commit rudyfraser Add repo::mst::tests::deletes_records Oct 12, 2024 4e2963d · Oct 12, 2024 History 326 Commits .github .github add ci Jun 24, 2024 .idea .idea Merge branch 'main' into pds Sep 1, 2024 bots bots Remove video thumbnail posts; Prioritize url embeds over image posts Aug 1, 2024 labeler labeler Add support for multiple labels Nov 7, 2023 rsky-crypto rsky-crypto Write better READMEs Sep 21, 2024 rsky-feedgen rsky-feedgen cargo fmt Oct 12, 2024 rsky-firehose rsky-firehose Write better READMEs Sep 21, 2024 rsky-identity rsky-identity Write better READMEs Sep 21, 2024 rsky-lexicon rsky-lexicon cargo fmt Oct 12, 2024 rsky-pds rsky-pds Add repo::mst::tests::deletes_records Oct 12, 2024 rsky-syntax rsky-syntax Update AtUri fixing issues with path; Add fields to lexicons for prof… Sep 25, 2024 .dockerignore .dockerignore Reorganize proxy forwarding; Fix lexicon bugs Sep 1, 2024 .gitignore .gitignore Merge branch 'main' into pds Sep 1, 2024 Cargo.toml Cargo.toml Update libraries to be compatible with Linux Docker images Aug 30, 2024 LICENSE LICENSE Initial commit Jun 21, 2023 README.md README.md Add rules and guidelines Sep 21, 2024 rust-toolchain rust-toolchain Update for CI Oct 12, 2024 View all files Repository files navigation README Code of conduct Apache-2.0 license AT Protocol Implementation (Rust) Warning This library is a work in progress. Things will change. Things are incomplete. Things will break. Until the project reaches version 1.0.0, stability will not be guaranteed. rsky (/ˈrɪski/) is intended to be a full implementation of AT Protocol in the Rust language. Most of the code here are general purpose implementations while some (like rsky-feedgen) are specific to the use cases of the Blacksky community. What is in here? Rust Crates: Crate Docs crates.io rsky-crypto : cryptographic signing and key serialization README rsky-identity : DID and handle resolution README rsky-lexicon : schema definition language README rsky-syntax : string parsers for identifiers README Rust Services: rsky-pds : "Personal Data Server", hosting repo content for atproto accounts. rsky-feedgen : Bluesky feed generator that closely follows the use cases of the Blacksky community. rsky-firehose : Firehose consumer. About AT Protocol The Authenticated Transfer Protocol ("ATP" or "atproto") is a decentralized social media protocol, developed by Bluesky PBC . Learn more at: Overview and Guides 👈🏾 Best starting point Github Discussions 👈🏾 Great place to ask questions Protocol Specifications Blogpost on self-authenticating data structures Roadmap Feedgen and firehose consumer PDS implementation Frontend bluesky client Feedgen admin client Backers Become a backer and get your image on our README on GitHub with a link to your site. Contribution We welcome contributions from the community to help us improve and expand rsky. If you're interested in contributing, please feel free to submit issues or pull requests on the GitHub repository. We appreciate your support! Rules: We'll try our best but may not respond to your issue or PR. We may close an issue or PR without much feedback. We may lock discussions or contributions if our attention is getting DDOSed. We do not provide support for build issues. Guidelines: Strict adherence to our Code of Conduct Implementations should follow closely to the canonical Typescript implementation Check for existing issues before filing a new one, please. Open an issue and give some time for discussion before submitting a PR. Stay away from PRs that: Refactor large parts of the codebase Add entirely new features without prior discussion Change the tooling or frameworks used without prior discussion Introduce new unnecessary dependencies License rsky is released under the Apache License 2.0 . {"resolvedServerColorMode":"day"} About An AT Protocol Implementation built in Rust. blackskyweb.xyz Topics diversity bluesky blacksky Resources Readme License Apache-2.0 license Code of conduct Code of conduct Activity Custom properties Stars 66 stars Watchers 2 watching Forks 4 forks Report repository Releases No releases published Sponsor this project blacksky-algorithms Blacksky Algorithms opencollective.com/ blacksky Learn more about GitHub Sponsors Packages 0 No packages published Contributors 2 rudyfraser Rudy Fraser DrewMcArthur Drew McArthur Languages Rust 99.0% Other 1.0% Footer © 2024 GitHub, Inc. Footer navigation Terms Privacy Security Status Docs Contact Manage cookies Do not share my personal information You can’t perform that action at this time.
======>
https://old.reddit.com/r/rust/comments/1g1vwxj/the_curse_of_ai_and_how_rust_helps/
-->>-->>
There seems to be an inflated faith in AI tools like Copilot among some developers, that you can blindly use them to create high quality software. This fact is refuted in    a recent report    where a 41% increase in number of bugs was found when having access to such tools.   

   Personally, I'm not opposed to using AI tools, in fact I think they can be helpful and save developer time when used correctly, but you cannot trust them to generate correct code. That's why strong type systems (like Rust's) are still very important for checking program correctness (combined with unit tests etc.).   

   What's your opinion?   
   

======>
https://old.reddit.com/r/rust/comments/1g21n2o/what_feature_would_you_like_added_to_rust/
-->>-->>
This can be a feature from another language, or a feature that you came up with yourself.   

   I'd like to be able to have macros on types as functions or methods that would have access to    Self   /   self   .   

   While implementing the macro, you would specify if it takes    self   ,    &self   ,    &mut self   , or is just a function.   

   Speaking of macros, I would also like them to be more powerful than what they currently are. There are a lot of limitations that bother me. For example, if you want to make a macro with a macro, there are some limitations that can get in the way with defining the branches (iirc).   

   Edit   : 35 comments by 0 upvotes. Come on, guys. I don't care about votes, but the people commenting clearly want to have this conversation. It just doesn't make sense why Reddit is like this.   
   

======>
https://old.reddit.com/r/rust/comments/1g27l73/tenthash_a_simple_portable_largesize_hash_for/
-->>-->>
I've developed a non-cryptographic hash named    TentHash   .   

   Unlike hashes intended for use in hash maps, TentHash's target use cases are things like data fingerprinting and content addressable systems, which don't tolerate collisions.   

   You might (rightly) wonder "Why yet another hash?"  I encourage you to check out the readme and design rationale for a more complete answer, but the short version is: I wanted a simple-to-implement, large-size hash appropriate for data fingerprinting.  As far as I could find when I started this project, no such hashes existed... or at least the ones I found that    might    have met those requirements provided little evidence that they had done their homework beyond "it passes SMHasher!", which just isn't convincing for large-size hashes due to the enormous state space involved.   

   I'm posting this here because most of the work I did in the process of designing TentHash was done in Rust, and    its primary implementation    is also in Rust.  However, TentHash is intended to be easily implementable in any language, and has an    accompanying specification   .   

   (EDIT: a friend noted that it would be good to mention that the plan is to declare the spec final in a few months, assuming no issues are found with it.  I feel confident about the design and have spent a lot of time on it, but the intention is to give some time for other eyes to be on it as well, because it's easy to be confident and wrong!)   
   

======>
https://deno.com/blog/v2.0
-->>-->>
Announcing Deno 2 October 9, 2024 Ryan Dahl Bert Belder Bartek Iwańczuk Andy Jiang Product Update Watch our video announcement. Announcing Deno 2 The web is humanity’s largest software platform — building for it means
potentially reaching over 5 billion people .
But as web development has accelerated in recent years ,
it has also become increasingly and unmanageably complex. Before writing a
single line of code, developers must deal with tedious configuration and wading
through unnecessary boilerplate, when they would rather focus on shipping
product and delivering value to users. Yet
despite these complexities ,
JavaScript, the language of the web,
has remained the most popular language for the past decade ,
with TypeScript quickly emerging as number three. This is a testament to
JavaScript’s ubiquity and usefulness for web development — and a sign that
JavaScript is not going anywhere. In an effort to simplify web programming, we created Deno: a modern, all-in-one,
zero-config toolchain for JavaScript and TypeScript development. Native TypeScript support Built on web standards : Promises, fetch, and ES Modules Batteries included : builtin formatter, linter, type checker, test
framework, compile to executable, and more Secure by default ,
just like browsers Today, hundreds of thousands of developers love using Deno,
with repository becoming one of the highest starred Rust project on GitHub second
only to the Rust language itself. While we’ve accomplished a ton in Deno 1, the next major version is focused on
using Deno at scale . This means seamless interoperability with legacy
JavaScript infrastructure and support for a wider range of projects and
development teams. All without sacrificing the simplicity, security, and
“batteries included” nature that Deno users love. Today, we’re thrilled to announce Deno 2 , which includes: Backwards compatibility with Node.js and npm, allowing you to run existing
Node applications seamlessly Native support for package.json and node_modules Package management with new deno install , deno add , and deno remove commands A stabilized standard library Support for private npm registries Workspaces and monorepo support Long Term Support (LTS) releases JSR: a modern registry for sharing JavaScript libraries across runtimes We are also continually improving many existing Deno features: deno fmt can now format HTML, CSS, and YAML deno lint now has Node specific rules and quick fixes deno test now supports running tests written using node:test deno task can now run package.json scripts deno doc ’s HTML output has improved design and better search deno compile now supports code signing and icons on Windows deno serve can run HTTP servers across multiple cores, in parallel deno init can scaffold now scaffold libraries or servers deno jupyter now supports outputting images, graphs, and HTML deno bench supports critical sections for more precise measurements deno coverage can now output reports in HTML Backwards-compatible, forward-thinking Deno 2 is backwards compatible with Node and npm. This allows you to not only
run Deno in your current Node projects, but also incrementally adopt pieces of
Deno’s all-in-one toolchain. For instance, you can use deno install after you
clone a Node project to install your dependencies at lightning speed or run deno fmt to format your code without needing Prettier. Deno 2’s compatibility with Node and npm is robust. Deno 2 understands package.json , the node_modules folder, and even npm workspaces, allowing
you to run Deno in any Node project using ESM. And if there are minor syntax
adjustments needed, you can fix them with deno lint --fix . Don’t like the clutter of package.json and the node_modules directory, but
still need to use that npm package? You can directly import npm packages using npm: specifiers. Without package.json and the node_modules folder, Deno
will install your package in the global cache. This allows you to write programs
with npm dependencies in a single file —
no dependency manifest, configuration files, or node_modules needed. import chalk from "npm:chalk@5.3.0" ; console . log ( chalk . blue ( "Hello, world!" ) ) ; // Hello, world! (in blue) For larger projects, a dependency manifest makes it simple to manage your
dependencies. Placing an npm: specifier into an import map in a deno.json file allows importing the bare name of the package: // deno.json { "imports" : { "chalk" : "npm:chalk@5.3.0" } } import chalk from "chalk" ; console . log ( chalk . blue ( "Hello, world!" ) ) ; // Hello, world! (in blue) With the ability to import npm packages via the npm: specifier, you can access
over 2 million npm modules in Deno. This even includes complex packages such as gRPC , ssh2, Prisma, temporal.io,
duckdb, polars. Deno even supports advanced features like Node-API native
addons. Finally, you can use Deno 2 with your favorite JavaScript framework. Deno 2
supports Next.js, Astro, Remix, Angular, SvelteKit, QwikCity and many other
frameworks. Running create-next-app with Deno. Deno is now a package manager with deno install Not only does Deno 2 support package.json and the node_modules folder, it
also comes with three important subcommands that allow you to easily install and
manage your dependencies. deno install installs your dependencies at lightning speed. If you have a package.json it will create a node_modules folder in the blink of an eye. If
you don’t use package.json , it will cache all of your dependencies to the
global cache. deno install is 15% faster than npm with a cold cache, and 90% faster with a
hot cache. We’re already exceptionally fast here, but expect more improvements,
especially in cold cache scenarios, in the coming weeks. deno add and deno remove can be used to add and remove packages to/from your package.json or deno.json . If you’ve used npm install or npm remove before, these will feel very familiar. JavaScript Registry Earlier this year we introduced a modern, open sourced JavaScript registry called JSR . It supports TypeScript natively (you can publish modules as TypeScript source
code), handles the module loading intricacies multiple runtimes and
environments, only allows ESM, auto-generates documentation from JSDoc-style comments ,
and can be used with npm- and npx-like systems (yes, JSR turns TypeScript into .js and .d.ts files, as well). Because you upload TypeScript to JSR, it has an outstanding understanding of the
code that is being published. This allows us to deliver a seamless developer
experience for both publishing and consuming modules. If you are interested in
the details, you can read our post on how we architected JSR . Here is a side-by-side video of publishing a package to npm vs. to JSR. The Standard Library is now stable While there are over 2 million modules available on npm, the process of
searching, evaluating, and using a new module can be time consuming. That’s why
we’ve been building the Deno Standard Library for over 4 years. The Standard Library consists of dozens of heavily audited utility modules
covering everything from data manipulation, web-related logic,
JavaScript-specific functionalities, and more . It is available on JSR , and can be used by other runtimes and
environments. To give you a sense of what kinds of modules are available in the Deno Standard
Library, here is a partial list of the Standard Library modules and their
equivalent in npm: Deno Standard Library module npm package @std/testing jest @std/expect chai @std/cli minimist @std/collections lodash @std/fmt chalk @std/net get-port @std/encoding rfc4648 For a complete list of available packages visit https://jsr.io/@std . Private npm registries Private npm registries in Deno 2 work the same way they do in Node and npm, with an .npmrc file : // .npmrc @mycompany : registry = http : / / mycompany.com:8111 / //mycompany.com:8111/:_auth=secretToken Deno will pick up this .npmrc file automatically, and will let you pull
private packages with no additional configuration. Workspaces and monorepos Deno 2 also supports workspaces, which is a robust solution to manage
monorepos. Simply use the workspace attribute in your deno.json to list
the member directories: // deno.json { "workspace" : [ "./add" , "./subtract" ] } These members can have separate dependencies, linter and formatter
configuration, and more. Not only does Deno support workspaces for Deno packages, it also understands npm workspaces . This means
that you can create a hybrid Deno-npm monorepo
( see this example ),
with workspace members that either have a package.json or deno.json: This sample monorepo contains a mix of npm members and Deno members. You can also publish workspace members to JSR by running deno publish . For an
example, refer to the Deno Standard Library .
No need to manually figure out in what order you need to publish your packages -
just run deno publish , and it will do it all for you. LTS Often, development teams in larger organizations need to carefully audit new
releases before using them in production. With Deno’s weekly bug-fix releases,
and 6 weekly minor releases this can become time-consuming. To make it easier
for these teams, we’re introducing a Long Term Support (LTS) release
channel . Starting with Deno 2.1, the LTS channel will receive critical bug fixes
back-ported for six months, ensuring a stable and reliable base for production
use. After six months, a new LTS branch will be created based on the latest
stable version. All LTS releases are freely available and MIT licensed, making
them accessible to any team that needs a more stable and secure environment. Starting with Deno 2.1, we’ll introduce a LTS branch that we’ll maintain and
backport critical bug fixes to for six months. Finally, for teams needing advanced support, we’ve introduced the Deno for Enterprise program . It offers priority
support, direct access to our engineers, guaranteed response times, and priority
for your feature requests. We’ve partnered with companies like Netlify, Slack,
and Deco.cx to help their engineers move faster and deliver
more value to their users. Deno is fast! We’ve put tremendous effort into making Deno fast across a wide range of
real-world scenarios. Our focus is on delivering performance improvements that
truly matter in everyday JavaScript and TypeScript development—whether it’s
startup time, handling complex requests, or overall efficiency. While benchmarks can never tell the full story, they can provide insight into
where a runtime excels. Here are some benchmarks that showcase Deno’s strengths,
demonstrating its ability to deliver top-notch performance for both developers
and production environments. Please refer to the links beneath each chart for further detail and reproducible
steps. Correction: The first HTTP benchmark shown above was conducted using Deno 1.45, not Deno 2.0. In reality, Deno 2.0 is
about 20% slower than indicated here. This difference is due to our recent disabling of V8 pointer compression to address cases where users exceeded the 4GB heap limit. We plan to re-enable
pointer compression soon, as it’s the ideal default for most users, and
introduce a deno64 build for those needing larger heaps. FAQs If Deno is fully backward compatible with Node, why should I use Deno instead of Node? While Deno can run Node programs, it’s designed to push JavaScript and
TypeScript forward. Deno offers features that Node lacks, such as native
TypeScript support, web-standard APIs, a complete toolchain for JavaScript
development, and a secure-by-default execution model—all in a single executable
with no external dependencies. Using Deno over Node can save you time on setup
and configuration, letting you start coding and delivering value faster. Will Deno’s opt-in permission system be in effect when running Node programs? Yes, Deno’s secure-by-default execution model applies when running Node programs
or importing npm modules, ensuring the same level of security. Why the new logo? What happened to the cute dinosaur mascot? Since the beginning, the cute sauropod in the rain has been Deno’s face. Its
quirky charm has always been a hallmark of Deno, but the design was never
consistent—there were at least two “official” versions and countless variations.
With Deno 2.0, we decided it was time for a refresh. We wanted to keep the essence of the original character that Deno users love
while giving it a more refined look to match Deno’s professional and
production-grade nature. During the redesign, we realized that the rainy
background, while nostalgic, didn’t scale well and often went unnoticed. It was
too busy, especially at small sizes, so we had to let it go. After many iterations, we found that simplifying the design to its core elements
struck the right balance—simple and friendly, yet serious and reliable—just like
Deno. (Don’t worry, the cute dino is still here!) Deno began with an ambitious vision to modernize JavaScript. But with all the work spent on backward compatibility, what’s left of Deno’s original vision? Rewriting the entire JavaScript ecosystem isn’t practical. As Deno has scaled
beyond small programs, we’ve recognized that supporting Node and npm
compatibility is essential—especially for tools like gRPC and AWS SDKs, which
are impractical to rewrite from scratch. But Deno’s goal is not to become a Node clone in Rust or a drop-in replacement.
Our aim is to level up JavaScript, moving beyond 2010-era CommonJS and narrowing
the gap between server-side and browser environments in a way that developers
can adopt practically. We refuse to accept that JavaScript must remain a tangle
of mismatched tooling and endless layers of transpilation, unable to evolve. Deno’s original vision remains central to everything we do. This includes native
TypeScript support, built-in web standards like Promises, top-level await, Wasm,
fetch, and ES Modules, and a batteries-included toolchain—all packaged in a
single, dependency-free executable. And, of course, it is secure by default,
just like the web. Supporting npm is just one step toward making Deno more versatile. Our mission
is to provide a modern, streamlined toolchain that enhances the JavaScript
experience—not just to support legacy code. While we’ve adjusted our approach,
our vision remains the same: to simplify and empower web development. I loved Deno because it didn’t need any config files, but with the new package manager additions, is Deno 2 becoming more like Node, where you need a package.json to add dependencies? Not at all. You can still run single-file programs or scripts without any config
or dependency manifest—nothing has changed there. The new package management
commands ( deno install , deno add , and deno remove ) are optional tools
designed to simplify managing dependencies, whether you use a deno.json or package.json file. They’re especially useful for larger, more complex projects
but won’t get in the way if you prefer the simplicity of no configuration. One of our core goals is that Deno scales down to simple, single-file programs
that can import any package without additional ceremony. For example, in
contexts like Jupyter notebooks or quick scripts, you can easily do: import * as Plot from "npm:@observablehq/plot" ; At the same time, Deno scales up to handle large projects with multiple files or
even multiple packages, such as in monorepos. This flexibility ensures that Deno
is just as effective for small scripts as it is for large, production-grade
applications. I have a Fresh project. Are there breaking changes if I upgrade to Deno 2? Nope! Your Fresh project should work out of the box
with Deno 2—no changes needed. When should I expect Deno 2 to land on Deno Deploy? Any moment now! What’s next Deno 2 takes all of the features developers love about Deno 1.x — zero-config,
all-in-one toolchain for JavaScript and TypeScript development, web standard API
support, secure by default — and makes it fully backwards compatible with Node
and npm (in ESM). This makes not only running Deno in any Node project simple,
but also allows incremental adoption of Deno (e.g. running deno fmt or deno lint ) possible in larger, more complex projects. Along with improved
package management, JSR, and a slew of features for more advanced development
teams, Deno is ready to simplify and accelerate your development today. However, given Deno’s vast capabilities, we weren’t able to cover everything in
a single blog post and video. There are many exciting features and use cases
with Deno that we didn’t touch upon. For instance, being able to use deno compile to turn a JavaScript game into a desktop executable with cross compilation (yes, Windows) support. Or Deno’s Jupyter notebook support that allows you to explore and visualize data in TypeScript and @observable/plot . Or generating documentation
or a static documentation site from your JSDoc comments and source code with deno doc . We invite you to try Deno 2 today and experience the future of JavaScript and
TypeScript development. Get started with Deno 2 now: Getting Started with Deno (docs) 1.x ⇒ 2 Migration Guide Deno Tutorial Series Watch the Deno 2 Announcement Keynote Join our community and let’s shape the future of JavaScript together!
