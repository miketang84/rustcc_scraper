https://github.com/junkdog/tachyonfx
-->>-->>
Repository files navigation README MIT license tachyonfx tachyonfx is a ratatui library for creating shader-like effects in terminal UIs.
This library provides a collection of effects that can be used to enhance the
visual appeal of terminal applications, offering capabilities such as color
transformations, animations, and complex effect combinations. Installation Add tachyonfx to your Cargo.toml : tachyonfx = " 0.6.0 " Overview Effects The library includes a variety of effects, loosely categorized as follows: Color Effects fade_from: Fades from the specified background and foreground colors fade_from_fg: Fades the foreground color from a specified color. fade_to: Fades to the specified background and foreground colors. fade_to_fg: Fades the foreground color to a specified color. hsl_shift: Changes the hue, saturation, and lightness of the foreground and background colors. hsl_shift_fg: Shifts the foreground color by the specified hue, saturation, and lightness over the specified duration. term256_colors: Downsamples to 256 color mode. Text/Character Effects coalesce: The reverse of dissolve, coalesces text over the specified duration. dissolve: Dissolves the current text over the specified duration. slide_in: Applies a directional sliding in effect to terminal cells. slide_out: Applies a directional sliding out effect to terminal cells. sweep_in: Sweeps in from the specified color. sweep_out: Sweeps out to the specified color. Timing and Control Effects consume_tick: Consumes a single tick. never_complete: Makes an effect run indefinitely. ping_pong: Plays the effect forwards and then backwards. prolong_start :        Extends the start of an effect by a specified duration. prolong_end :          Extends the end of an effect by a specified duration. repeat: Repeats an effect indefinitely or for a specified number of times or duration. repeating: Repeats the effect indefinitely. sleep: Pauses for a specified duration. timed_never_complete: Creates an effect that runs indefinitely but has an enforced duration. with_duration: Wraps an effect and enforces a duration on it. Geometry Effects translate: Moves the effect area by a specified amount. translate_buf: Copies the contents from an aux buffer, moving it by a specified amount. resize_area: Resizes the area of the wrapped effect. Combination Effects parallel: Runs effects in parallel, all at the same time. Reports completion once all effects have completed. sequence: Runs effects in sequence, one after the other. Reports completion once the last effect has completed. Other Effects effect_fn: Creates custom effects from user-defined functions, operating over CellIterator . effect_fn_buf: Creates custom effects from functions, operating over Buffer . offscreen_buffer: Wraps an existing effect and redirects its rendering to a separate buffer. EffectTimer and Interpolations The EffectTimer is used to control the duration and interpolation of effects. It
allows for precise timing and synchronization of visual effects within your application. Cell Selection and Area Effects can be applied to specific cells in the terminal UI, allowing for targeted visual
modifications and animations. // only apply to cells with `Light2` foreground color fx :: sweep_in ( Direction :: UpToDown , 15 , 0 , Dark0 , timer ) . with_cell_selection ( CellFilter :: FgColor ( Light2 . into ( ) ) ) CellFilter s can be combined to form complex selection criteria. // apply effect to cells on the outer border of the area let margin = Margin :: new ( 1 , 1 ) ; let border_text = CellFilter :: AllOf ( & [ CellFilter :: Outer ( margin ) , CellFilter :: Text ] ) ; prolong_start ( duration , fx :: fade_from ( Dark0 , Dark0 , ( 320 , QuadOut ) ) , . with_cell_selection ( border_text ) Examples Example: tweens cargo run --release --example=tweens Example: basic-effects cargo run --release --example=basic-effects Example: open-window cargo run --release --example=open-window Example: fx-chart A demo of the EffectTimelineWidget showcasing the composition of effects. The widget is a "plain" widget
without any effects as part of its rendering. The effects are instead applied after rendering the widget. cargo run --release --example=fx-chart
======>
https://github.com/kube-rs/kube
-->>-->>
Repository files navigation README Code of conduct Apache-2.0 license Security kube-rs A Rust client for Kubernetes in the style of a more generic client-go , a runtime abstraction inspired by controller-runtime , and a derive macro for CRDs inspired by kubebuilder . Hosted by CNCF as a Sandbox Project . These crates build upon Kubernetes apimachinery + api concepts to enable generic abstractions. These abstractions allow Rust reinterpretations of reflectors, controllers, and custom resource interfaces, so that you can write applications easily. Installation Select a version of kube along with the generated k8s-openapi structs at your chosen Kubernetes version : [ dependencies ] kube = { version = " 0.95.0 " , features = [ " runtime " , " derive " ] } k8s-openapi = { version = " 0.23.0 " , features = [ " latest " ] } See features for a quick overview of default-enabled / opt-in functionality. Upgrading See kube.rs/upgrading .
Noteworthy changes are highlighted in releases , and archived in the changelog . Usage See the examples directory for how to use any of these crates. kube API Docs kube.rs Official examples: version-rs : lightweight deployment reflector using axum controller-rs : Controller of a crd inside actix For real world projects see ADOPTERS . Api The Api is what interacts with Kubernetes resources, and is generic over Resource : use k8s_openapi :: api :: core :: v1 :: Pod ; let pods : Api < Pod > = Api :: default_namespaced ( client ) ; let pod = pods . get ( "blog" ) . await ? ; println ! ( "Got pod: {pod:?}" ) ; let patch = json ! ( { "spec" : { "activeDeadlineSeconds" : 5 } } ) ; let pp = PatchParams :: apply ( "kube" ) ; let patched = pods . patch ( "blog" , & pp , & Patch :: Apply ( patch ) ) . await ? ; assert_eq ! ( patched.spec.active_deadline_seconds, Some ( 5 ) ) ; pods . delete ( "blog" , & DeleteParams :: default ( ) ) . await ? ; See the examples ending in _api examples for more detail. Custom Resource Definitions Working with custom resources uses automatic code-generation via proc_macros in kube-derive . You need to add #[derive(CustomResource, JsonSchema)] and some #[kube(attrs..)] on a spec struct: # [ derive ( CustomResource , Debug , Serialize , Deserialize , Default , Clone , JsonSchema ) ] # [ kube ( group = "kube.rs" , version = "v1" , kind = "Document" , namespaced ) ] pub struct DocumentSpec { title : String , content : String , } Then you can use the generated wrapper struct Document as a kube::Resource : let docs : Api < Document > = Api :: default_namespaced ( client ) ; let d = Document :: new ( "guide" , DocumentSpec :: default ( ) ) ; println ! ( "doc: {:?}" , d ) ; println ! ( "crd: {:?}" , serde_yaml::to_string ( & Document ::crd ( ) ) ) ; There are a ton of kubebuilder-like instructions that you can annotate with here. See the documentation or the crd_ prefixed examples for more. NB: #[derive(CustomResource)] requires the derive feature enabled on kube . Runtime The runtime module exports the kube_runtime crate and contains higher level abstractions on top of the Api and Resource types so that you don't have to do all the watch / resourceVersion /storage book-keeping yourself. Watchers A streaming interface (similar to informers) that presents watcher::Event s and does automatic relists under the hood. let api = Api :: < Pod > :: default_namespaced ( client ) ; let stream = watcher ( api , Config :: default ( ) ) . applied_objects ( ) ; This now gives a continual stream of events and you do not need to care about the watch having to restart, or connections dropping. while let Some ( event ) = stream . try_next ( ) . await ? { println ! ( "Applied: {}" , event.name_any ( ) ) ; } Note the base items from a watcher stream are an abstraction above the native WatchEvent to allow for store buffering. If you are following along to "see what changed", you can use utilities from WatchStreamExt , such as applied_objects to get a more conventional stream. Reflectors A reflector is a watcher with Store on K . It acts on all the Event<K> exposed by watcher to ensure that the state in the Store is as accurate as possible. let nodes : Api < Node > = Api :: all ( client ) ; let lp = Config :: default ( ) . labels ( "kubernetes.io/arch=amd64" ) ; let ( reader , writer ) = reflector :: store ( ) ; let rf = reflector ( writer , watcher ( nodes , lp ) ) ; At this point you can listen to the reflector as if it was a watcher , but you can also query the reader at any point. Controllers A Controller is a reflector along with an arbitrary number of watchers that schedule events internally to send events through a reconciler: Controller :: new ( root_kind_api , Config :: default ( ) ) . owns ( child_kind_api , Config :: default ( ) ) . run ( reconcile , error_policy , context ) . for_each ( |res| async move { match res { Ok ( o ) => info ! ( "reconciled {:?}" , o ) , Err ( e ) => warn ! ( "reconcile failed: {}" , Report ::from ( e ) ) , } } ) . await ; Here reconcile and error_policy refer to functions you define. The first will be called when the root or child elements change, and the second when the reconciler returns an Err . See the controller guide for how to write these. TLS By default rustls is used for TLS, but openssl is supported. To switch, turn off default-features , and enable the openssl-tls feature: [ dependencies ] kube = { version = " 0.95.0 " , default-features = false , features = [ " client " , " openssl-tls " ] } k8s-openapi = { version = " 0.23.0 " , features = [ " latest " ] } This will pull in openssl and hyper-openssl . If default-features is left enabled, you will pull in two TLS stacks, and the default will remain as rustls . musl-libc Kube will work with distroless , scratch , and alpine (it's also possible to use alpine as a builder with some caveats ). License Apache 2.0 licensed. See LICENSE for details.
======>
https://github.com/AspectUnk/russh-sftp
-->>-->>
Repository files navigation README Apache-2.0 license Russh SFTP SFTP subsystem supported server and client for Russh and more! Crate can provide compatibility with anything that can provide the raw data stream in and out of the subsystem channel. Implemented according to version 3 specifications (most popular). The main idea of the project is to provide an implementation for interacting with the protocol at any level. Examples Client example Simple server What's ready? Basic packets Extended packets Simplification for file attributes Client side Client example Server side Simple server example Extension support: limits@openssh.com , hardlink@openssh.com , fsync@openssh.com , statvfs@openssh.com Full server example Unit tests Workflow Some words Thanks to @Eugeny (author of the Russh ) for his prompt help and finalization of Russh API
======>
https://github.com/Eugeny/russh
-->>-->>
Skip to content {"props":{"docsUrl":"https://docs.github.com/get-started/accessibility/keyboard-shortcuts"}} {"resolvedServerColorMode":"day"} Navigation Menu Toggle navigation Sign in Product Actions Automate any workflow Packages Host and manage packages Security Find and fix vulnerabilities Codespaces Instant dev environments GitHub Copilot Write better code with AI Code review Manage code changes Issues Plan and track work Discussions Collaborate outside of code Explore All features Documentation GitHub Skills Blog Solutions By size Enterprise Teams Startups By industry Healthcare Financial services Manufacturing By use case CI/CD & Automation DevOps DevSecOps Resources Topics AI DevOps Security Software Development View all Explore Learning Pathways White papers, Ebooks, Webinars Customer Stories Partners Open Source GitHub Sponsors Fund open source developers The ReadME Project GitHub community articles Repositories Topics Trending Collections Enterprise Enterprise platform AI-powered developer platform Available add-ons Advanced Security Enterprise-grade security features GitHub Copilot Enterprise-grade AI features Premium Support Enterprise-grade 24/7 support Pricing Search or jump to... Search code, repositories, users, issues, pull requests... Search Clear Search syntax tips Provide feedback We read every piece of feedback, and take your input very seriously. Include my email address so I can be contacted Cancel Submit feedback Saved searches Use saved searches to filter your results more quickly Name Query To see all available qualifiers, see our documentation . Cancel Create saved search Sign in Sign up Reseting focus You signed in with another tab or window. Reload to refresh your session. You signed out in another tab or window. Reload to refresh your session. You switched accounts on another tab or window. Reload to refresh your session. Dismiss alert {{ message }} Eugeny / russh Public Notifications You must be signed in to change notification settings Fork 91 Star 873 Rust SSH client & server library docs.rs/russh 873 stars 91 forks Branches Tags Activity Star Notifications You must be signed in to change notification settings Code Issues 36 Pull requests 7 Discussions Actions Projects 0 Security Insights Additional navigation options Code Issues Pull requests Discussions Actions Projects Security Insights Eugeny/russh This commit does not belong to any branch on this repository, and may belong to a fork outside of the repository. {"props":{"initialPayload":{"allShortcutsEnabled":false,"path":"/","repo":{"id":456693383,"defaultBranch":"main","name":"russh","ownerLogin":"Eugeny","currentUserCanPush":false,"isFork":false,"isEmpty":false,"createdAt":"2022-02-07T22:04:56.000Z","ownerAvatar":"https://avatars.githubusercontent.com/u/161476?v=4","public":true,"private":false,"isOrgOwned":false},"currentUser":null,"refInfo":{"name":"main","listCacheKey":"v0:1724536350.0","canEdit":false,"refType":"branch","currentOid":"aac16a053c4dfbec4ce20628f1e0408ce881f691"},"tree":{"items":[{"name":".github","path":".github","contentType":"directory"},{"name":"cryptovec","path":"cryptovec","contentType":"directory"},{"name":"files","path":"files","contentType":"directory"},{"name":"pageant","path":"pageant","contentType":"directory"},{"name":"russh-config","path":"russh-config","contentType":"directory"},{"name":"russh-keys","path":"russh-keys","contentType":"directory"},{"name":"russh","path":"russh","contentType":"directory"},{"name":".all-contributorsrc","path":".all-contributorsrc","contentType":"file"},{"name":".gitignore","path":".gitignore","contentType":"file"},{"name":"Cargo.toml","path":"Cargo.toml","contentType":"file"},{"name":"LICENSE-2.0.txt","path":"LICENSE-2.0.txt","contentType":"file"},{"name":"README.md","path":"README.md","contentType":"file"},{"name":"rust-toolchain.toml","path":"rust-toolchain.toml","contentType":"file"},{"name":"rustfmt.toml","path":"rustfmt.toml","contentType":"file"}],"templateDirectorySuggestionUrl":null,"readme":null,"totalCount":14,"showBranchInfobar":false},"fileTree":null,"fileTreeProcessingTime":null,"foldersToFetch":[],"treeExpanded":false,"symbolsExpanded":false,"isOverview":true,"overview":{"banners":{"shouldRecommendReadme":false,"isPersonalRepo":false,"showUseActionBanner":false,"actionSlug":null,"actionId":null,"showProtectBranchBanner":false,"publishBannersInfo":{"dismissActionNoticePath":"/settings/dismiss-notice/publish_action_from_repo","releasePath":"/Eugeny/russh/releases/new?marketplace=true","showPublishActionBanner":false},"interactionLimitBanner":null,"showInvitationBanner":false,"inviterName":null,"actionsMigrationBannerInfo":{"releaseTags":[],"showImmutableActionsMigrationBanner":false,"initialMigrationStatus":null}},"codeButton":{"contactPath":"/contact","isEnterprise":false,"local":{"protocolInfo":{"httpAvailable":true,"sshAvailable":null,"httpUrl":"https://github.com/Eugeny/russh.git","showCloneWarning":null,"sshUrl":null,"sshCertificatesRequired":null,"sshCertificatesAvailable":null,"ghCliUrl":"gh repo clone Eugeny/russh","defaultProtocol":"http","newSshKeyUrl":"/settings/ssh/new","setProtocolPath":"/users/set_protocol"},"platformInfo":{"cloneUrl":"https://desktop.github.com","showVisualStudioCloneButton":false,"visualStudioCloneUrl":"https://windows.github.com","showXcodeCloneButton":false,"xcodeCloneUrl":"xcode://clone?repo=https%3A%2F%2Fgithub.com%2FEugeny%2Frussh","zipballUrl":"/Eugeny/russh/archive/refs/heads/main.zip"}},"newCodespacePath":"/codespaces/new?hide_repo_select=true\u0026repo=456693383"},"popovers":{"rename":null,"renamedParentRepo":null},"commitCount":"493","overviewFiles":[{"displayName":"README.md","repoName":"russh","refName":"main","path":"README.md","preferredFileType":"readme","tabName":"README","richText":"\u003carticle class=\"markdown-body entry-content container-lg\" itemprop=\"text\"\u003e\u003cdiv class=\"markdown-heading\" dir=\"auto\"\u003e\u003ch1 tabindex=\"-1\" class=\"heading-element\" dir=\"auto\"\u003eRussh\u003c/h1\u003e\u003ca id=\"user-content-russh\" class=\"anchor\" aria-label=\"Permalink: Russh\" href=\"#russh\"\u003e\u003csvg class=\"octicon octicon-link\" viewBox=\"0 0 16 16\" version=\"1.1\" width=\"16\" height=\"16\" aria-hidden=\"true\"\u003e\u003cpath d=\"m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z\"\u003e\u003c/path\u003e\u003c/svg\u003e\u003c/a\u003e\u003c/div\u003e\n\u003cp dir=\"auto\"\u003e\u003ca href=\"https://github.com/warp-tech/russh/actions/workflows/rust.yml\"\u003e\u003cimg src=\"https://github.com/warp-tech/russh/actions/workflows/rust.yml/badge.svg\" alt=\"Rust\" style=\"max-width: 100%;\"\u003e\u003c/a\u003e  \n\u003ca href=\"#contributors-\"\u003e\u003cimg src=\"https://camo.githubusercontent.com/4ee83dd3959fbf34a32e666d59c0d80942644896ebeab3cea1deeeaaea2d6ef7/68747470733a2f2f696d672e736869656c64732e696f2f62616467652f616c6c5f636f6e7472696275746f72732d33362d6f72616e67652e7376673f7374796c653d666c61742d737175617265\" alt=\"All Contributors\" data-canonical-src=\"https://img.shields.io/badge/all_contributors-36-orange.svg?style=flat-square\" style=\"max-width: 100%;\"\u003e\u003c/a\u003e\u003c/p\u003e\n\n\u003cp dir=\"auto\"\u003eLow-level Tokio SSH2 client and server implementation.\u003c/p\u003e\n\u003cp dir=\"auto\"\u003eExamples: \u003ca href=\"/Eugeny/russh/blob/main/russh/examples/client_exec_simple.rs\"\u003esimple client\u003c/a\u003e, \u003ca href=\"/Eugeny/russh/blob/main/russh/examples/client_exec_interactive.rs\"\u003einteractive PTY client\u003c/a\u003e, \u003ca href=\"/Eugeny/russh/blob/main/russh/examples/echoserver.rs\"\u003eserver\u003c/a\u003e, \u003ca href=\"/Eugeny/russh/blob/main/russh/examples/sftp_client.rs\"\u003eSFTP client\u003c/a\u003e, \u003ca href=\"/Eugeny/russh/blob/main/russh/examples/sftp_server.rs\"\u003eSFTP server\u003c/a\u003e.\u003c/p\u003e\n\u003cp dir=\"auto\"\u003eThis is a fork of \u003ca href=\"https://nest.pijul.com/pijul/thrussh\" rel=\"nofollow\"\u003eThrussh\u003c/a\u003e by Pierre-Étienne Meunier.\u003c/p\u003e\n\u003cblockquote\u003e\n\u003cp dir=\"auto\"\u003e✨ = added in Russh\u003c/p\u003e\n\u003c/blockquote\u003e\n\u003cul dir=\"auto\"\u003e\n\u003cli\u003e\u003ca href=\"https://github.com/warp-tech/russh#safety\"\u003eMore panic safety\u003c/a\u003e ✨\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003easync_trait\u003c/code\u003e support ✨\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003edirect-tcpip\u003c/code\u003e (local port forwarding)\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003eforward-tcpip\u003c/code\u003e (remote port forwarding) ✨\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003edirect-streamlocal\u003c/code\u003e (local UNIX socket forwarding, client only) ✨\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003eforward-streamlocal\u003c/code\u003e (remote UNIX socket forwarding) ✨\u003c/li\u003e\n\u003cli\u003eCiphers:\n\u003cul dir=\"auto\"\u003e\n\u003cli\u003e\u003ccode\u003echacha20-poly1305@openssh.com\u003c/code\u003e\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003eaes256-gcm@openssh.com\u003c/code\u003e ✨\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003eaes256-ctr\u003c/code\u003e ✨\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003eaes192-ctr\u003c/code\u003e ✨\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003eaes128-ctr\u003c/code\u003e ✨\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003eaes256-cbc\u003c/code\u003e ✨\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003eaes192-cbc\u003c/code\u003e ✨\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003eaes128-cbc\u003c/code\u003e ✨\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003e3des-cbc\u003c/code\u003e ✨\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003cli\u003eKey exchanges:\n\u003cul dir=\"auto\"\u003e\n\u003cli\u003e\u003ccode\u003ecurve25519-sha256@libssh.org\u003c/code\u003e\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003ediffie-hellman-group1-sha1\u003c/code\u003e ✨\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003ediffie-hellman-group14-sha1\u003c/code\u003e ✨\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003ediffie-hellman-group14-sha256\u003c/code\u003e ✨\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003ediffie-hellman-group16-sha512\u003c/code\u003e ✨\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003eecdh-sha2-nistp256\u003c/code\u003e ✨\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003eecdh-sha2-nistp384\u003c/code\u003e ✨\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003eecdh-sha2-nistp521\u003c/code\u003e ✨\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003cli\u003eMACs:\n\u003cul dir=\"auto\"\u003e\n\u003cli\u003e\u003ccode\u003ehmac-sha1\u003c/code\u003e ✨\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003ehmac-sha2-256\u003c/code\u003e ✨\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003ehmac-sha2-512\u003c/code\u003e ✨\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003ehmac-sha1-etm@openssh.com\u003c/code\u003e ✨\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003ehmac-sha2-256-etm@openssh.com\u003c/code\u003e ✨\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003ehmac-sha2-512-etm@openssh.com\u003c/code\u003e ✨\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003cli\u003eHost keys and public key auth:\n\u003cul dir=\"auto\"\u003e\n\u003cli\u003e\u003ccode\u003essh-ed25519\u003c/code\u003e\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003ersa-sha2-256\u003c/code\u003e\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003ersa-sha2-512\u003c/code\u003e\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003essh-rsa\u003c/code\u003e ✨\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003eecdsa-sha2-nistp256\u003c/code\u003e ✨\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003eecdsa-sha2-nistp384\u003c/code\u003e ✨\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003eecdsa-sha2-nistp521\u003c/code\u003e ✨\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003cli\u003eAuthentication methods:\n\u003cul dir=\"auto\"\u003e\n\u003cli\u003e\u003ccode\u003epassword\u003c/code\u003e\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003epublickey\u003c/code\u003e\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003ekeyboard-interactive\u003c/code\u003e\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003enone\u003c/code\u003e\u003c/li\u003e\n\u003cli\u003eOpenSSH certificates (client only ✨)\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003cli\u003eDependency updates\u003c/li\u003e\n\u003cli\u003eOpenSSH keepalive request handling ✨\u003c/li\u003e\n\u003cli\u003eOpenSSH agent forwarding channels ✨\u003c/li\u003e\n\u003cli\u003eOpenSSH \u003ccode\u003eserver-sig-algs\u003c/code\u003e extension ✨\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003eopenssl\u003c/code\u003e dependency is optional ✨\u003c/li\u003e\n\u003c/ul\u003e\n\u003cdiv class=\"markdown-heading\" dir=\"auto\"\u003e\u003ch2 tabindex=\"-1\" class=\"heading-element\" dir=\"auto\"\u003eSafety\u003c/h2\u003e\u003ca id=\"user-content-safety\" class=\"anchor\" aria-label=\"Permalink: Safety\" href=\"#safety\"\u003e\u003csvg class=\"octicon octicon-link\" viewBox=\"0 0 16 16\" version=\"1.1\" width=\"16\" height=\"16\" aria-hidden=\"true\"\u003e\u003cpath d=\"m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z\"\u003e\u003c/path\u003e\u003c/svg\u003e\u003c/a\u003e\u003c/div\u003e\n\u003cul dir=\"auto\"\u003e\n\u003cli\u003e\u003ccode\u003edeny(clippy::unwrap_used)\u003c/code\u003e\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003edeny(clippy::expect_used)\u003c/code\u003e\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003edeny(clippy::indexing_slicing)\u003c/code\u003e\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003edeny(clippy::panic)\u003c/code\u003e\u003c/li\u003e\n\u003cli\u003eExceptions are checked manually\u003c/li\u003e\n\u003c/ul\u003e\n\u003cdiv class=\"markdown-heading\" dir=\"auto\"\u003e\u003ch3 tabindex=\"-1\" class=\"heading-element\" dir=\"auto\"\u003ePanics\u003c/h3\u003e\u003ca id=\"user-content-panics\" class=\"anchor\" aria-label=\"Permalink: Panics\" href=\"#panics\"\u003e\u003csvg class=\"octicon octicon-link\" viewBox=\"0 0 16 16\" version=\"1.1\" width=\"16\" height=\"16\" aria-hidden=\"true\"\u003e\u003cpath d=\"m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z\"\u003e\u003c/path\u003e\u003c/svg\u003e\u003c/a\u003e\u003c/div\u003e\n\u003cul dir=\"auto\"\u003e\n\u003cli\u003eWhen the Rust allocator fails to allocate memory during a CryptoVec being resized.\u003c/li\u003e\n\u003c/ul\u003e\n\u003cdiv class=\"markdown-heading\" dir=\"auto\"\u003e\u003ch3 tabindex=\"-1\" class=\"heading-element\" dir=\"auto\"\u003eUnsafe code\u003c/h3\u003e\u003ca id=\"user-content-unsafe-code\" class=\"anchor\" aria-label=\"Permalink: Unsafe code\" href=\"#unsafe-code\"\u003e\u003csvg class=\"octicon octicon-link\" viewBox=\"0 0 16 16\" version=\"1.1\" width=\"16\" height=\"16\" aria-hidden=\"true\"\u003e\u003cpath d=\"m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z\"\u003e\u003c/path\u003e\u003c/svg\u003e\u003c/a\u003e\u003c/div\u003e\n\u003cul dir=\"auto\"\u003e\n\u003cli\u003e\u003ccode\u003ecryptovec\u003c/code\u003e uses \u003ccode\u003eunsafe\u003c/code\u003e for faster copying, initialization and binding to native API.\u003c/li\u003e\n\u003c/ul\u003e\n\u003cdiv class=\"markdown-heading\" dir=\"auto\"\u003e\u003ch2 tabindex=\"-1\" class=\"heading-element\" dir=\"auto\"\u003eEcosystem\u003c/h2\u003e\u003ca id=\"user-content-ecosystem\" class=\"anchor\" aria-label=\"Permalink: Ecosystem\" href=\"#ecosystem\"\u003e\u003csvg class=\"octicon octicon-link\" viewBox=\"0 0 16 16\" version=\"1.1\" width=\"16\" height=\"16\" aria-hidden=\"true\"\u003e\u003cpath d=\"m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z\"\u003e\u003c/path\u003e\u003c/svg\u003e\u003c/a\u003e\u003c/div\u003e\n\u003cul dir=\"auto\"\u003e\n\u003cli\u003e\u003ca href=\"https://crates.io/crates/russh-sftp\" rel=\"nofollow\"\u003erussh-sftp\u003c/a\u003e - server-side and client-side SFTP subsystem support for \u003ccode\u003erussh\u003c/code\u003e - see \u003ccode\u003erussh/examples/sftp_server.rs\u003c/code\u003e or \u003ccode\u003erussh/examples/sftp_client.rs\u003c/code\u003e.\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"https://crates.io/crates/async-ssh2-tokio\" rel=\"nofollow\"\u003easync-ssh2-tokio\u003c/a\u003e - simple high-level API for running commands over SSH.\u003c/li\u003e\n\u003c/ul\u003e\n\u003cdiv class=\"markdown-heading\" dir=\"auto\"\u003e\u003ch2 tabindex=\"-1\" class=\"heading-element\" dir=\"auto\"\u003eContributors ✨\u003c/h2\u003e\u003ca id=\"user-content-contributors-\" class=\"anchor\" aria-label=\"Permalink: Contributors ✨\" href=\"#contributors-\"\u003e\u003csvg class=\"octicon octicon-link\" viewBox=\"0 0 16 16\" version=\"1.1\" width=\"16\" height=\"16\" aria-hidden=\"true\"\u003e\u003cpath d=\"m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z\"\u003e\u003c/path\u003e\u003c/svg\u003e\u003c/a\u003e\u003c/div\u003e\n\u003cp dir=\"auto\"\u003eThanks goes to these wonderful people (\u003ca href=\"https://allcontributors.org/docs/en/emoji-key\" rel=\"nofollow\"\u003eemoji key\u003c/a\u003e):\u003c/p\u003e\n\n\n\n\u003cmarkdown-accessiblity-table\u003e\u003ctable\u003e\n  \u003ctbody\u003e\n    \u003ctr\u003e\n      \u003ctd align=\"center\" valign=\"top\" width=\"14.28%\"\u003e\u003ca href=\"https://github.com/mihirsamdarshi\"\u003e\u003cimg src=\"https://avatars.githubusercontent.com/u/5462077?v=4?s=100\" width=\"100px;\" alt=\"Mihir Samdarshi\" style=\"max-width: 100%;\"\u003e\u003cbr\u003e\u003csub\u003e\u003cb\u003eMihir Samdarshi\u003c/b\u003e\u003c/sub\u003e\u003c/a\u003e\u003cbr\u003e\u003ca href=\"https://github.com/Eugeny/russh/commits?author=mihirsamdarshi\" title=\"Documentation\"\u003e📖\u003c/a\u003e\u003c/td\u003e\n      \u003ctd align=\"center\" valign=\"top\" width=\"14.28%\"\u003e\u003ca href=\"https://peet.io/\" rel=\"nofollow\"\u003e\u003cimg src=\"https://avatars.githubusercontent.com/u/2230985?v=4?s=100\" width=\"100px;\" alt=\"Connor Peet\" style=\"max-width: 100%;\"\u003e\u003cbr\u003e\u003csub\u003e\u003cb\u003eConnor Peet\u003c/b\u003e\u003c/sub\u003e\u003c/a\u003e\u003cbr\u003e\u003ca href=\"https://github.com/Eugeny/russh/commits?author=connor4312\" title=\"Code\"\u003e💻\u003c/a\u003e\u003c/td\u003e\n      \u003ctd align=\"center\" valign=\"top\" width=\"14.28%\"\u003e\u003ca href=\"https://github.com/kvzn\"\u003e\u003cimg src=\"https://avatars.githubusercontent.com/u/313271?v=4?s=100\" width=\"100px;\" alt=\"KVZN\" style=\"max-width: 100%;\"\u003e\u003cbr\u003e\u003csub\u003e\u003cb\u003eKVZN\u003c/b\u003e\u003c/sub\u003e\u003c/a\u003e\u003cbr\u003e\u003ca href=\"https://github.com/Eugeny/russh/commits?author=kvzn\" title=\"Code\"\u003e💻\u003c/a\u003e\u003c/td\u003e\n      \u003ctd align=\"center\" valign=\"top\" width=\"14.28%\"\u003e\u003ca href=\"https://www.telekom.de\" rel=\"nofollow\"\u003e\u003cimg src=\"https://avatars.githubusercontent.com/u/21334898?v=4?s=100\" width=\"100px;\" alt=\"Adrian Müller (DTT)\" style=\"max-width: 100%;\"\u003e\u003cbr\u003e\u003csub\u003e\u003cb\u003eAdrian Müller (DTT)\u003c/b\u003e\u003c/sub\u003e\u003c/a\u003e\u003cbr\u003e\u003ca href=\"https://github.com/Eugeny/russh/commits?author=amtelekom\" title=\"Code\"\u003e💻\u003c/a\u003e\u003c/td\u003e\n      \u003ctd align=\"center\" valign=\"top\" width=\"14.28%\"\u003e\u003ca href=\"https://www.evilsocket.net\" rel=\"nofollow\"\u003e\u003cimg src=\"https://avatars.githubusercontent.com/u/86922?v=4?s=100\" width=\"100px;\" alt=\"Simone Margaritelli\" style=\"max-width: 100%;\"\u003e\u003cbr\u003e\u003csub\u003e\u003cb\u003eSimone Margaritelli\u003c/b\u003e\u003c/sub\u003e\u003c/a\u003e\u003cbr\u003e\u003ca href=\"https://github.com/Eugeny/russh/commits?author=evilsocket\" title=\"Code\"\u003e💻\u003c/a\u003e\u003c/td\u003e\n      \u003ctd align=\"center\" valign=\"top\" width=\"14.28%\"\u003e\u003ca href=\"http://joegrund.com\" rel=\"nofollow\"\u003e\u003cimg src=\"https://avatars.githubusercontent.com/u/458717?v=4?s=100\" width=\"100px;\" alt=\"Joe Grund\" style=\"max-width: 100%;\"\u003e\u003cbr\u003e\u003csub\u003e\u003cb\u003eJoe Grund\u003c/b\u003e\u003c/sub\u003e\u003c/a\u003e\u003cbr\u003e\u003ca href=\"https://github.com/Eugeny/russh/commits?author=jgrund\" title=\"Code\"\u003e💻\u003c/a\u003e\u003c/td\u003e\n      \u003ctd align=\"center\" valign=\"top\" width=\"14.28%\"\u003e\u003ca href=\"https://github.com/AspectUnk\"\u003e\u003cimg src=\"https://avatars.githubusercontent.com/u/59799956?v=4?s=100\" width=\"100px;\" alt=\"AspectUnk\" style=\"max-width: 100%;\"\u003e\u003cbr\u003e\u003csub\u003e\u003cb\u003eAspectUnk\u003c/b\u003e\u003c/sub\u003e\u003c/a\u003e\u003cbr\u003e\u003ca href=\"https://github.com/Eugeny/russh/commits?author=AspectUnk\" title=\"Code\"\u003e💻\u003c/a\u003e\u003c/td\u003e\n    \u003c/tr\u003e\n    \u003ctr\u003e\n      \u003ctd align=\"center\" valign=\"top\" width=\"14.28%\"\u003e\u003ca href=\"https://0io.eu\" rel=\"nofollow\"\u003e\u003cimg src=\"https://avatars.githubusercontent.com/u/203575?v=4?s=100\" width=\"100px;\" alt=\"Simão Mata\" style=\"max-width: 100%;\"\u003e\u003cbr\u003e\u003csub\u003e\u003cb\u003eSimão Mata\u003c/b\u003e\u003c/sub\u003e\u003c/a\u003e\u003cbr\u003e\u003ca href=\"https://github.com/Eugeny/russh/commits?author=simao\" title=\"Code\"\u003e💻\u003c/a\u003e\u003c/td\u003e\n      \u003ctd align=\"center\" valign=\"top\" width=\"14.28%\"\u003e\u003ca href=\"https://mariotaku.org\" rel=\"nofollow\"\u003e\u003cimg src=\"https://avatars.githubusercontent.com/u/830358?v=4?s=100\" width=\"100px;\" alt=\"Mariotaku\" style=\"max-width: 100%;\"\u003e\u003cbr\u003e\u003csub\u003e\u003cb\u003eMariotaku\u003c/b\u003e\u003c/sub\u003e\u003c/a\u003e\u003cbr\u003e\u003ca href=\"https://github.com/Eugeny/russh/commits?author=mariotaku\" title=\"Code\"\u003e💻\u003c/a\u003e\u003c/td\u003e\n      \u003ctd align=\"center\" valign=\"top\" width=\"14.28%\"\u003e\u003ca href=\"https://github.com/yorkz1994\"\u003e\u003cimg src=\"https://avatars.githubusercontent.com/u/16678950?v=4?s=100\" width=\"100px;\" alt=\"yorkz1994\" style=\"max-width: 100%;\"\u003e\u003cbr\u003e\u003csub\u003e\u003cb\u003eyorkz1994\u003c/b\u003e\u003c/sub\u003e\u003c/a\u003e\u003cbr\u003e\u003ca href=\"https://github.com/Eugeny/russh/commits?author=yorkz1994\" title=\"Code\"\u003e💻\u003c/a\u003e\u003c/td\u003e\n      \u003ctd align=\"center\" valign=\"top\" width=\"14.28%\"\u003e\u003ca href=\"https://volution.ro/\" rel=\"nofollow\"\u003e\u003cimg src=\"https://avatars.githubusercontent.com/u/29785?v=4?s=100\" width=\"100px;\" alt=\"Ciprian Dorin Craciun\" style=\"max-width: 100%;\"\u003e\u003cbr\u003e\u003csub\u003e\u003cb\u003eCiprian Dorin Craciun\u003c/b\u003e\u003c/sub\u003e\u003c/a\u003e\u003cbr\u003e\u003ca href=\"https://github.com/Eugeny/russh/commits?author=cipriancraciun\" title=\"Code\"\u003e💻\u003c/a\u003e\u003c/td\u003e\n      \u003ctd align=\"center\" valign=\"top\" width=\"14.28%\"\u003e\u003ca href=\"https://github.com/mllken\"\u003e\u003cimg src=\"https://avatars.githubusercontent.com/u/11590808?v=4?s=100\" width=\"100px;\" alt=\"Eric Milliken\" style=\"max-width: 100%;\"\u003e\u003cbr\u003e\u003csub\u003e\u003cb\u003eEric Milliken\u003c/b\u003e\u003c/sub\u003e\u003c/a\u003e\u003cbr\u003e\u003ca href=\"https://github.com/Eugeny/russh/commits?author=mllken\" title=\"Code\"\u003e💻\u003c/a\u003e\u003c/td\u003e\n      \u003ctd align=\"center\" valign=\"top\" width=\"14.28%\"\u003e\u003ca href=\"https://github.com/Swelio\"\u003e\u003cimg src=\"https://avatars.githubusercontent.com/u/24651896?v=4?s=100\" width=\"100px;\" alt=\"Swelio\" style=\"max-width: 100%;\"\u003e\u003cbr\u003e\u003csub\u003e\u003cb\u003eSwelio\u003c/b\u003e\u003c/sub\u003e\u003c/a\u003e\u003cbr\u003e\u003ca href=\"https://github.com/Eugeny/russh/commits?author=Swelio\" title=\"Code\"\u003e💻\u003c/a\u003e\u003c/td\u003e\n      \u003ctd align=\"center\" valign=\"top\" width=\"14.28%\"\u003e\u003ca href=\"https://github.com/joshbenz\"\u003e\u003cimg src=\"https://avatars.githubusercontent.com/u/94999261?v=4?s=100\" width=\"100px;\" alt=\"Joshua Benz\" style=\"max-width: 100%;\"\u003e\u003cbr\u003e\u003csub\u003e\u003cb\u003eJoshua Benz\u003c/b\u003e\u003c/sub\u003e\u003c/a\u003e\u003cbr\u003e\u003ca href=\"https://github.com/Eugeny/russh/commits?author=joshbenz\" title=\"Code\"\u003e💻\u003c/a\u003e\u003c/td\u003e\n    \u003c/tr\u003e\n    \u003ctr\u003e\n      \u003ctd align=\"center\" valign=\"top\" width=\"14.28%\"\u003e\u003ca href=\"http://homepage.ruhr-uni-bochum.de/Jan.Holthuis/\" rel=\"nofollow\"\u003e\u003cimg src=\"https://avatars.githubusercontent.com/u/1834516?v=4?s=100\" width=\"100px;\" alt=\"Jan Holthuis\" style=\"max-width: 100%;\"\u003e\u003cbr\u003e\u003csub\u003e\u003cb\u003eJan Holthuis\u003c/b\u003e\u003c/sub\u003e\u003c/a\u003e\u003cbr\u003e\u003ca href=\"#security-Holzhaus\" title=\"Security\"\u003e🛡️\u003c/a\u003e\u003c/td\u003e\n      \u003ctd align=\"center\" valign=\"top\" width=\"14.28%\"\u003e\u003ca href=\"https://github.com/mateuszkj\"\u003e\u003cimg src=\"https://avatars.githubusercontent.com/u/2494082?v=4?s=100\" width=\"100px;\" alt=\"mateuszkj\" style=\"max-width: 100%;\"\u003e\u003cbr\u003e\u003csub\u003e\u003cb\u003emateuszkj\u003c/b\u003e\u003c/sub\u003e\u003c/a\u003e\u003cbr\u003e\u003ca href=\"https://github.com/Eugeny/russh/commits?author=mateuszkj\" title=\"Code\"\u003e💻\u003c/a\u003e\u003c/td\u003e\n      \u003ctd align=\"center\" valign=\"top\" width=\"14.28%\"\u003e\u003ca href=\"https://gotlou.srht.site\" rel=\"nofollow\"\u003e\u003cimg src=\"https://avatars.githubusercontent.com/u/23006870?v=4?s=100\" width=\"100px;\" alt=\"Saksham Mittal\" style=\"max-width: 100%;\"\u003e\u003cbr\u003e\u003csub\u003e\u003cb\u003eSaksham Mittal\u003c/b\u003e\u003c/sub\u003e\u003c/a\u003e\u003cbr\u003e\u003ca href=\"https://github.com/Eugeny/russh/commits?author=gotlougit\" title=\"Code\"\u003e💻\u003c/a\u003e\u003c/td\u003e\n      \u003ctd align=\"center\" valign=\"top\" width=\"14.28%\"\u003e\u003ca href=\"http://canoncollision.com\" rel=\"nofollow\"\u003e\u003cimg src=\"https://avatars.githubusercontent.com/u/5120858?v=4?s=100\" width=\"100px;\" alt=\"Lucas Kent\" style=\"max-width: 100%;\"\u003e\u003cbr\u003e\u003csub\u003e\u003cb\u003eLucas Kent\u003c/b\u003e\u003c/sub\u003e\u003c/a\u003e\u003cbr\u003e\u003ca href=\"https://github.com/Eugeny/russh/commits?author=rukai\" title=\"Code\"\u003e💻\u003c/a\u003e\u003c/td\u003e\n      \u003ctd align=\"center\" valign=\"top\" width=\"14.28%\"\u003e\u003ca href=\"https://github.com/RDruon\"\u003e\u003cimg src=\"https://avatars.githubusercontent.com/u/64585623?v=4?s=100\" width=\"100px;\" alt=\"Raphael Druon\" style=\"max-width: 100%;\"\u003e\u003cbr\u003e\u003csub\u003e\u003cb\u003eRaphael Druon\u003c/b\u003e\u003c/sub\u003e\u003c/a\u003e\u003cbr\u003e\u003ca href=\"https://github.com/Eugeny/russh/commits?author=RDruon\" title=\"Code\"\u003e💻\u003c/a\u003e\u003c/td\u003e\n      \u003ctd align=\"center\" valign=\"top\" width=\"14.28%\"\u003e\u003ca href=\"https://github.com/Nurrl\"\u003e\u003cimg src=\"https://avatars.githubusercontent.com/u/15341887?v=4?s=100\" width=\"100px;\" alt=\"Maya the bee\" style=\"max-width: 100%;\"\u003e\u003cbr\u003e\u003csub\u003e\u003cb\u003eMaya the bee\u003c/b\u003e\u003c/sub\u003e\u003c/a\u003e\u003cbr\u003e\u003ca href=\"https://github.com/Eugeny/russh/commits?author=Nurrl\" title=\"Code\"\u003e💻\u003c/a\u003e\u003c/td\u003e\n      \u003ctd align=\"center\" valign=\"top\" width=\"14.28%\"\u003e\u003ca href=\"https://github.com/mmirate\"\u003e\u003cimg src=\"https://avatars.githubusercontent.com/u/992859?v=4?s=100\" width=\"100px;\" alt=\"Milo Mirate\" style=\"max-width: 100%;\"\u003e\u003cbr\u003e\u003csub\u003e\u003cb\u003eMilo Mirate\u003c/b\u003e\u003c/sub\u003e\u003c/a\u003e\u003cbr\u003e\u003ca href=\"https://github.com/Eugeny/russh/commits?author=mmirate\" title=\"Code\"\u003e💻\u003c/a\u003e\u003c/td\u003e\n    \u003c/tr\u003e\n    \u003ctr\u003e\n      \u003ctd align=\"center\" valign=\"top\" width=\"14.28%\"\u003e\u003ca href=\"https://github.com/george-hopkins\"\u003e\u003cimg src=\"https://avatars.githubusercontent.com/u/552590?v=4?s=100\" width=\"100px;\" alt=\"George Hopkins\" style=\"max-width: 100%;\"\u003e\u003cbr\u003e\u003csub\u003e\u003cb\u003eGeorge Hopkins\u003c/b\u003e\u003c/sub\u003e\u003c/a\u003e\u003cbr\u003e\u003ca href=\"https://github.com/Eugeny/russh/commits?author=george-hopkins\" title=\"Code\"\u003e💻\u003c/a\u003e\u003c/td\u003e\n      \u003ctd align=\"center\" valign=\"top\" width=\"14.28%\"\u003e\u003ca href=\"https://amcoff.net/\" rel=\"nofollow\"\u003e\u003cimg src=\"https://avatars.githubusercontent.com/u/17624114?v=4?s=100\" width=\"100px;\" alt=\"Åke Amcoff\" style=\"max-width: 100%;\"\u003e\u003cbr\u003e\u003csub\u003e\u003cb\u003eÅke Amcoff\u003c/b\u003e\u003c/sub\u003e\u003c/a\u003e\u003cbr\u003e\u003ca href=\"https://github.com/Eugeny/russh/commits?author=akeamc\" title=\"Code\"\u003e💻\u003c/a\u003e\u003c/td\u003e\n      \u003ctd align=\"center\" valign=\"top\" width=\"14.28%\"\u003e\u003ca href=\"http://brendonho.com\" rel=\"nofollow\"\u003e\u003cimg src=\"https://avatars.githubusercontent.com/u/12106620?v=4?s=100\" width=\"100px;\" alt=\"Brendon Ho\" style=\"max-width: 100%;\"\u003e\u003cbr\u003e\u003csub\u003e\u003cb\u003eBrendon Ho\u003c/b\u003e\u003c/sub\u003e\u003c/a\u003e\u003cbr\u003e\u003ca href=\"https://github.com/Eugeny/russh/commits?author=bho01\" title=\"Code\"\u003e💻\u003c/a\u003e\u003c/td\u003e\n      \u003ctd align=\"center\" valign=\"top\" width=\"14.28%\"\u003e\u003ca href=\"http://samlikes.pizza/\" rel=\"nofollow\"\u003e\u003cimg src=\"https://avatars.githubusercontent.com/u/226872?v=4?s=100\" width=\"100px;\" alt=\"Samuel Ainsworth\" style=\"max-width: 100%;\"\u003e\u003cbr\u003e\u003csub\u003e\u003cb\u003eSamuel Ainsworth\u003c/b\u003e\u003c/sub\u003e\u003c/a\u003e\u003cbr\u003e\u003ca href=\"https://github.com/Eugeny/russh/commits?author=samuela\" title=\"Code\"\u003e💻\u003c/a\u003e\u003c/td\u003e\n      \u003ctd align=\"center\" valign=\"top\" width=\"14.28%\"\u003e\u003ca href=\"https://github.com/Sherlock-Holo\"\u003e\u003cimg src=\"https://avatars.githubusercontent.com/u/10096425?v=4?s=100\" width=\"100px;\" alt=\"Sherlock Holo\" style=\"max-width: 100%;\"\u003e\u003cbr\u003e\u003csub\u003e\u003cb\u003eSherlock Holo\u003c/b\u003e\u003c/sub\u003e\u003c/a\u003e\u003cbr\u003e\u003ca href=\"https://github.com/Eugeny/russh/commits?author=sherlock-holo\" title=\"Code\"\u003e💻\u003c/a\u003e\u003c/td\u003e\n      \u003ctd align=\"center\" valign=\"top\" width=\"14.28%\"\u003e\u003ca href=\"https://github.com/ricott1\"\u003e\u003cimg src=\"https://avatars.githubusercontent.com/u/16502243?v=4?s=100\" width=\"100px;\" alt=\"Alessandro Ricottone\" style=\"max-width: 100%;\"\u003e\u003cbr\u003e\u003csub\u003e\u003cb\u003eAlessandro Ricottone\u003c/b\u003e\u003c/sub\u003e\u003c/a\u003e\u003cbr\u003e\u003ca href=\"https://github.com/Eugeny/russh/commits?author=ricott1\" title=\"Code\"\u003e💻\u003c/a\u003e\u003c/td\u003e\n      \u003ctd align=\"center\" valign=\"top\" width=\"14.28%\"\u003e\u003ca href=\"https://github.com/T0b1-iOS\"\u003e\u003cimg src=\"https://avatars.githubusercontent.com/u/15174814?v=4?s=100\" width=\"100px;\" alt=\"T0b1-iOS\" style=\"max-width: 100%;\"\u003e\u003cbr\u003e\u003csub\u003e\u003cb\u003eT0b1-iOS\u003c/b\u003e\u003c/sub\u003e\u003c/a\u003e\u003cbr\u003e\u003ca href=\"https://github.com/Eugeny/russh/commits?author=T0b1-iOS\" title=\"Code\"\u003e💻\u003c/a\u003e\u003c/td\u003e\n    \u003c/tr\u003e\n    \u003ctr\u003e\n      \u003ctd align=\"center\" valign=\"top\" width=\"14.28%\"\u003e\u003ca href=\"https://mecha.so\" rel=\"nofollow\"\u003e\u003cimg src=\"https://avatars.githubusercontent.com/u/4598631?v=4?s=100\" width=\"100px;\" alt=\"Shoaib Merchant\" style=\"max-width: 100%;\"\u003e\u003cbr\u003e\u003csub\u003e\u003cb\u003eShoaib Merchant\u003c/b\u003e\u003c/sub\u003e\u003c/a\u003e\u003cbr\u003e\u003ca href=\"https://github.com/Eugeny/russh/commits?author=shoaibmerchant\" title=\"Code\"\u003e💻\u003c/a\u003e\u003c/td\u003e\n      \u003ctd align=\"center\" valign=\"top\" width=\"14.28%\"\u003e\u003ca href=\"https://github.com/gleason-m\"\u003e\u003cimg src=\"https://avatars.githubusercontent.com/u/86493344?v=4?s=100\" width=\"100px;\" alt=\"Michael Gleason\" style=\"max-width: 100%;\"\u003e\u003cbr\u003e\u003csub\u003e\u003cb\u003eMichael Gleason\u003c/b\u003e\u003c/sub\u003e\u003c/a\u003e\u003cbr\u003e\u003ca href=\"https://github.com/Eugeny/russh/commits?author=gleason-m\" title=\"Code\"\u003e💻\u003c/a\u003e\u003c/td\u003e\n      \u003ctd align=\"center\" valign=\"top\" width=\"14.28%\"\u003e\u003ca href=\"https://ana.gelez.xyz\" rel=\"nofollow\"\u003e\u003cimg src=\"https://avatars.githubusercontent.com/u/16254623?v=4?s=100\" width=\"100px;\" alt=\"Ana Gelez\" style=\"max-width: 100%;\"\u003e\u003cbr\u003e\u003csub\u003e\u003cb\u003eAna Gelez\u003c/b\u003e\u003c/sub\u003e\u003c/a\u003e\u003cbr\u003e\u003ca href=\"https://github.com/Eugeny/russh/commits?author=elegaanz\" title=\"Code\"\u003e💻\u003c/a\u003e\u003c/td\u003e\n      \u003ctd align=\"center\" valign=\"top\" width=\"14.28%\"\u003e\u003ca href=\"https://github.com/tomknig\"\u003e\u003cimg src=\"https://avatars.githubusercontent.com/u/3586316?v=4?s=100\" width=\"100px;\" alt=\"Tom König\" style=\"max-width: 100%;\"\u003e\u003cbr\u003e\u003csub\u003e\u003cb\u003eTom König\u003c/b\u003e\u003c/sub\u003e\u003c/a\u003e\u003cbr\u003e\u003ca href=\"https://github.com/Eugeny/russh/commits?author=tomknig\" title=\"Code\"\u003e💻\u003c/a\u003e\u003c/td\u003e\n      \u003ctd align=\"center\" valign=\"top\" width=\"14.28%\"\u003e\u003ca href=\"https://www.legaltile.com/\" rel=\"nofollow\"\u003e\u003cimg src=\"https://avatars.githubusercontent.com/u/45085843?v=4?s=100\" width=\"100px;\" alt=\"Pierre Barre\" style=\"max-width: 100%;\"\u003e\u003cbr\u003e\u003csub\u003e\u003cb\u003ePierre Barre\u003c/b\u003e\u003c/sub\u003e\u003c/a\u003e\u003cbr\u003e\u003ca href=\"https://github.com/Eugeny/russh/commits?author=Barre\" title=\"Code\"\u003e💻\u003c/a\u003e\u003c/td\u003e\n      \u003ctd align=\"center\" valign=\"top\" width=\"14.28%\"\u003e\u003ca href=\"http://skutnik.page\" rel=\"nofollow\"\u003e\u003cimg src=\"https://avatars.githubusercontent.com/u/22240065?v=4?s=100\" width=\"100px;\" alt=\"Jean-Baptiste Skutnik\" style=\"max-width: 100%;\"\u003e\u003cbr\u003e\u003csub\u003e\u003cb\u003eJean-Baptiste Skutnik\u003c/b\u003e\u003c/sub\u003e\u003c/a\u003e\u003cbr\u003e\u003ca href=\"https://github.com/Eugeny/russh/commits?author=spoutn1k\" title=\"Code\"\u003e💻\u003c/a\u003e\u003c/td\u003e\n      \u003ctd align=\"center\" valign=\"top\" width=\"14.28%\"\u003e\u003ca href=\"http://blog.packetsource.net/\" rel=\"nofollow\"\u003e\u003cimg src=\"https://avatars.githubusercontent.com/u/6276475?v=4?s=100\" width=\"100px;\" alt=\"Adam Chappell\" style=\"max-width: 100%;\"\u003e\u003cbr\u003e\u003csub\u003e\u003cb\u003eAdam Chappell\u003c/b\u003e\u003c/sub\u003e\u003c/a\u003e\u003cbr\u003e\u003ca href=\"https://github.com/Eugeny/russh/commits?author=packetsource\" title=\"Code\"\u003e💻\u003c/a\u003e\u003c/td\u003e\n    \u003c/tr\u003e\n    \u003ctr\u003e\n      \u003ctd align=\"center\" valign=\"top\" width=\"14.28%\"\u003e\u003ca href=\"https://github.com/CertainLach\"\u003e\u003cimg src=\"https://avatars.githubusercontent.com/u/6235312?v=4?s=100\" width=\"100px;\" alt=\"Yaroslav Bolyukin\" style=\"max-width: 100%;\"\u003e\u003cbr\u003e\u003csub\u003e\u003cb\u003eYaroslav Bolyukin\u003c/b\u003e\u003c/sub\u003e\u003c/a\u003e\u003cbr\u003e\u003ca href=\"https://github.com/Eugeny/russh/commits?author=CertainLach\" title=\"Code\"\u003e💻\u003c/a\u003e\u003c/td\u003e\n    \u003c/tr\u003e\n  \u003c/tbody\u003e\n\u003c/table\u003e\u003c/markdown-accessiblity-table\u003e\n\n\n\n\u003cp dir=\"auto\"\u003eThis project follows the \u003ca href=\"https://github.com/all-contributors/all-contributors\"\u003eall-contributors\u003c/a\u003e specification. Contributions of any kind welcome!\u003c/p\u003e\n\u003c/article\u003e","loaded":true,"timedOut":false,"errorMessage":null,"headerInfo":{"toc":[{"level":1,"text":"Russh","anchor":"russh","htmlText":"Russh"},{"level":2,"text":"Safety","anchor":"safety","htmlText":"Safety"},{"level":3,"text":"Panics","anchor":"panics","htmlText":"Panics"},{"level":3,"text":"Unsafe code","anchor":"unsafe-code","htmlText":"Unsafe code"},{"level":2,"text":"Ecosystem","anchor":"ecosystem","htmlText":"Ecosystem"},{"level":2,"text":"Contributors ✨","anchor":"contributors-","htmlText":"Contributors ✨"}],"siteNavLoginPath":"/login?return_to=https%3A%2F%2Fgithub.com%2FEugeny%2Frussh"}}],"overviewFilesProcessingTime":0}},"appPayload":{"helpUrl":"https://docs.github.com","findFileWorkerPath":"/assets-cdn/worker/find-file-worker-1583894afd38.js","findInFileWorkerPath":"/assets-cdn/worker/find-in-file-worker-03b87d52cf57.js","githubDevUrl":null,"enabled_features":{"code_nav_ui_events":false,"overview_shared_code_dropdown_button":false,"react_blob_overlay":false,"copilot_conversational_ux_embedding_update":false,"copilot_smell_icebreaker_ux":true,"copilot_workspace":false}}}} main 35 Branches 32 Tags Go to file Code Folders and files Name Name Last commit message Last commit date Latest commit allcontributors[bot] add CertainLach as a contributor for code ( #332 ) Aug 24, 2024 aac16a0 · Aug 24, 2024 History 493 Commits .github .github Create FUNDING.yml Mar 1, 2024 cryptovec cryptovec cryptovec v0.7.3 May 31, 2024 files files test fixes Mar 10, 2022 pageant pageant fixed pageant crate Aug 19, 2024 russh-config russh-config fix: process multiple host entries ( #331 ) Aug 24, 2024 russh-keys russh-keys added AgentClient::into_inner Aug 20, 2024 russh russh bump Aug 22, 2024 .all-contributorsrc .all-contributorsrc add CertainLach as a contributor for code ( #332 ) Aug 24, 2024 .gitignore .gitignore cargo-clippy Mar 3, 2022 Cargo.toml Cargo.toml Support Pageant as agent ( #326 ) Aug 17, 2024 LICENSE-2.0.txt LICENSE-2.0.txt . Feb 7, 2022 README.md README.md add CertainLach as a contributor for code ( #332 ) Aug 24, 2024 rust-toolchain.toml rust-toolchain.toml update toolchain and add ratatui to dev dependencies Feb 11, 2024 rustfmt.toml rustfmt.toml AES-CTR, HMAC and ETM support ( #11 ) Aug 3, 2022 View all files Repository files navigation README Russh Low-level Tokio SSH2 client and server implementation. Examples: simple client , interactive PTY client , server , SFTP client , SFTP server . This is a fork of Thrussh by Pierre-Étienne Meunier. ✨ = added in Russh More panic safety ✨ async_trait support ✨ direct-tcpip (local port forwarding) forward-tcpip (remote port forwarding) ✨ direct-streamlocal (local UNIX socket forwarding, client only) ✨ forward-streamlocal (remote UNIX socket forwarding) ✨ Ciphers: chacha20-poly1305@openssh.com aes256-gcm@openssh.com ✨ aes256-ctr ✨ aes192-ctr ✨ aes128-ctr ✨ aes256-cbc ✨ aes192-cbc ✨ aes128-cbc ✨ 3des-cbc ✨ Key exchanges: curve25519-sha256@libssh.org diffie-hellman-group1-sha1 ✨ diffie-hellman-group14-sha1 ✨ diffie-hellman-group14-sha256 ✨ diffie-hellman-group16-sha512 ✨ ecdh-sha2-nistp256 ✨ ecdh-sha2-nistp384 ✨ ecdh-sha2-nistp521 ✨ MACs: hmac-sha1 ✨ hmac-sha2-256 ✨ hmac-sha2-512 ✨ hmac-sha1-etm@openssh.com ✨ hmac-sha2-256-etm@openssh.com ✨ hmac-sha2-512-etm@openssh.com ✨ Host keys and public key auth: ssh-ed25519 rsa-sha2-256 rsa-sha2-512 ssh-rsa ✨ ecdsa-sha2-nistp256 ✨ ecdsa-sha2-nistp384 ✨ ecdsa-sha2-nistp521 ✨ Authentication methods: password publickey keyboard-interactive none OpenSSH certificates (client only ✨) Dependency updates OpenSSH keepalive request handling ✨ OpenSSH agent forwarding channels ✨ OpenSSH server-sig-algs extension ✨ openssl dependency is optional ✨ Safety deny(clippy::unwrap_used) deny(clippy::expect_used) deny(clippy::indexing_slicing) deny(clippy::panic) Exceptions are checked manually Panics When the Rust allocator fails to allocate memory during a CryptoVec being resized. Unsafe code cryptovec uses unsafe for faster copying, initialization and binding to native API. Ecosystem russh-sftp - server-side and client-side SFTP subsystem support for russh - see russh/examples/sftp_server.rs or russh/examples/sftp_client.rs . async-ssh2-tokio - simple high-level API for running commands over SSH. Contributors ✨ Thanks goes to these wonderful people ( emoji key ): Mihir Samdarshi 📖 Connor Peet 💻 KVZN 💻 Adrian Müller (DTT) 💻 Simone Margaritelli 💻 Joe Grund 💻 AspectUnk 💻 Simão Mata 💻 Mariotaku 💻 yorkz1994 💻 Ciprian Dorin Craciun 💻 Eric Milliken 💻 Swelio 💻 Joshua Benz 💻 Jan Holthuis 🛡️ mateuszkj 💻 Saksham Mittal 💻 Lucas Kent 💻 Raphael Druon 💻 Maya the bee 💻 Milo Mirate 💻 George Hopkins 💻 Åke Amcoff 💻 Brendon Ho 💻 Samuel Ainsworth 💻 Sherlock Holo 💻 Alessandro Ricottone 💻 T0b1-iOS 💻 Shoaib Merchant 💻 Michael Gleason 💻 Ana Gelez 💻 Tom König 💻 Pierre Barre 💻 Jean-Baptiste Skutnik 💻 Adam Chappell 💻 Yaroslav Bolyukin 💻 This project follows the all-contributors specification. Contributions of any kind welcome! {"resolvedServerColorMode":"day"} About Rust SSH client & server library docs.rs/russh Topics rust ssh native ssh-server ssh-client ssh-client-library ssh-server-library Resources Readme Activity Stars 873 stars Watchers 7 watching Forks 91 forks Report repository Releases 19 v0.45.0 Latest Aug 14, 2024 + 18 releases Sponsor this project opencollective.com/ tabby ko-fi.com/ eugeny Learn more about GitHub Sponsors Packages 0 No packages published Used by 695 + 687 Contributors 44 + 30 contributors Languages Rust 100.0% Footer © 2024 GitHub, Inc. Footer navigation Terms Privacy Security Status Docs Contact Manage cookies Do not share my personal information You can’t perform that action at this time.
======>
https://kty.dev
-->>-->>
Overview The terminal for Kubernetes. kty is the easiest way to access resources such as
pods on your cluster - all without kubectl . Once kty is installed on your
cluster, ssh gives you a dashboard to interact with the cluster. You can: Use your Github or Google account to log into the cluster. No more annoying kubectl auth plugins. Get a shell running in pods - just like you would when SSH’n into a host
normally. Access the logs for running and exited containers in a pod. Forward traffic from your local machine into the cluster or from the cluster
to your local machine. scp or sftp files from pods. Access the cluster from any device that has an SSH client, from phones to
embedded devices. kty is an SSH server written in rust which provides a TUI-based dashboard that
maps Kubernetes concepts to SSH. It relies on OpenID providers such as Github or
Google to verify your identity. Kubernetes RBAC validates access, just like kubectl does, respecting your organizational policies. Last updated on September 15, 2024 Architecture
======>
https://github.com/pdeljanov/Symphonia
-->>-->>
Repository files navigation README MPL-2.0 license Symphonia Symphonia is a pure Rust audio decoding and media demuxing library supporting AAC, ADPCM, AIFF, ALAC, CAF, FLAC, MKV, MP1, MP2, MP3, MP4, OGG, Vorbis, WAV, and WebM. Getting Started · Documentation · Examples · Benchmarks Features Decode support for the most popular audio codecs with support for gapless playback Demux the most common media container formats Read most metadata and tagging formats Automatic format and decoder detection Basic audio primitives for manipulating audio data efficiently 100% safe Rust Minimal dependencies Fast with no compromises in performance! Additionally, planned features include: Providing a C API for integration into other languages Providing a WASM API for web usage Roadmap Support for individual audio codecs and media formats are provided by separate crates. By default, Symphonia only enables support royalty-free open standard codecs and formats, but others may be enabled using feature flags. Tip: All formats and codecs can be enabled with the all feature flag. Status The following status classifications are used to determine the state of development for each format or codec. Status Meaning - In work or not started yet. Good Many media streams play. Some streams may panic, error, or produce audible glitches. Some features may not be supported. Great Most media streams play. Inaudible glitches may be present. Most common features are supported. Excellent All media streams play.  No audible or inaudible glitches. All required features are supported. A status of Great indicates that major development is complete and that the feature is in a state that would be acceptable for most applications to use. A status of Excellent is only assigned after the feature passes all compliance tests. If no compliance tests are readily available, then a status of Excellent will be assigned if Symphonia's output matches that of a reference implementation, or ffmpeg , over a large test corpus. Formats (Demuxers) Format Status Gapless* Feature Flag Default Crate AIFF Great Yes aiff No symphonia-format-riff CAF Good No caf No symphonia-format-caf ISO/MP4 Great No isomp4 No symphonia-format-isomp4 MKV/WebM Good No mkv Yes symphonia-format-mkv OGG Great Yes ogg Yes symphonia-format-ogg Wave Excellent Yes wav Yes symphonia-format-riff * Gapless playback requires support from both the demuxer and decoder. Tip: All formats can be enabled with the all-formats feature flag. Codecs (Decoders) Codec Status Gapless Feature Flag Default Crate AAC-LC Great No aac No symphonia-codec-aac ADPCM Good Yes adpcm Yes symphonia-codec-adpcm ALAC Great Yes alac No symphonia-codec-alac HE-AAC (AAC+, aacPlus) - - he-aac No symphonia-codec-aac HE-AACv2 (eAAC+, aacPlus v2) - - he-aac-v2 No symphonia-codec-aac FLAC Excellent Yes flac Yes symphonia-bundle-flac MP1 Great No mp1 , mpa No symphonia-bundle-mp3 MP2 Great No mp2 , mpa No symphonia-bundle-mp3 MP3 Excellent Yes mp3 , mpa No symphonia-bundle-mp3 Opus - - opus Yes symphonia-codec-opus PCM Excellent Yes pcm Yes symphonia-codec-pcm Vorbis Excellent Yes vorbis Yes symphonia-codec-vorbis WavPack - - wavpack Yes symphonia-codec-wavpack A symphonia-bundle-* package is a combination of a decoder and a native demuxer. Tip: All codecs can be enabled with the all-codecs feature flag. Similarly, all MPEG audio codecs can be enabled with the mpa feature flag. Tags (Readers) All metadata readers are provided by the symphonia-metadata crate. Format Status ID3v1 Great ID3v2 Great ISO/MP4 Great RIFF Great Vorbis comment (FLAC) Perfect Vorbis comment (OGG) Perfect Quality In addition to the safety guarantees afforded by Rust, Symphonia aims to: Decode media as correctly as the leading free-and-open-source software decoders Prevent denial-of-service attacks Be fuzz-tested Provide a powerful, consistent, and easy to use API Performance Symphonia aims to be comparable to, or faster than, popular open-source C-based implementations. Currently, Symphonia's decoders are generally +/-15% the performance of FFMpeg. However, the exact range will depend strongly on the codec, which features of the codec are being leveraged in the encoding, the Rust compiler version, and the CPU architecture being compiled for. See the benchmarks for more information. Optimizations At this time, SIMD optimizations are not enabled by default. Enabling any SIMD support feature flags will pull in the rustfft dependency. Instruction Set Feature Flag Default SSE opt-simd-sse No AVX opt-simd-avx No Neon opt-simd-neon No Tip: All SIMD optimizations can be enabled with the opt-simd feature flag. Examples Basic usage examples may be found here . For a more complete application, see symphonia-play , a simple music player. Tools Symphonia provides the following tools for debugging purposes: symphonia-play for probing, decoding, validating, and playing back media streams. symphonia-check for validating Symphonia's decoded output against various decoders. Author The primary author is Philip Deljanov. Special Thanks Kostya Shishkov (AAC-LC decoder contribution, see symphonia-codec-aac ) License Symphonia is provided under the MPL v2.0 license. Please refer to the LICENSE file for more details. Contributing Symphonia is a free and open-source project that welcomes contributions! To get started, please read our Contribution Guidelines .
======>
https://github.com/RustAudio/cpal
-->>-->>
Repository files navigation README Apache-2.0 license CPAL - Cross-Platform Audio Library Low-level library for audio input and output in pure Rust. This library currently supports the following: Enumerate supported audio hosts. Enumerate all available audio devices. Get the current default input and output devices. Enumerate known supported input and output stream formats for a device. Get the current default input and output stream formats for a device. Build and run input and output PCM streams on a chosen device with a given stream format. Currently, supported hosts include: Linux (via ALSA or JACK) Windows (via WASAPI by default, see ASIO instructions below) macOS (via CoreAudio) iOS (via CoreAudio) Android (via Oboe) Emscripten Note that on Linux, the ALSA development files are required. These are provided
as part of the libasound2-dev package on Debian and Ubuntu distributions and alsa-lib-devel on Fedora. Compiling for Web Assembly If you are interested in using CPAL with WASM, please see this guide in our Wiki which walks through setting up a new project from scratch. Feature flags for audio backends Some audio backends are optional and will only be compiled with a feature flag . JACK (on Linux): jack ASIO (on Windows): asio Oboe can either use a shared or static runtime. The static runtime is used by default, but activating the oboe-shared-stdcxx feature makes it use the shared runtime, which requires libc++_shared.so from the Android NDK to
be present during execution. ASIO on Windows ASIO is an audio
driver protocol by Steinberg. While it is available on multiple operating
systems, it is most commonly used on Windows to work around limitations of
WASAPI including access to large numbers of channels and lower-latency audio
processing. CPAL allows for using the ASIO SDK as the audio host on Windows instead of
WASAPI. Locating the ASIO SDK The location of ASIO SDK is exposed to CPAL by setting the CPAL_ASIO_DIR environment variable. The build script will try to find the ASIO SDK by following these steps in order: Check if CPAL_ASIO_DIR is set and if so use the path to point to the SDK. Check if the ASIO SDK is already installed in the temporary directory, if so use that and set the path of CPAL_ASIO_DIR to the output of std::env::temp_dir().join("asio_sdk") . If the ASIO SDK is not already installed, download it from https://www.steinberg.net/asiosdk and install it in the temporary directory. The path of CPAL_ASIO_DIR will be set to the output of std::env::temp_dir().join("asio_sdk") . In an ideal situation you don't need to worry about this step. Preparing the build environment bindgen , the library used to generate bindings to the C++ SDK, requires
clang. Download and install LLVM from here under the "Pre-Built Binaries"
section. The version as of writing this is 17.0.1. Add the LLVM bin directory to a LIBCLANG_PATH environment variable. If
you installed LLVM to the default directory, this should work in the command
prompt: setx LIBCLANG_PATH "C:\Program Files\LLVM\bin" If you don't have any ASIO devices or drivers available, you can download
and install ASIO4ALL . Be sure to enable the
"offline" feature during installation despite what the installer says about
it being useless. Our build script assumes that Microsoft Visual Studio is installed if the host OS for compilation is Windows. The script will try to find vcvarsall.bat and execute it with the right host and target machine architecture regardless of the Microsoft Visual Studio version.
If there are any errors encountered in this process which is unlikely,
you may find the vcvarsall.bat manually and execute it with your machine architecture as an argument.
The script will detect this and skip the step. A manually executed command example for 64 bit machines: "C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Auxiliary\Build\vcvarsall.bat" amd64 For more information please refer to the documentation of `vcvarsall.bat`` . Select the ASIO host at the start of our program with the following code: let host ; # [ cfg ( target_os = "windows" ) ] { host = cpal :: host_from_id ( cpal :: HostId :: Asio ) . expect ( "failed to initialise ASIO host" ) ; } If you run into compilations errors produced by asio-sys or bindgen , make
sure that CPAL_ASIO_DIR is set correctly and try cargo clean . Make sure to enable the asio feature when building CPAL: cargo build --features "asio" or if you are using CPAL as a dependency in a downstream project, enable the
feature like this: cpal = { version = " * " , features = [ " asio " ] } Updated as of ASIO version 2.3.3. Cross compilation When Windows is the host and the target OS, the build script of asio-sys supports all cross compilation targets
which are supported by the MSVC compiler. An exhaustive list of combinations could be found here with the addition of undocumented arm64 , arm64_x86 , arm64_amd64 and arm64_arm targets. (5.11.2023) It is also possible to compile Windows applications with ASIO support on Linux and macOS. For both platforms the common way to do this is to use the MinGW-w64 toolchain. Make sure that you have included the MinGW-w64 include directory in your CPLUS_INCLUDE_PATH environment variable.
Make sure that LLVM is installed and include directory is also included in your CPLUS_INCLUDE_PATH environment variable. Example for macOS for the target of x86_64-pc-windows-gnu where mingw-w64 is installed via brew: export CPLUS_INCLUDE_PATH="$CPLUS_INCLUDE_PATH:/opt/homebrew/Cellar/mingw-w64/11.0.1/toolchain-x86_64/x86_64-w64-mingw32/include"
======>
https://stackoverflow.com/questions/35711044/how-can-i-specify-binary-only-dependencies
-->>-->>
Home Questions Tags Users Companies Labs Jobs Discussions Recent Tags rust rust-cargo Collectives Communities for your favorite technologies. Explore all Collectives Teams Now available on Stack Overflow for Teams! AI features where you work: search, IDE, and chat. Learn more Explore Teams Teams Ask questions, find answers and collaborate at work with Stack Overflow for Teams. Explore Teams Collectives™ on Stack Overflow Find centralized, trusted content and collaborate around the technologies you use most. Learn more about Collectives Teams Q&A for work Connect and share knowledge within a single location that is structured and easy to search. Learn more about Teams Get early access and see previews of new features. Learn more about Labs How can I specify binary-only dependencies? Ask Question Asked 8 years, 6 months ago Modified 11 months ago Viewed 31k times This question shows research effort; it is useful and clear 100 Save this question. Show activity on this post. I have a crate with both a binary and a library. The library is extremely light on dependencies, while the binary requires quite a bit more to, e.g., load files or do scoped parallel things. Currently, I have my Cargo.toml set up like this: [dependencies.kdtree]
path = "../kdtree" [dependencies]
rand= "0.3.0" rustc-serialize = "0.3" csv = {git = "https://github.com/BurntSushi/rust-csv.git" }
crossbeam = "0.2" num_cpus = "0.2" [lib]
name = "conformal" path = "src/lib.rs" [[bin]]
name = "ucitest" path = "src/bin/main.rs" The only dependencies the library needs are the kdtree and rand . However, it seems like even if you only build the library, it goes and builds the binary-only dependencies anyway. I've tried using features and other tricks like [[bin].dependencies] or [ucitest-dependencies] (or adding a dependencies= [] line under [[bin]] ) that I thought might make them only build for the binary, but I can't find a way. These aren't enough dependencies to make this a problem, but it's bothering me. Is there a way to narrow down dependencies so they only build for specific binaries? rust rust-cargo Share Share a link to this question Copy link CC BY-SA 4.0 Follow Follow this question to receive notifications edited Jun 24, 2019 at 18:23 Shepmaster 423k 110 110 gold badges 1.2k 1.2k silver badges 1.4k 1.4k bronze badges asked Feb 29, 2016 at 22:31 Linear Linear 22k 6 6 gold badges 63 63 silver badges 72 72 bronze badges 3 6 If your library and binary are that drastically different, perhaps they deserve two distinct Cargo.toml files? You could always put the binary in a subdirectory and use the library from the parent directory (or a released version). – Shepmaster Commented Feb 29, 2016 at 22:48 From the name it seems your binary is only a test, so you could put it under tests and use dev-dependencies . – starblue Commented Mar 1, 2016 at 9:51 1 @starblue The name is misleading in the way that programmers normally think about tests, it's for running trials with the library on UCI test data sets and generating things like learning curves. – Linear Commented Mar 1, 2016 at 20:34 Add a comment | 3 Answers 3 Sorted by: Reset to default Highest score (default) Trending (recent votes count more) Date modified (newest first) Date created (oldest first) This answer is useful 114 Save this answer. Show activity on this post. There are several ways to simulate what you want: 1) Turn the binaries to examples Examples and tests are built with dev-dependencies , so you could move those dependencies into this section. The library won't depend on them. # File structure conformal/
    Cargo.toml
    src/
        lib.rs
    examples/ # <-- the `ucitest` is ucitest.rs # <-- moved to here # Cargo.toml [dependencies] kdtree = { path = "../kdtree" } rand = "0.3" [dev-dependencies] # <-- move the examples-only dependencies here serde = "1" csv = "0.15" crossbeam = "0.3" num_cpus = "1" [lib] name = "conformal" [[example]] # <--- declare the executable name = "ucitest" # <--- as an example To run the binary, use: cargo run --example ucitest 2) Optional dependencies with required features Dependencies can be made optional , so other crates that depend on your conformal library won't need to download them. Starting from Rust 1.17, binaries can declare they require certain optional features to be turned on, effectively making those libraries "needed only for binaries". # Cargo.toml [dependencies] kdtree = { path = "../kdtree" } rand = "0.3" serde = { version = "1" , optional = true } # <-- make csv = { version = "0.15" , optional = true } # <-- all of crossbeam = { version = "0.3" , optional = true } # <-- them num_cpus = { version = "1" , optional = true } # <-- optional [lib] name = "conformal" [features] build-binary = [ "serde" , "csv" , "crossbeam" , "num_cpus" ] [[bin]] name = "ucitest" required-features = [ "build-binary" ] # <-- Note that you need to manually pass --features build-binary when building the binaries: cargo run --features build-binary --bin ucitest 3) Make the binaries as its own package You could do whatever dependency management you like when the library and the binary are separate packages. # File structure conformal/
    Cargo.toml
    src/
        lib.rs
    ucitest/ # <-- move ucitest Cargo.toml # <-- into its own src/ # <-- package. main.rs # ucitest/Cargo.toml [dependencies] conformal = { version = "0.1" , path = "../" } # <-- explicitly depend on the library serde = "1" csv = "0.15" crossbeam = "0.3" num_cpus = "1" Share Share a link to this answer Copy link CC BY-SA 3.0 Follow Follow this answer to receive notifications answered Sep 2, 2017 at 19:10 kennytm kennytm 521k 108 108 gold badges 1.1k 1.1k silver badges 1k 1k bronze badges 3 3 The second method seems to be the best practice. We can then easily add some drafting binaries without polluting something else, and don't get the redundant pkg manifest. – Fifnmar Commented Jan 8, 2021 at 11:04 For the second method, when using cargo install , are the required features enabled automatically? Or do we need to use cargo install -f build-binary ? – Sibbo Commented Aug 20 at 6:24 Re: "The second method ("Optional dependencies with required features") seems to be the best practice." I disagree; adding an optional dependency only to make an example work feels like a hack. – David J. Commented Sep 12 at 12:13 Add a comment | This answer is useful 32 Save this answer. Show activity on this post. These days this is probably best solved with workspaces [ 1 , 2 ]. The directory structure is as follows: project-root
├── Cargo.lock
├── Cargo.toml
├── yourlibary
│   ├── Cargo.toml
│   └── src
│       └── lib.rs
├── src
│   └── main.rs
└── target The top-level Cargo.toml file: [package] name = "yourprogram" version = "0.1.0" authors = [ "You <you@example.com>" ] [workspace] [dependencies] yourlibrary = { path = "yourlibrary" } yourlibrary Cargo.toml file: [package] name = "yourlibrary" version = "0.1.0" authors = [ "You <you@example.com>" ] [dependencies] The Cargo.lock file as well as the target directory is at the project root directory and is shared by all the components in the workspace. Workspace components are inferred automatically from dependencies with locak path, but can be specified manually as well. Each component with its Cargo.toml file can still be published separately on crates.io Share Share a link to this answer Copy link CC BY-SA 4.0 Follow Follow this answer to receive notifications edited Oct 14, 2023 at 13:01 sjohnson.pi 388 3 3 silver badges 7 7 bronze badges answered Nov 4, 2017 at 18:00 kralyk kralyk 4,357 1 1 gold badge 34 34 silver badges 35 35 bronze badges 1 1 Can yourlibrary share code with yourbinary when using workspaces? – Ian Rehwinkel Commented Feb 26, 2020 at 9:18 Add a comment | This answer is useful 15 Save this answer. Show activity on this post. This is not implemented yet in Cargo . Share Share a link to this answer Copy link CC BY-SA 3.0 Follow Follow this answer to receive notifications edited Mar 14, 2016 at 12:47 Shepmaster 423k 110 110 gold badges 1.2k 1.2k silver badges 1.4k 1.4k bronze badges answered Mar 14, 2016 at 10:22 kriomant kriomant 2,306 2 2 gold badges 16 16 silver badges 22 22 bronze badges Add a comment | Your Answer StackExchange.ifUsing("editor", function () {
            StackExchange.using("externalEditor", function () {
                StackExchange.using("snippets", function () {
                    StackExchange.snippets.init();
                });
            });
        }, "code-snippets"); StackExchange.ready(function() {
        var channelOptions = {
            tags: "".split(" "),
            id: "1"
        };
        initTagRenderer("".split(" "), "".split(" "), channelOptions);

        StackExchange.using("externalEditor", function() {
            // Have to fire editor after snippets, if snippets enabled
            if (StackExchange.settings.snippets.snippetsEnabled) {
                StackExchange.using("snippets", function() {
                    createEditor();
                });
            }
            else {
                createEditor();
            }
        });

        function createEditor() {   
            StackExchange.prepareEditor({
                useStacksEditor: false,
                heartbeatType: 'answer',
                autoActivateHeartbeat: false,
                convertImagesToLinks: true,
                noModals: true,
                showLowRepImageUploadWarning: true,
                reputationToPostImages: 10,
                bindNavPrevention: true,
                postfix: "",
                imageUploadEnabled: false,
                imageUploader: {
                    brandingHtml: "",
                    contentPolicyHtml: "User contributions licensed under \u003ca href=\"https://stackoverflow.com/help/licensing\"\u003eCC BY-SA\u003c/a\u003e \u003ca href=\"https://stackoverflow.com/legal/acceptable-use-policy\"\u003e(content policy)\u003c/a\u003e",
                    allowUrls: true,
                },
                onDemand: true,
                discardSelector: ".discard-answer",
                enableTables: true,
                isStacksEditorPreviewEnabled: false
                ,enableTables:true,enableSnippets:true
            });
                    }
    }); Reminder: Answers generated by artificial intelligence tools are not allowed on Stack Overflow. Learn more Thanks for contributing an answer to Stack Overflow! Please be sure to answer the question . Provide details and share your research! But avoid … Asking for help, clarification, or responding to other answers. Making statements based on opinion; back them up with references or personal experience. To learn more, see our tips on writing great answers . Draft saved Draft discarded Sign up or log in StackExchange.ready(function () {
                                StackExchange.helpers.onClickDraftSave('#login-link');

                                var $window = $(window),
                                    onScroll = function(e) {
                                        var $elem = $('.new-login-left'),
                                            docViewTop = $window.scrollTop(),
                                            docViewBottom = docViewTop + $window.height(),
                                            elemTop = $elem.offset().top,
                                            elemBottom = elemTop + $elem.height();
                                        if ((docViewTop < elemTop) && (docViewBottom > elemBottom))  {
                                            StackExchange.using('gps', function() { StackExchange.gps.track('embedded_signup_form.view', { location: 'question_page' }); });
                                            $window.off('scroll', onScroll);
                                        }
                                    };
                                $window.on('scroll', onScroll);
                                                                }); Sign up using Google Sign up using Email and Password Submit Post as a guest Name Email Required, but never shown StackExchange.ready(
                    function () {
                        StackExchange.openid.initPostLogin('.new-post-login', 'https%3a%2f%2fstackoverflow.com%2fquestions%2f35711044%2fhow-can-i-specify-binary-only-dependencies%23new-answer', 'question_page');
                    }
                ); <h3 class="flex--item fs-title">Post as a guest</h3>
            <div class="flex--item">
                <div class="d-flex gs4 gsy fd-column">
                    <label class="s-label" for="display-name">Name</label>
                    <div class="d-flex ps-relative">
                        <input class="s-input" id="display-name" name="display-name" maxlength="30" type="text" value="" tabindex="105" placeholder="" />
                    </div>
                </div>
            </div>
            <div class="flex--item">
                <div class="d-flex gs4 gsy fd-column">
                    <div class="flex--item">
                        <div class="d-flex gs2 gsy fd-column">
                            <label class="flex--item s-label" for="m-address">Email</label>
                            <p class="flex--item s-description">Required, but never shown</p>
                        </div>
                    </div>
                    <div class="d-flex ps-relative">
                        <input class="s-input js-post-email-field" id="m-address" name="m-address" type="text" value="" size="40" tabindex="106" placeholder="" />
                    </div>
                </div>
            </div> Post Your Answer Discard By clicking “Post Your Answer”, you agree to our terms of service and acknowledge you have read our privacy policy . Not the answer you're looking for? Browse other questions tagged rust rust-cargo or ask your own question . The Overflow Blog The world’s largest open-source business has plans for enhancing LLMs Looking under the hood at the tech stack that powers multimodal AI Featured on Meta Join Stack Overflow’s CEO and me for the first Stack IRL Community Event in... User activation: Learnings and opportunities What does a new user need in a homepage experience on Stack Overflow? Announcing the new Staging Ground Reviewer Stats Widget Report this ad Report this ad Linked 0 Why can't my main.rs access a dev-dependency? 0 Rust lib and bin sharing the same name, but having separate dependencies 1 Is it possible to have dependencies in a Rust project for specific binaries? 2 Cannot find [package] in the crate root 0 Can I config a build script for specific binary with Cargo? 0 Can I make a Rust bin executable that uses test module Related 2 Rust compiler/cargo cannot find crate which is installed 2 Why is rust-analyzer not finding dependencies in workspace member? 8 How to use panic=abort with external dependencies? 48 failed to parse manifest - no targets specified 8 How to build a binary and a library with the same configuration options? 1 error[E0463]: can't find crate for `alloc` error from imported crate when building for thumbv8m.main-none-eabi 3 How do I import a crate-type = ["cdylib"] library? 420 Package with both a library and a binary? 0 How to destructure an enum from a transitive dependency? 2 Unresolved imports when I move a binary crate to src/bin $(function() {
                     $(".js-gps-related-questions .spacer").on("click", function () {
                        fireRelatedEvent($(this).index() + 1, $(this).data('question-id'));
                     });

                 function fireRelatedEvent(position, questionId) {
                     StackExchange.using("gps", function() {
                         StackExchange.gps.track('related_questions.click',
                         {
                             position: position,
                             originQuestionId: 35711044,
                             relatedQuestionId: +questionId,
                             location: 'sidebar',
                             source: 'Baseline_Fallback'
                         });    
                     });
                 }
             }); Hot Network Questions What ever happened to combinatorial chemistry? (Super hyped in the 90s.) How to execute this time-stamped auto-backup function every N minutes? Is it possible/recommended to paint the side of piano's keys? How can we speed up the process of returning our lost luggage? Emergency belt repair Seeking a Text-Based Version of Paul Dirac's 1926 Paper on Quantum Mechanics Determining Entropy in PHP Coloring a function based on its monotonicity Bitcoin Core 28 Tests (testmempoolaccept rejected but submitpackage accepted) Why is the Liar a problem? Fantasy novel where a brother and sister go to a fantasy and travel with a one-armed warrior How to see material properties (colors) in main view How can I calculate derivative of eigenstates numerically? Are these colored sets closed under multiplication? A word like "science/scientific" that can be used for ALL academic fields? Cutting a curve through a thick timber without waste how to rotate only closest element to body? Would a scientific theory of everything be falsifiable? Symbolic integral over real functions with interger parametres evaluates to complex numbers How to plausibly delay the creation of the telescope Smoking on a hotel room's balcony in Greece Smallest prime q such that concatenation (p+q)"q is a prime What is the oldest open math problem outside of number theory? Would Dicyanoacetylene Make a Good Flamethrower Fuel? Question feed Subscribe to RSS Question feed To subscribe to this RSS feed, copy and paste this URL into your RSS reader. StackExchange.ready(function(){$.get('/posts/35711044/ivc/2d8c?prg=5ac2c6f1-b6ce-49d0-8d98-5c9b56160744');}); <div><img src="/posts/35711044/ivc/2d8c?prg=5ac2c6f1-b6ce-49d0-8d98-5c9b56160744" class="dno" alt="" width="0" height="0"></div> lang-rust
======>
https://github.com/tensorzero/tensorzero/
-->>-->>
Repository files navigation README Apache-2.0 license TensorZero TensorZero is an open-source platform that helps LLM applications graduate from API wrappers into defensible AI products. Integrate our model gateway Send metrics or feedback Unlock compounding improvements in quality, cost, and latency It enables a data & learning flywheel for LLMs by unifying: Inference: one API for all LLMs, with <1ms P99 overhead Observability: inference & feedback → your database Optimization: better prompts, models, inference strategies Experimentation: built-in A/B testing, routing, fallbacks Website · Docs · Twitter · Slack · Discord Quick Start (5min) · Tutorial (30min) · Deployment Guide · API Reference · Configuration Reference Overview The TensorZero Gateway is a high-performance model gateway written in Rust 🦀 that provides a unified API interface for all major LLM providers, allowing for seamless cross-platform integration and fallbacks. It handles structured schema-based inference with <1ms P99 latency overhead (see Benchmarks ) and built-in observability and experimentation (and soon, inference-time optimizations). It also collects downstream metrics and feedback associated with these inferences, with first-class support for multi-step LLM systems. Everything is stored in a ClickHouse data warehouse that you control for real-time, scalable, and developer-friendly analytics. Over time, TensorZero Recipes leverage this structured dataset to optimize your prompts and models: run pre-built recipes for common workflows like fine-tuning, or create your own with complete flexibility using any language and platform. Finally, the gateway's experimentation features and GitOps orchestration enable you to iterate and deploy with confidence, be it a single LLM or thousands of LLMs. Our goal is to help engineers build, manage, and optimize the next generation of LLM applications: systems that learn from real-world experience.
Read more about our Vision & Roadmap . Get Started Next steps? The Quick Start (5min) and the Tutorial (30min) show it's easy to set up an LLM application with TensorZero. The tutorial teaches how to build a simple chatbot, an email copilot, a weather RAG system, and a structured data extraction pipeline. Questions? Ask us on Slack or Discord . Using TensorZero at work? Email us at hello@tensorzero.com to set up a Slack or Teams channel with your team (free). Examples We are working on a series of complete runnable examples illustrating TensorZero's data & learning flywheel. Writing Haikus to Satisfy a Judge with Hidden Preferences This example fine-tunes GPT-4o Mini to generate haikus tailored to a specific taste.
You'll see TensorZero's "data flywheel in a box" in action: better variants leads to better data, and better data leads to better variants.
You'll see progress by fine-tuning the LLM multiple times. Fine-Tuning TensorZero JSON Functions for Named Entity Recognition (CoNLL++) This example shows that an optimized Llama 3.1 8B model can be trained to outperform GPT-4o on an NER task using a small amount of training data, and served by Fireworks at a fraction of the cost and latency. Automated Prompt Engineering for Math Reasoning (GSM8K) with a Custom Recipe (DSPy) TensorZero provides a number of pre-built optimization recipes covering common LLM engineering workflows.
But you can also easily create your own recipes and workflows!
This example shows how to optimize a TensorZero function using an arbitrary tool — here, DSPy. & many more on the way!

======>
https://github.com/HiImJulien/in-vite
-->>-->>
Repository files navigation README MIT license Welcome to in-vite 🦀 What's in-vite? In-vite is a small library, inspired by Laravel's Vite Plugin. It allows you
to integrate vite's bundling capabilities into your Rust 🦀 backend. Getting Started 🚀 cargo install in-vite The library revolves around the struct Vite which handles most aspects and
is required for integration: use in_vite :: Vite ; fn main ( ) { let vite = Vite :: default ( ) ; // Retrieve the HTML required to include app.js and it's dependencies. let code = vite . make_html ( vec ! [ "app.js" ] ) . unwrap ( ) ; } Important in-vite does not setup Vite by itself, rather it expects an already
setup instance.
On how to setup Vite read further. Setting up Vite 🚧 This library requires an instance of Vite to be already setup. To setup Vite
use your favorite package manager, for example using npm : npm create vite@latest Next, you need to extend Vite's vite.config.js : // vite.config.js export default defineConfig ( { build : { manifest : true , rollupOptions : { input : 'app.js' } , } } ) ; The manifest is used in production builds to resolve the appropriate
build artifact. Note You must manually specify entrypoints, since Vite has no index.html to go from. Further configurations By default, Vite serves assets on http://localhost:5173 . This and other
defaults can be overwritten by constructing an instance of Vite with ViteOptions . Let's suppose, you're running Vite on port 8090 , you can construct an instance
like this: let opts = ViteOptions :: default ( ) . host ( "http://localhost:8090" ) ; let vite = Vite :: with_options ( opts ) ; Mode Configuration By default in-vite is assuming that you're running in development mode,
unless any of the following environemt variables are set to production : LOCO_ENV=production # or RAILS_ENV=production # or NODE_ENV=production This behavior can be explicitly overwritten using ViteOptions : let opts = ViteOptions :: default ( ) . mode ( ViteMode :: Production ) ; let vite = Vite :: with_options ( opts ) ; Integrations 🗺️ in-vite provides integrations for templating engines such as tera and minijinja . Which can be activated
using the appropriate feature flag. Integration with tera Using the feature flag tera , the integration can be activated: cargo add in-vite -F tera Integrating Vite is as simple as registering a function with your tera::Tera instance: let vite = Vite :: default ( ) ; let mut tera = tera :: Tera :: default ( ) ; tera . register_function ( "vite" , vite ) ; let template = tera . render_str ( r#"{{ vite(resources="app.js") }}"# , & tera :: Context :: new ( ) ) ? ; Integration with minijinja 🥷 Like other integrations, this one can be activated with the feature flag minijinja : cargo add in-vite -F minijinja let vite = Vite :: default ( ) ; let mut env = minijinja :: Environment :: new ( ) ; env . add_global ( "vite" , minijinja :: Value :: from_object ( vite ) ) ; let template = env . render_str ( r#"{{ vite(resources="app.js") }}"# , minijinja :: Value :: UNDEFINED ) ? ; Contributing If you consider contributing, then first of all: Thank you! 💝
The first and simplest way to show your support is to star this repo. This project accepts bug reports and feature requests via the integrated issue tracker . Pull requests
for new integrations are also welcome! Additionally, code reviews and pointers on how to improve the libraries code
are welcome. This is my first Rust library after all. Sponsoring Thank you for considering sponsoring! While this project does not require
sponsoring, small donations are accepted. 100% of the donations are used to
provide a student (me) 👨‍🎓 with a steady supply of caffeinated beverages
which are then metabolized into 100% organic Rust code. License This project is licensed under the MIT license, which you find here .

======>
https://rodarmor.com/blog/whence-newline/
-->>-->>
for c in text.chars() {
  match state {
    …
    State::Backslash => {
      match c {
        'n' => cooked.push('\n'),
        …
      }
      …
    }
    …
  }
}
======>
https://old.reddit.com/user/BMO/comments/1feln6j/megathread_3_ways_bmo_investorline_can_help_you/
-->>-->>
TL;DR: With BMO's array of    free options trading resources   , your investment journey can reach new heights. Access our options course, tune into webinars, and explore educational videos to unleash your options trading potential.   

   https://reddit.com/link/1feln6j/video/bmcpw5e2ddnd1/player   

   Level-up your online trading with BMO’s free, interactive options course.   

   With BMO, your investments aren't just transactions—they're opportunities waiting to be realized. BMO's interactive options course can help deepen your understanding of options trading with free valuable strategies – so you can level-up your investments without the investment.   

   https://reddit.com/link/1feln6j/video/9z44ios5ddnd1/player   

   Learn options trading strategies from industry experts in BMO’s free webinars.   

   Refine your options trading skills. Dive deep into advanced options trading strategy webinars, learning from industry experts to refine your trading skills and apply new techniques with confidence.   

   https://reddit.com/link/1feln6j/video/doe8isi7ddnd1/player   

   Step-up your options trading with BMO's library of free videos.   

   Explore options fundamentals, dive into advanced strategies, and elevate your options trading with our comprehensive library of free videos.   

   https://reddit.com/link/1feln6j/video/golmjnv9ddnd1/player   

   Are you ready to level-up your investments?   

   Start trading with    BMO InvestorLine    today.   
   

======>
https://old.reddit.com/r/rust/comments/1fi9ta4/kty_the_terminal_for_kubernetes/
-->>-->>
kty    is an SSH server written in rust that provides a TUI-based dashboard mapping k8s concepts onto SSH. It relies on OpenID providers for identity so that you don't need to introduce anything special to your stack. With SSH in place, there are some fun things you can do which are difficult otherwise:   

   
   Forward traffic from a service on the cluster to your local laptop using    ssh -R   .   
   Forward traffic from a local port to the cluster using    ssh -L   .   
   Use    scp    or any sftp client natively to copy files in and out of containers.   
   Shell into a container from anywhere that SSH is supported.   
   

   This was a lot of fun to build so far! It has highlighted how rich the rust ecosystem is for me:   

   
   ratatui    for the TUI.   
   russh    for the SSH server.   
   russh-sftp    for the SFTP functionality.   
   kube-rs    for the k8s interactions.   
   tachyonfx    for the animations.   
   
   

======>
https://old.reddit.com/r/rust/comments/1fiqsoj/seeking_input_is_draggable_playback_worth_the/
-->>-->>
I'm building a Rust-based music player. Initially, I used    Rodio   , which is based on    CPAL   , but I've also experimented with CPAL combined with    Symphonia   , and now    SDL2   .   

   Rodio works okay, but with CPAL, there's currently no way to get the current playback time of the song. This limitation means that while I can implement seeking, I won't be able to display the current time of the song—only the total duration. On the other hand, SDL2 allows me to access the current playback time.   

   So, my question is: Do you think it's worth switching to SDL2 instead of CPAL/Rodio just to gain the ability to seek within a song using a draggable progress bar? I'm unsure if this feature is important enough to users to justify the switch, or if I should wait for CPAL to implement it themselves.   

   The program is targeting Windows and Linux, so I believe all of these libraries support those two operating systems.   

   Clarification: By "seek," I'm referring to the ability to drag the progress bar to a specific time in the song. When the user lets go, the playback jumps to that time, and the bar moves to the right as the song approaches its end.   
   

======>
https://old.reddit.com/r/rust/comments/1fi32rm/why_doesnt_rust_have_bindependencies/
-->>-->>
I have a very simple crate and a cli that uses clap, but if others just use it as a library, then there is no need to install clap. I found some ways to avoid this problem, but none of them are perfect.   

   It seems that someone proposed it as early as 2015.    https://github.com/rust-lang/cargo/issues/1987   

   Here are three solutions
   https://stackoverflow.com/questions/35711044/how-can-i-specify-binary-only-dependencies   

   Turn the binaries to examples   

   This is suitable for testing, but not for publishing to crate.io for others to use. In addition, bin cannot specify a path, so you need to run it in the example way.   

   ```
cargo run --example abc   

   ```   

   Make the binaries as its own package   

   This is by far the simplest and works best, but I would like the crate and cli names to be same.
```
use abc   

   cargo install abc   

   abc --version
```   

   Optional dependencies with required features   

   This is the method I currently use. Everything is perfect except that I need to add features at runtime.
   
cargo run --features build-binary
   

   It's not clear to me what's blocking bin-dependencies, is it because there could be multiple bins?   
   

======>
https://old.reddit.com/r/rust/comments/1fibmoh/our_first_serious_rust_project_tensorzero/
-->>-->>
Hi    r/rust   !   

   We're Gabriel & Viraj, and we're excited to open source    TensorZero   !   

   Neither of us knew Rust when we started building TensorZero in February, but we knew it was the right tool for the job.    tokei    tells me we've written ~45,000 lines of Rust since. We love it!   

   To be a little cheeky,    TensorZero is an open-source platform that helps LLM applications graduate from API wrappers into defensible AI products.   

   
   Integrate our model gateway   
   Send metrics or feedback   
   Unlock compounding improvements in quality, cost, and latency   
   

   It enables a    data & learning flywheel for LLMs    by unifying:   

   
   Inference:    one API for all LLMs, with <1ms P99 overhead (thanks to Rust 🦀!)   
   Observability:    inference & feedback → your database   
   Optimization:    better prompts, models, inference strategies   
   Experimentation:    built-in A/B testing, routing, fallbacks   
   

   Our goal is to help engineers build, manage, and optimize the next generation of LLM applications: AI systems that learn from real-world experience.   

   In addition to a    Quick Start (5min)    and a    Tutorial (30min)   , we've also published a series of complete runnable examples illustrating TensorZero's data & learning flywheel.   

   
   Writing Haikus to Satisfy a Judge with Hidden Preferences    – my personal favorite 🏅   
   Fine-Tuning TensorZero JSON Functions for Named Entity Recognition (CoNLL++)   
   Automated Prompt Engineering for Math Reasoning (GSM8K) with a Custom Recipe (DSPy)   
   

   Rust was a great choice for an MLOps tool like TensorZero. For example, LiteLLM (Python) at 100 QPS adds 25-100x+ more P99 latency than our gateway at 10,000 QPS (see    Benchmarks   ).   

   We hope you find TensorZero useful! Feedback and questions are very welcome.   
   

======>
https://old.reddit.com/r/rust/comments/1fii722/how_to_idiomatically_abstract_away_complex/
-->>-->>
Hi folks -- I'm a relatively new rustacean (moving from over a decade of C++), and while I know of ways to accomplish what I'm trying to do, they all seem to lead to    ugly    code that mucks up the intent of the code in implementation details. So I'm looking for an idiomatic way to simplify the experience of someone reading the code, which will retain the safety of Rust without making the borrow-checker mad,    and    while retaining idiomatic use of Rust's structures.   

   (Incidentally, while I think this is an interesting question for Rust usage in general, this question is coming from an embedded project. I'll add a comment connecting this back to the real, embedded scenario for anyone who's experienced in that area and wants more context.)   

   Here's the initial implementation (heavily simplified from the 'real' code) -- please note that BigStruct, BigInterface, and the types they use are part of external libraries, so I can't change them directly:   

   // part of external library
struct BigStruct {
    field1 = Type1,
    field2 = Type2,
    // snip
    field40 = Type40,
}

// each of Type1..40 implements some combination of into_a, into_b, and into_c,
// which converts it into TypeA, TypeB, or TypeC respectively

// part of external library
struct BigInterface { /* snip */ }
impl BigInterface {
    pub fn new(
        a: TypeA, 
        b1: TypeB, 
        c1: TypeC, 
        b2: TypeB, 
        c2: TypeC
    ) -> Self {
        // snip
    }
}

struct MyStruct { /* snip */ }
impl MyStruct {
    pub fn new(inter: BigInterface) -> Self { /* snip */ }
}

fn main() {
    let big = get_big_struct();

    let (a, b1, c1, b2, c2) = (
        big.field2.into_a(),
        big.field6.into_b(),
        big.field13.into_c(),
        big.field27.into_b(),
        big.field35.into_c(),
    );

    let inter = BigInterface::new(a, b1, c1, b2, c2);
    inter.init();

    let mystruct = MyStruct::new(inter);
    // more use of big's other fields
}
   

   This    works   , but feels kinda gross -- in this application, those specific fields are    always    going to be the ones moved into    BigInterface   . In C++ I would accomplish this by passing    big    directly into    MyStruct   's constructor, where it can then take ownership of the necessary fields and abstract all the implementation details out of the caller. From my understanding, Rust's borrow-checker would object to this, because    MyStruct   's constructor would take ownership of    all    of    big    (and rightfully so).   

   The solution I'm currently using leverages a macro:   

   #[macro_export]
macro_rules! create_struct {
    ($big:expr) => {{
        let (a, b1, c1, b2, c2) = (
            $big.field2.into_a(),
            $big.field6.into_b(),
            $big.field13.into_c(),
            $big.field27.into_b(),
            $big.field35.into_c(),
        );

        let inter = BigInterface::new(a, b1, c1, b2, c2);
        inter.init();

        MyStruct::new(inter)
    }};

}

fn main() {
    let big = get_big_struct();

    let mystruct = create_struct!(big);
    // more use of big's other fields
}
   

   This feels much better to me, in some ways. Now we just need one line to describe all that work; readers of    main    no longer get bogged down in the implementation details of how exactly we make a    MyStruct   , but since the macro's code is generated directly into    main   , we're only moving out the necessary fields from    big   .   

   ...but now we can't figure out what is moved out of    big    by just reading    main   ! If someone doesn't bother to read    create_struct   's implementation, they might try to use, say,    big.field27    later in    main    and only see the issue once a language server or the compiler complains. That feels like an annoying "gotcha" for other programmers to hit, though I have heard it argued that with some languages, it's an expectation that devs are using live language analysis in their editors and will see this issue quickly enough that it doesn't matter. (I don't know how I feel about this argument, given that I spent 7 years working in a C++ environment without a reliable language server haha.)   

   So what do you all think? What tradeoffs are accepted in idiomatic Rust here, and how would    you    write this code? Is there a much simpler, obvious way to do this that I'm missing? Thanks!   
   

======>
https://old.reddit.com/r/rust/comments/1fio1p5/rust_mysql_async_query_performance/
-->>-->>
Hi everyone,     

   I’ve been exploring Rust performance when querying MySql DB and I used the Rust MySQL async crate (   https://docs.rs/mysql\_async/latest/mysql\_async/   ) to execute a query that returns around 30k rows, each with a size of 100-200 bytes. However, I’ve noticed that the performance seems slower compared to a similar setup I’ve tried in Golang.   
I ran the test locally against the same database and using the same query in both languages. I have also built my Rust executable in release mode with maximum optimizations. The release executable brought the query execution time down from around 40ms (optimization level 0) to 9ms (level 3) which was indeed great to see. However, Golang is still faster with the same query taking about 5-6ms.   
I've also tried profiling and nothing was sticking out.     

   Any ideas why Rust might be slower for the simple case mentioned? Are there optimizations or configurations I may be overlooking that could help close the performance gap?     

   Additionally, I’ve noticed that the Rust MySQL crate seems to support fewer options/features compared to the Golang MySQL driver. For example - charset url param is not supported.      

   Is there a different crate that I could use instead of mysql-async?     

   Thanks in advance!   
   

======>
https://wegmueller.it/blog/posts/2024-09-02-rust-on-illumos
-->>-->>
With the recent rust in Linux events in the last couple of days, It’s a good time to write up Rust in illumos. Both to spread the word a bit and also to set expectations for both sides (Rust and illumos/OpenIndiana devs) what is currently possible and what work would need to be invested to make things smooth. And also to let the rust community know about what illumos people were talking about. What most of the talk currently is about, are the technical details. But we must not leave the social aspects out of it. Software distributions are not made by lone walkers but by groups of people. Bringing in a new language means facilitating change. And that means there are more topics to discuss than just API design. We are talking about impacts on the whole software lifecycle. Linux DRM API design Looking at the things people like Asahi Lina want to address inside the Linux Kernel with the Rust bindings and how she describes the issues with Locking I get the feeling something with DRM is not consistent. Looking into our code and our docs for this topic I can already see that things are more complex in the whole kernel than just “do X” We have some general recommendations but it’s a case by case issue when looking at it over the whole kernel sources.  When looking at the illumos DRM fork I can see that a lot of X11 code seems to have wandered into the Kernel. And not many files are created by the same people. I am not surprised that this has gotten messy. The illumos kernel docs talk about multiple cases where Data can be accessed and different needs for locking with them. I assume the Linux kernel has similar cases, hence at least mentioning what locks the driver needs to do and which the DRM API does needs to be documented. Rust in the illumos Kernel The development model of illumos is different from Linux and thus there are no Rust drivers in upstream illumos yet. But that is to be expected for new things. In our model, we take the time to mature new tech in a fork, and for rust, the Oxide fork has taken that role. In there, we have several drivers for the Oxide Networking stack that are in rust. Based on that some experience could be gained. The current state is, that making things in Rust takes more time compared to C for a trained developer. There is Bindgen which has an overhead to learn and use and there is Language training that people need to become productive. It’s one thing to understand the language but becoming productive usually means quite a bit more training on top of that. So far userland tools have proven to be small enough to get to a working result within a reasonable time. OPTE and fast path Networking exist but they still need an integration into the MAC network framework. So more work needs to happen on that front. Smaller drivers are also a possibility to do I am currently unaware of somebody that had an interest though. The lack of Systems package manager support in rust Ever since npm started the packaging ecosystem has changed drastically in focus. Where package managers originally installed Software as a System they now shifted to install software on different Systems in the same way. This also changed how responsibilities are handled and how people now develop software. Distributions have become obsolete and are not of interest to people. And that leads to a couple of interesting issues. Because at the end of the day, you need a distribution to start using a Computer. And people that make distributions also need to make some income for that work. But software developers now only need to focus on their software for things to work. Compiling from source has become trivial. But only if you follow the software developer’s workflow and know the tools. For people needing to read themselves into how cargo works, some quirks make sense for software developer workflows but are a hindrance for system development workflows. Keep in mind these are different requirements than the ones the kernel needs. Systems Distributors usually do the following: Download the sources and make an archive with all the patches they want to bring patch the sources from the patch files build the binaries pack them into an archive for distribution (depends on the package manager) Several of cargo’s features are now counterintuitive and Are the ones I find people criticising. Cargo wants to secure and check that the vendor folder has not been modified. There is no central vendor folder.  Rust software can easily have upwards of 100 dependencies and micro dependencies. So if people want audit software it becomes a lot of work. I don’t mind. I am long enough in this industry that I have lived through the Java dependency problems on Linux systems. Cargo improves upon that situation. Several other OS’s believe that there needs to be a clear differentiation between system and Third-party software. And I agree with that. The Debian approach of putting everything into one system and only having one version of each dependency is not feasible for a huge international community of people that develop together but never meet. Most of the time the devs do not talk to each other at all. I am personally of the opinion, that most of rust builds and their tier system works. And I am happy to rely on that and not just my tools. As a side note. None of this topic requires Harsh words. Systems packagers and Software developers (especially the folks in Debian and traditional Linux distros) have very different ways of thinking and cargo is not a tool for system packagers. It would be nice if it grew some support for that but that does not require harsh words. System source repos like illumos-gate can easily vendor and produce binaries with a small list of dependencies to deliver the binaries via a Package manager. The tools work. Missing support for shared libraries A feature not wanted by Software developers, developing for multiple platforms. For systems packagers, this is a required feature. Shared libraries delimit the boundary between two responsibilities. And if those people coordinate then that works well. It becomes a system. There are limits to where this can happen. So I don’t know what the perfect solution is. If shared libraries are needed at all or if that feature can fade out. But it is worth a try to build systems and to give people the possibility to do so. So I would wish Rust and Cargo gained shared library support so that we can build such componentized systems easily. An invite With all this said I would love to have some more rust folks in the illumos community. And I know this has been expressed by others as well. Userland tools are easy to make in Rust and I for one would love to have people help me with the new Installer and with the package Forge We have gained rust crates for our unique API’s such as libcontract Our new image builder for ISO’s is in rust image-builder and we are always looking for driver developers. Check out the illumos for all repos Including a config manager. Want to write complete Wifi kernel parts? A small serial Adapter that you have lying around? Want to integrate with an existing Kernel without rewriting it? If anything of that makes you want to head over to https://illumos.org/books/wdd/preface.html#preface and https://illumos.org/books/dev/ or Simply just interests you. Then we would love to have your contribution. Hope to talk to some folks on Socials and email – Toasty
======>
https://konnorandrews.gitlab.io/descent-into-madness/post/thought-2-panic-bomb/
-->>-->>
thread 'main' panicked at src/main.rs:12:5:
normal panic
note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace
thread 'main' panicked at src/main.rs:5:9:
help me
stack backtrace:
    ...
thread 'main' panicked at library/core/src/panicking.rs:164:5:
panic in a destructor during cleanup
thread caused non-unwinding panic. aborting.
======>
https://old.reddit.com/r/rust/comments/1fig61d/invite_vite_integration_for_rust_backends/
-->>-->>
Hey    r/rust   !   

   I am proud to announce my first public Rust library:    in-vite   .   

   ìn-vite    is a small library, that allows you to integrate the Vite bundler into your Rust backend, which allows you to benefit from Vite's features, when developing your frontend:   

   
   Tree Shaking   
   Lazy-loading   
   Common chunk splitting   
   Watch Mode & Hot Module Replacement   
   

   Vite also supports many features out-of-the-box. Instead of painstakingly configuring rules for compiling TypeScript (looking at you, Webpack!) it just works out of the box.   

   In addition,    in-vite    provides integrations for the template engines    tera    and    minijinja    (more to come!), making the usage of Vite in your templates as simple as this:   

   ```html
<!DOCTYPE html>
<html>
  <head>
    {{ vite(resources=["./src/app.ts"]) }}   

   <!-- Or if you only need a CSS -->
{{ vite(resources=["./src/app.tailwind.css"]) }}
   

   <head>
</html>
```   

   This may come in handy for HTMX-based or similar projects.    

   I hope you find    in-vite    useful! Feedback and questions are very welcome!   

   EDIT:   

   As stated above, this is my first public Rust library and thus might be a bit rough around the edges. Feedback and tips for improvement are much appreciated!   
   

======>
https://www.theregister.com/2024/09/16/safe_c_plusplus/
-->>-->>
After two years of being beaten with the memory-safety stick, the C++ community has published a proposal to help developers write less vulnerable code. The Safe C++ Extensions proposal aims to address the vulnerable programming language's Achilles' heel, the challenge of ensuring that code is free of memory safety bugs. "This is a revolutionary proposal that adds memory safety features to the C++ programming language," Vinnie Falco, president and executive director of the C++ Alliance, said Thursday. "This collaboration marks a significant milestone in the C++ ecosystem, as the need for safe code has never been more pressing." <a href="https://pubads.g.doubleclick.net/gampad/jump?co=1&amp;iu=/6978/reg_software/applications&amp;sz=300x50%7C300x100%7C300x250%7C300x251%7C300x252%7C300x600%7C300x601&amp;tile=2&amp;c=2Zukb052k44SJUfdyObuyQgAAAhU&amp;t=ct%3Dns%26unitnum%3D2%26raptor%3Dcondor%26pos%3Dtop%26test%3D0" target="_blank">
                <img src="https://pubads.g.doubleclick.net/gampad/ad?co=1&amp;iu=/6978/reg_software/applications&amp;sz=300x50%7C300x100%7C300x250%7C300x251%7C300x252%7C300x600%7C300x601&amp;tile=2&amp;c=2Zukb052k44SJUfdyObuyQgAAAhU&amp;t=ct%3Dns%26unitnum%3D2%26raptor%3Dcondor%26pos%3Dtop%26test%3D0" alt="">
            </a> It has never been more pressing because for the past two years, private and public sector organizations have been pushing programmers to write new applications and rewrite old ones in memory safe languages such as C#, Go, Java, Python, and Swift, but particularly Rust because it's a performant low-level systems language. <a href="https://pubads.g.doubleclick.net/gampad/jump?co=1&amp;iu=/6978/reg_software/applications&amp;sz=300x50%7C300x100%7C300x250%7C300x251%7C300x252%7C300x600%7C300x601&amp;tile=4&amp;c=44Zukb052k44SJUfdyObuyQgAAAhU&amp;t=ct%3Dns%26unitnum%3D4%26raptor%3Dfalcon%26pos%3Dmid%26test%3D0" target="_blank">
                    <img src="https://pubads.g.doubleclick.net/gampad/ad?co=1&amp;iu=/6978/reg_software/applications&amp;sz=300x50%7C300x100%7C300x250%7C300x251%7C300x252%7C300x600%7C300x601&amp;tile=4&amp;c=44Zukb052k44SJUfdyObuyQgAAAhU&amp;t=ct%3Dns%26unitnum%3D426raptor%3Dfalcon%26pos%3Dmid%26test%3D0" alt="">
                </a> <a href="https://pubads.g.doubleclick.net/gampad/jump?co=1&amp;iu=/6978/reg_software/applications&amp;sz=300x50%7C300x100%7C300x250%7C300x251%7C300x252%7C300x600%7C300x601&amp;tile=3&amp;c=33Zukb052k44SJUfdyObuyQgAAAhU&amp;t=ct%3Dns%26unitnum%3D3%26raptor%3Deagle%26pos%3Dmid%26test%3D0" target="_blank">
                        <img src="https://pubads.g.doubleclick.net/gampad/ad?co=1&amp;iu=/6978/reg_software/applications&amp;sz=300x50%7C300x100%7C300x250%7C300x251%7C300x252%7C300x600%7C300x601&amp;tile=3&amp;c=33Zukb052k44SJUfdyObuyQgAAAhU&amp;t=ct%3Dns%26unitnum%3D3%26raptor%3Deagle%26pos%3Dmid%26test%3D0" alt="">
                    </a> Software engineer Alex Gaynor raised the issue back in 2019, noting that the majority of serious vulnerabilities in large codebases come from memory safety flaws such as buffer overflows and use-after-free. "The data bears out, over and over again, that when projects use memory unsafe languages like C and C++ they are burdened by an avalanche of resulting security vulnerabilities," he wrote. Memory safety subsequently became a common subject of discussion in academic papers and at technical conferences. By September 2022, Microsoft Azure CTO Mark Russinovich called for deprecating C and C++ and adopting Rust. <a href="https://pubads.g.doubleclick.net/gampad/jump?co=1&amp;iu=/6978/reg_software/applications&amp;sz=300x50%7C300x100%7C300x250%7C300x251%7C300x252%7C300x600%7C300x601&amp;tile=4&amp;c=44Zukb052k44SJUfdyObuyQgAAAhU&amp;t=ct%3Dns%26unitnum%3D4%26raptor%3Dfalcon%26pos%3Dmid%26test%3D0" target="_blank">
                    <img src="https://pubads.g.doubleclick.net/gampad/ad?co=1&amp;iu=/6978/reg_software/applications&amp;sz=300x50%7C300x100%7C300x250%7C300x251%7C300x252%7C300x600%7C300x601&amp;tile=4&amp;c=44Zukb052k44SJUfdyObuyQgAAAhU&amp;t=ct%3Dns%26unitnum%3D426raptor%3Dfalcon%26pos%3Dmid%26test%3D0" alt="">
                </a> A few months later, the NSA took a similar position. By 2023, memory safety had become a mainstream topic , covered by Consumer Reports. Those involved with C++ became defensive. Two years ago, in response to Russinovich's call to dump C/C++, C++ creator Bjarne Stroustrup told The Register , "We can now achieve guaranteed perfect type and memory safety in ISO C++." Yet that claim was met with some skepticism. Josh Aas, co-founder and executive director of the Internet Security Research Group (ISRG), which oversees a memory safety initiative called Prossimo, last year told The Register that while it's theoretically possible to write memory-safe C++, that's not happening in real-world scenarios because C++ was not designed from the ground up for memory safety. <a href="https://pubads.g.doubleclick.net/gampad/jump?co=1&amp;iu=/6978/reg_software/applications&amp;sz=300x50%7C300x100%7C300x250%7C300x251%7C300x252%7C300x600%7C300x601&amp;tile=3&amp;c=33Zukb052k44SJUfdyObuyQgAAAhU&amp;t=ct%3Dns%26unitnum%3D3%26raptor%3Deagle%26pos%3Dmid%26test%3D0" target="_blank">
                    <img src="https://pubads.g.doubleclick.net/gampad/ad?co=1&amp;iu=/6978/reg_software/applications&amp;sz=300x50%7C300x100%7C300x250%7C300x251%7C300x252%7C300x600%7C300x601&amp;tile=3&amp;c=33Zukb052k44SJUfdyObuyQgAAAhU&amp;t=ct%3Dns%26unitnum%3D3%26raptor%3Deagle%26pos%3Dmid%26test%3D0" alt="">
                </a> The Safe C++ Extensions proposal aims to address that criticism and to respond to public sector demand for memory safety from the NSA and the other Five Eyes intelligence agencies , the US Cybersecurity and Infrastructure Agency (CISA), the White House , and the DARPA . The future of software? Imagine a bot, stamping on a human face – forever Google says replacing C/C++ in firmware with Rust is easy Security boom is over, with over a third of CISOs reporting flat or falling budgets LLM-driven C-to-Rust. Not just a good idea, a genie eager to escape In August, Gaynor revisited the topic of memory safety by noting that while it makes sense to try to make C++ safer, he has doubts about the extent to which that's possible. "It is clear, I think, that there are substantial safety improvements possible for C++," he wrote . "In particular, entirely solving spatial safety appears to be within reach. Alas, I think it is equally clear that making C++ as safe as Swift or Go or Rust is not something we know how to do, nor does it appear likely that we’ll be able to find a simple solution." Nonetheless, the Safe C++ Extensions proposal aims to have a go. Acknowledging the now deafening chorus of calls to adopt memory safe programming languages, developers Sean Baxter, creator of the Circle compiler , and Christian Mazakas, from the C++ Alliance, argue that while Rust is only popular systems level programming language without garbage collection that provides rigorous memory safety, migrating C++ code to Rust poses problems. "Rust lacks function overloading, templates, inheritance and exceptions," they explain in the proposal. "C++ lacks traits, relocation and borrow checking. These discrepancies are responsible for an impedance mismatch when interfacing the two languages. Most code generators for inter-language bindings aren’t able to represent features of one language in terms of the features of another." Though DARPA is trying to develop better automated C++ to Rust conversion tools, Baxter and Mazakas argue telling veteran C++ developers to learn Rust isn't an answer – a point that a C-focused Linux kernel maintainer made recently . "The foreignness of Rust for career C++ developers combined with the friction of interop tools makes hardening C++ applications by rewriting critical sections in Rust difficult," they contend. "Why is there no in-language solution to memory safety? Why not a Safe C++?" The foreignness of Rust ... makes hardening C++ applications by rewriting critical sections in Rust difficult Baxter told The Register that while generating provably correct programs has been a matter of interest among computer scientists for decades, the issue has been elevated to a national priority. "Recent government warnings about memory safety have made this a focus for the whole tech industry," said Baxter. "I studied the theory and saw an opportunity, using new tooling, to help C++ engineers write more correct programs and eliminate the class of software defects most implicated in security vulnerabilities." The Safe C++ project adds new technology for ensuring memory safety, Baxter explained, and isn't just a reiteration of best practices. "Safe C++ prevents users from writing unsound code," he said. "This includes compile-time intelligence like borrow checking to prevent use-after-free bugs and initialization analysis for type safety." Baxter said that rewriting a project in a different programming language is costly, so the aim here is to make memory safety more accessible by providing the same soundness guarantees as Rust at a lower cost. "With Safe C++, existing code continues to work as always," he explained. "Stakeholders have more control for incrementally opting in to safety." The next step, Baxter said, involves greater participation from industry to help realize the Safe C++ project. "The foundations are in: We have fantastic borrow checking and initialization analysis which underpin the soundness guarantees," he said. "The next step is to comprehensively visit all of C++'s features and specify memory-safe versions of them. It's a big effort, but given the importance of reducing C++ security vulnerabilities, it's an effort worth making." ® <strong>Get our</strong> <a href="https://whitepapers.theregister.com/" style="text-transform:uppercase">Tech Resources</a> Share
