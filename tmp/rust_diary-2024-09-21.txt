======>
https://github.com/waycrate/waylock
-->>-->>
Skip to content {"props":{"docsUrl":"https://docs.github.com/get-started/accessibility/keyboard-shortcuts"}} {"resolvedServerColorMode":"day"} Navigation Menu Toggle navigation Sign in Product Actions Automate any workflow Packages Host and manage packages Security Find and fix vulnerabilities Codespaces Instant dev environments GitHub Copilot Write better code with AI Code review Manage code changes Issues Plan and track work Discussions Collaborate outside of code Explore All features Documentation GitHub Skills Blog Solutions By size Enterprise Teams Startups By industry Healthcare Financial services Manufacturing By use case CI/CD & Automation DevOps DevSecOps Resources Topics AI DevOps Security Software Development View all Explore Learning Pathways White papers, Ebooks, Webinars Customer Stories Partners Open Source GitHub Sponsors Fund open source developers The ReadME Project GitHub community articles Repositories Topics Trending Collections Enterprise Enterprise platform AI-powered developer platform Available add-ons Advanced Security Enterprise-grade security features GitHub Copilot Enterprise-grade AI features Premium Support Enterprise-grade 24/7 support Pricing Search or jump to... Search code, repositories, users, issues, pull requests... Search Clear Search syntax tips Provide feedback We read every piece of feedback, and take your input very seriously. Include my email address so I can be contacted Cancel Submit feedback Saved searches Use saved searches to filter your results more quickly Name Query To see all available qualifiers, see our documentation . Cancel Create saved search Sign in Sign up Reseting focus You signed in with another tab or window. Reload to refresh your session. You signed out in another tab or window. Reload to refresh your session. You switched accounts on another tab or window. Reload to refresh your session. Dismiss alert {{ message }} waycrate / waylock Public Notifications You must be signed in to change notification settings Fork 0 Star 0 0 stars 0 forks Branches Tags Activity Star Notifications You must be signed in to change notification settings Code Issues 0 Pull requests 0 Actions Security Insights Additional navigation options Code Issues Pull requests Actions Security Insights waycrate/waylock This commit does not belong to any branch on this repository, and may belong to a fork outside of the repository. {"props":{"initialPayload":{"allShortcutsEnabled":false,"path":"/","repo":{"id":854086394,"defaultBranch":"main","name":"waylock","ownerLogin":"waycrate","currentUserCanPush":false,"isFork":false,"isEmpty":false,"createdAt":"2024-09-08T11:29:18.000Z","ownerAvatar":"https://avatars.githubusercontent.com/u/99103623?v=4","public":true,"private":false,"isOrgOwned":true},"currentUser":null,"refInfo":{"name":"main","listCacheKey":"v0:1725795024.0","canEdit":false,"refType":"branch","currentOid":"72840af51fc6ba0eb10fc15b2ae1d8c3883e2368"},"tree":{"items":[{"name":"assets","path":"assets","contentType":"directory"},{"name":"src","path":"src","contentType":"directory"},{"name":".gitignore","path":".gitignore","contentType":"file"},{"name":"Cargo.lock","path":"Cargo.lock","contentType":"file"},{"name":"Cargo.toml","path":"Cargo.toml","contentType":"file"},{"name":"README.md","path":"README.md","contentType":"file"}],"templateDirectorySuggestionUrl":null,"readme":null,"totalCount":6,"showBranchInfobar":false},"fileTree":null,"fileTreeProcessingTime":null,"foldersToFetch":[],"treeExpanded":false,"symbolsExpanded":false,"isOverview":true,"overview":{"banners":{"shouldRecommendReadme":false,"isPersonalRepo":false,"showUseActionBanner":false,"actionSlug":null,"actionId":null,"showProtectBranchBanner":false,"publishBannersInfo":{"dismissActionNoticePath":"/settings/dismiss-notice/publish_action_from_repo","releasePath":"/waycrate/waylock/releases/new?marketplace=true","showPublishActionBanner":false},"interactionLimitBanner":null,"showInvitationBanner":false,"inviterName":null,"actionsMigrationBannerInfo":{"releaseTags":[],"showImmutableActionsMigrationBanner":false,"initialMigrationStatus":null}},"codeButton":{"contactPath":"/contact","isEnterprise":false,"local":{"protocolInfo":{"httpAvailable":true,"sshAvailable":null,"httpUrl":"https://github.com/waycrate/waylock.git","showCloneWarning":null,"sshUrl":null,"sshCertificatesRequired":null,"sshCertificatesAvailable":null,"ghCliUrl":"gh repo clone waycrate/waylock","defaultProtocol":"http","newSshKeyUrl":"/settings/ssh/new","setProtocolPath":"/users/set_protocol"},"platformInfo":{"cloneUrl":"https://desktop.github.com","showVisualStudioCloneButton":false,"visualStudioCloneUrl":"https://windows.github.com","showXcodeCloneButton":false,"xcodeCloneUrl":"xcode://clone?repo=https%3A%2F%2Fgithub.com%2Fwaycrate%2Fwaylock","zipballUrl":"/waycrate/waylock/archive/refs/heads/main.zip"}},"newCodespacePath":"/codespaces/new?hide_repo_select=true\u0026repo=854086394"},"popovers":{"rename":null,"renamedParentRepo":null},"commitCount":"23","overviewFiles":[{"displayName":"README.md","repoName":"waylock","refName":"main","path":"README.md","preferredFileType":"readme","tabName":"README","richText":"\u003carticle class=\"markdown-body entry-content container-lg\" itemprop=\"text\"\u003e\u003cdiv class=\"markdown-heading\" dir=\"auto\"\u003e\u003ch1 tabindex=\"-1\" class=\"heading-element\" dir=\"auto\"\u003ewaylock\u003c/h1\u003e\u003ca id=\"user-content-waylock\" class=\"anchor\" aria-label=\"Permalink: waylock\" href=\"#waylock\"\u003e\u003csvg class=\"octicon octicon-link\" viewBox=\"0 0 16 16\" version=\"1.1\" width=\"16\" height=\"16\" aria-hidden=\"true\"\u003e\u003cpath d=\"m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z\"\u003e\u003c/path\u003e\u003c/svg\u003e\u003c/a\u003e\u003c/div\u003e\n\u003cp dir=\"auto\"\u003eWIP\u003c/p\u003e\n\u003c/article\u003e","loaded":true,"timedOut":false,"errorMessage":null,"headerInfo":{"toc":[{"level":1,"text":"waylock","anchor":"waylock","htmlText":"waylock"}],"siteNavLoginPath":"/login?return_to=https%3A%2F%2Fgithub.com%2Fwaycrate%2Fwaylock"}}],"overviewFilesProcessingTime":0}},"appPayload":{"helpUrl":"https://docs.github.com","findFileWorkerPath":"/assets-cdn/worker/find-file-worker-1583894afd38.js","findInFileWorkerPath":"/assets-cdn/worker/find-in-file-worker-03b87d52cf57.js","githubDevUrl":null,"enabled_features":{"code_nav_ui_events":false,"overview_shared_code_dropdown_button":false,"react_blob_overlay":false,"copilot_conversational_ux_embedding_update":false,"copilot_smell_icebreaker_ux":true,"copilot_workspace":false}}}} main 1 Branch 0 Tags Go to file Code Folders and files Name Name Last commit message Last commit date Latest commit sundaram123krishnan chore: remove the next button Sep 18, 2024 72840af · Sep 18, 2024 History 23 Commits assets assets chore: user avatar Sep 16, 2024 src src chore: remove the next button Sep 18, 2024 .gitignore .gitignore chore: gitignore Sep 8, 2024 Cargo.lock Cargo.lock chore: add image feature to iced Sep 16, 2024 Cargo.toml Cargo.toml chore: add image feature to iced Sep 16, 2024 README.md README.md WIP Sep 8, 2024 View all files Repository files navigation README waylock WIP {"resolvedServerColorMode":"day"} About No description, website, or topics provided. Resources Readme Activity Custom properties Stars 0 stars Watchers 0 watching Forks 0 forks Report repository Releases No releases published Sponsor this project Sponsor Learn more about GitHub Sponsors Packages 0 No packages published Languages Rust 100.0% Footer © 2024 GitHub, Inc. Footer navigation Terms Privacy Security Status Docs Contact Manage cookies Do not share my personal information You can’t perform that action at this time.
======>
https://github.com/waycrate/twenty
-->>-->>
Repository files navigation README Twenty 20-20-20 rule enforcer for compositors implementing ext-session-lock.
Twenty makes sure that you look 20 ft away every 20 minutes for 20 seconds to relax your eyes. Uses waycrate/exwlshelleventloop/iced_sessionlock for locking the screen. Installing You can compile it using cargo or via baker . via baker bake setup
bake
sudo bake install A binary will be copied to ./bin/twenty via cargo cargo build --release A binary will be copied to ./target/release/ Usage [] indicates optional arguments. Initializing the program. twenty --init [light/dark] The lock screen defaults to dark mode unless specified otherwise. Killing the program twenty --kill Uninstalling sudo bake uninstall Authored by rv178 and shivkr6
======>
https://github.com/waycrate/lala-bar
-->>-->>
Skip to content {"props":{"docsUrl":"https://docs.github.com/get-started/accessibility/keyboard-shortcuts"}} {"resolvedServerColorMode":"day"} Navigation Menu Toggle navigation Sign in Product Actions Automate any workflow Packages Host and manage packages Security Find and fix vulnerabilities Codespaces Instant dev environments GitHub Copilot Write better code with AI Code review Manage code changes Issues Plan and track work Discussions Collaborate outside of code Explore All features Documentation GitHub Skills Blog Solutions By size Enterprise Teams Startups By industry Healthcare Financial services Manufacturing By use case CI/CD & Automation DevOps DevSecOps Resources Topics AI DevOps Security Software Development View all Explore Learning Pathways White papers, Ebooks, Webinars Customer Stories Partners Open Source GitHub Sponsors Fund open source developers The ReadME Project GitHub community articles Repositories Topics Trending Collections Enterprise Enterprise platform AI-powered developer platform Available add-ons Advanced Security Enterprise-grade security features GitHub Copilot Enterprise-grade AI features Premium Support Enterprise-grade 24/7 support Pricing Search or jump to... Search code, repositories, users, issues, pull requests... Search Clear Search syntax tips Provide feedback We read every piece of feedback, and take your input very seriously. Include my email address so I can be contacted Cancel Submit feedback Saved searches Use saved searches to filter your results more quickly Name Query To see all available qualifiers, see our documentation . Cancel Create saved search Sign in Sign up Reseting focus You signed in with another tab or window. Reload to refresh your session. You signed out in another tab or window. Reload to refresh your session. You switched accounts on another tab or window. Reload to refresh your session. Dismiss alert {{ message }} waycrate / lala-bar Public Notifications You must be signed in to change notification settings Fork 0 Star 8 License MIT license 8 stars 0 forks Branches Tags Activity Star Notifications You must be signed in to change notification settings Code Issues 1 Pull requests 0 Actions Security Insights Additional navigation options Code Issues Pull requests Actions Security Insights waycrate/lala-bar This commit does not belong to any branch on this repository, and may belong to a fork outside of the repository. {"props":{"initialPayload":{"allShortcutsEnabled":false,"path":"/","repo":{"id":677783070,"defaultBranch":"master","name":"lala-bar","ownerLogin":"waycrate","currentUserCanPush":false,"isFork":false,"isEmpty":false,"createdAt":"2023-08-12T16:11:52.000Z","ownerAvatar":"https://avatars.githubusercontent.com/u/99103623?v=4","public":true,"private":false,"isOrgOwned":true},"currentUser":null,"refInfo":{"name":"master","listCacheKey":"v0:1726755245.0","canEdit":false,"refType":"branch","currentOid":"841c3b6bea950e14a140e27fd8506623a754f5a0"},"tree":{"items":[{"name":".github","path":".github","contentType":"directory"},{"name":"iced_zbus_notification","path":"iced_zbus_notification","contentType":"directory"},{"name":"images","path":"images","contentType":"directory"},{"name":"lala_bar","path":"lala_bar","contentType":"directory"},{"name":"misc","path":"misc","contentType":"directory"},{"name":".gitignore","path":".gitignore","contentType":"file"},{"name":"Cargo.lock","path":"Cargo.lock","contentType":"file"},{"name":"Cargo.toml","path":"Cargo.toml","contentType":"file"},{"name":"LICENSE","path":"LICENSE","contentType":"file"},{"name":"README.md","path":"README.md","contentType":"file"},{"name":"meson.build","path":"meson.build","contentType":"file"}],"templateDirectorySuggestionUrl":null,"readme":null,"totalCount":11,"showBranchInfobar":false},"fileTree":null,"fileTreeProcessingTime":null,"foldersToFetch":[],"treeExpanded":false,"symbolsExpanded":false,"isOverview":true,"overview":{"banners":{"shouldRecommendReadme":false,"isPersonalRepo":false,"showUseActionBanner":false,"actionSlug":null,"actionId":null,"showProtectBranchBanner":false,"publishBannersInfo":{"dismissActionNoticePath":"/settings/dismiss-notice/publish_action_from_repo","releasePath":"/waycrate/lala-bar/releases/new?marketplace=true","showPublishActionBanner":false},"interactionLimitBanner":null,"showInvitationBanner":false,"inviterName":null,"actionsMigrationBannerInfo":{"releaseTags":[],"showImmutableActionsMigrationBanner":false,"initialMigrationStatus":null}},"codeButton":{"contactPath":"/contact","isEnterprise":false,"local":{"protocolInfo":{"httpAvailable":true,"sshAvailable":null,"httpUrl":"https://github.com/waycrate/lala-bar.git","showCloneWarning":null,"sshUrl":null,"sshCertificatesRequired":null,"sshCertificatesAvailable":null,"ghCliUrl":"gh repo clone waycrate/lala-bar","defaultProtocol":"http","newSshKeyUrl":"/settings/ssh/new","setProtocolPath":"/users/set_protocol"},"platformInfo":{"cloneUrl":"https://desktop.github.com","showVisualStudioCloneButton":false,"visualStudioCloneUrl":"https://windows.github.com","showXcodeCloneButton":false,"xcodeCloneUrl":"xcode://clone?repo=https%3A%2F%2Fgithub.com%2Fwaycrate%2Flala-bar","zipballUrl":"/waycrate/lala-bar/archive/refs/heads/master.zip"}},"newCodespacePath":"/codespaces/new?hide_repo_select=true\u0026repo=677783070"},"popovers":{"rename":null,"renamedParentRepo":null},"commitCount":"212","overviewFiles":[{"displayName":"README.md","repoName":"lala-bar","refName":"master","path":"README.md","preferredFileType":"readme","tabName":"README","richText":"\u003carticle class=\"markdown-body entry-content container-lg\" itemprop=\"text\"\u003e\u003cdiv class=\"markdown-heading\" dir=\"auto\"\u003e\u003ch1 tabindex=\"-1\" class=\"heading-element\" dir=\"auto\"\u003eLala bar\u003c/h1\u003e\u003ca id=\"user-content-lala-bar\" class=\"anchor\" aria-label=\"Permalink: Lala bar\" href=\"#lala-bar\"\u003e\u003csvg class=\"octicon octicon-link\" viewBox=\"0 0 16 16\" version=\"1.1\" width=\"16\" height=\"16\" aria-hidden=\"true\"\u003e\u003cpath d=\"m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z\"\u003e\u003c/path\u003e\u003c/svg\u003e\u003c/a\u003e\u003c/div\u003e\n\u003cp dir=\"auto\"\u003eIt is an iced layershell program, actually it is a program like kde shell, because it contains a program with a launcher, a side bar and a notification daemon.\u003c/p\u003e\n\u003cp dir=\"auto\"\u003eit is made with \u003ca href=\"https://github.com/waycrate/exwlshelleventloop\"\u003eiced_layershell\u003c/a\u003e\u003c/p\u003e\n\u003cdiv class=\"markdown-heading\" dir=\"auto\"\u003e\u003ch2 tabindex=\"-1\" class=\"heading-element\" dir=\"auto\"\u003eNotification daemon\u003c/h2\u003e\u003ca id=\"user-content-notification-daemon\" class=\"anchor\" aria-label=\"Permalink: Notification daemon\" href=\"#notification-daemon\"\u003e\u003csvg class=\"octicon octicon-link\" viewBox=\"0 0 16 16\" version=\"1.1\" width=\"16\" height=\"16\" aria-hidden=\"true\"\u003e\u003cpath d=\"m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z\"\u003e\u003c/path\u003e\u003c/svg\u003e\u003c/a\u003e\u003c/div\u003e\n\u003cul dir=\"auto\"\u003e\n\u003cli\u003esupport inline-reply\u003c/li\u003e\n\u003cli\u003esupport default action\u003c/li\u003e\n\u003c/ul\u003e\n\u003cdiv class=\"markdown-heading\" dir=\"auto\"\u003e\u003ch3 tabindex=\"-1\" class=\"heading-element\" dir=\"auto\"\u003eTodo\u003c/h3\u003e\u003ca id=\"user-content-todo\" class=\"anchor\" aria-label=\"Permalink: Todo\" href=\"#todo\"\u003e\u003csvg class=\"octicon octicon-link\" viewBox=\"0 0 16 16\" version=\"1.1\" width=\"16\" height=\"16\" aria-hidden=\"true\"\u003e\u003cpath d=\"m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z\"\u003e\u003c/path\u003e\u003c/svg\u003e\u003c/a\u003e\u003c/div\u003e\n\u003cul dir=\"auto\"\u003e\n\u003cli\u003etimeout\u003c/li\u003e\n\u003c/ul\u003e\n\u003cp dir=\"auto\"\u003e\u003ca target=\"_blank\" rel=\"noopener noreferrer\" href=\"/waycrate/lala-bar/blob/master/images/bar.png\"\u003e\u003cimg src=\"/waycrate/lala-bar/raw/master/images/bar.png\" alt=\"example\" style=\"max-width: 100%;\"\u003e\u003c/a\u003e\u003c/p\u003e\n\u003cdiv class=\"markdown-heading\" dir=\"auto\"\u003e\u003ch2 tabindex=\"-1\" class=\"heading-element\" dir=\"auto\"\u003eNOTE\u003c/h2\u003e\u003ca id=\"user-content-note\" class=\"anchor\" aria-label=\"Permalink: NOTE\" href=\"#note\"\u003e\u003csvg class=\"octicon octicon-link\" viewBox=\"0 0 16 16\" version=\"1.1\" width=\"16\" height=\"16\" aria-hidden=\"true\"\u003e\u003cpath d=\"m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z\"\u003e\u003c/path\u003e\u003c/svg\u003e\u003c/a\u003e\u003c/div\u003e\n\u003cp dir=\"auto\"\u003eThis is more like a demo, to show how to use iced_layershell, and how to use zbus in iced. Although it is a daemon like program, it is already enough for me, because it realizes my dream.\u003c/p\u003e\n\u003c/article\u003e","loaded":true,"timedOut":false,"errorMessage":null,"headerInfo":{"toc":[{"level":1,"text":"Lala bar","anchor":"lala-bar","htmlText":"Lala bar"},{"level":2,"text":"Notification daemon","anchor":"notification-daemon","htmlText":"Notification daemon"},{"level":3,"text":"Todo","anchor":"todo","htmlText":"Todo"},{"level":2,"text":"NOTE","anchor":"note","htmlText":"NOTE"}],"siteNavLoginPath":"/login?return_to=https%3A%2F%2Fgithub.com%2Fwaycrate%2Flala-bar"}},{"displayName":"LICENSE","repoName":"lala-bar","refName":"master","path":"LICENSE","preferredFileType":"license","tabName":"MIT","richText":null,"loaded":false,"timedOut":false,"errorMessage":null,"headerInfo":{"toc":null,"siteNavLoginPath":"/login?return_to=https%3A%2F%2Fgithub.com%2Fwaycrate%2Flala-bar"}}],"overviewFilesProcessingTime":0}},"appPayload":{"helpUrl":"https://docs.github.com","findFileWorkerPath":"/assets-cdn/worker/find-file-worker-1583894afd38.js","findInFileWorkerPath":"/assets-cdn/worker/find-in-file-worker-03b87d52cf57.js","githubDevUrl":null,"enabled_features":{"code_nav_ui_events":false,"overview_shared_code_dropdown_button":false,"react_blob_overlay":false,"copilot_conversational_ux_embedding_update":false,"copilot_smell_icebreaker_ux":true,"copilot_workspace":false}}}} master 2 Branches 28 Tags Go to file Code Folders and files Name Name Last commit message Last commit date Latest commit Decodetalkers chore: tidy up Sep 19, 2024 841c3b6 · Sep 19, 2024 History 212 Commits .github .github chore(deps): bump crate-ci/typos from 1.24.5 to 1.24.6 Sep 17, 2024 iced_zbus_notification iced_zbus_notification chore: change package name Sep 10, 2024 images images chore: tidy up code and add README Aug 11, 2024 lala_bar lala_bar chore: tidy up Sep 19, 2024 misc misc chore: do some tidy up Aug 11, 2024 .gitignore .gitignore chore: init Aug 12, 2023 Cargo.lock Cargo.lock chore: bump version Sep 19, 2024 Cargo.toml Cargo.toml chore: bump version Sep 19, 2024 LICENSE LICENSE chore: init Aug 12, 2023 README.md README.md README.md update Aug 12, 2024 meson.build meson.build chore: new tag Sep 1, 2024 View all files Repository files navigation README MIT license Lala bar It is an iced layershell program, actually it is a program like kde shell, because it contains a program with a launcher, a side bar and a notification daemon. it is made with iced_layershell Notification daemon support inline-reply support default action Todo timeout NOTE This is more like a demo, to show how to use iced_layershell, and how to use zbus in iced. Although it is a daemon like program, it is already enough for me, because it realizes my dream. {"resolvedServerColorMode":"day"} About No description, website, or topics provided. Resources Readme License MIT license Activity Custom properties Stars 8 stars Watchers 1 watching Forks 0 forks Report repository Releases 18 v0.3.16 Latest Sep 19, 2024 + 17 releases Sponsor this project Sponsor Learn more about GitHub Sponsors Packages 0 No packages published Contributors 2 Languages Rust 98.7% Meson 1.3% Footer © 2024 GitHub, Inc. Footer navigation Terms Privacy Security Status Docs Contact Manage cookies Do not share my personal information You can’t perform that action at this time.
======>
https://github.com/waycrate/exwlshelleventloop
-->>-->>
Repository files navigation README MIT license Extra wayland shell event loop and their iced bindings We want to make program with iced for layershell and sessionlock, so we made this project. Take winit as reference a lot, to make easilier program on layershell and ext-session-lock. This project bind ext-session-lock and layershell with the similar way of winit, which storing message and handle it in callback Here are five subprojects waycrate_xkbkeycode Take a lot of reference from winit (mainly from winit). Mainly handle the xkbcommon events. layershellev Winit like layershell event crate. We use it make a virtual-keyboard program, please take a look at starcolorkeyboard . Next we will make the program with iced-layershell instead, to provide a more beautiful virtual-keyboard program. sessionlockev Winit like sessionlock event crate. It handles the sessionlock event, like lock and unlock, and provides base support for iced binding for sessionlock iced-layershell iced binding for layershell Feature: support to open new layershell and support popup window. support ext-virtual-keyboard With this crate, you can use iced to build your kde-shell, notification application, and etc. iced-sessionlock iced binding for sessionlock Session lock is the wayland protocol for lock. This protocol is supported in river, sway and etc. We use it make a beautiful lock program in twenty . You can also use it to build your sessionlock. This will become very easy to use our crate with pam crate. Help Us in iced 0.13, there will be breaking changes, we need someone who are familiar with iced to help us. And text-input-v3 and input-method also not handled, we also need some help since ime feature will be support in iced 0.13, we think this feature is very important, we need prepare for it.
======>
https://github.com/mocks-rs/mocks
-->>-->>
Repository files navigation README MIT license mocks Get a mock REST APIs with zero coding within seconds. Install If you're a macOS Homebrew user, then you can install mocks from homebrew-tap . brew install mocks-rs/tap/mocks If you're a Rust programmer, mocks can be installed with cargo . cargo install mocks Usage Run a REST API server Create a storage.json . { "posts" : [
    { "id" : " 01J7BAKH37HPG116ZRRFKHBDGB " , "title" : " first post " , "views" : 100 },
    { "id" : " 01J7BAKH37GE8B688PT4RC7TP4 " , "title" : " second post " , "views" : 10 }
  ], "comments" : [
    { "id" : 1 , "text" : " a comment " , "post_id" : " 01J7BAKH37HPG116ZRRFKHBDGB " },
    { "id" : 2 , "text" : " another comment " , "post_id" : " 01J7BAKH37HPG116ZRRFKHBDGB " }
  ], "profile" : { "id" : " 01J7BAQE1GMD78FN3J0FJCNS8T " , "name" : " mocks " }, "friends" : []
} Pass it to mocks CLI. mocks storage.json mocks -H 127.0.0.1 -p 8080 storage.json Get a REST API with curl . % curl http://localhost:3000/posts/01J7BAKH37HPG116ZRRFKHBDGB
{ " id " : " 01J7BAKH37HPG116ZRRFKHBDGB " , " title " : " first post " , " views " :100} Routes Based on the example storage.json , you'll get the following routes: GET     /posts
GET     /posts/:id
POST    /posts
PUT     /posts/:id
PATCH   /posts/:id
DELETE  /posts/:id

# Same for comments and friends GET     /profile
PUT     /profile
PATCH   /profile GET     /_hc

# Health check endpoint returns a 204 response. Options Run mocks --help for a list of options. Developer mode To help with debugging, you can enable a special feature that saves mock data to a separate file. To do this, simply set the environment variable called MOCKS_DEBUG_OVERWRITTEN_FILE . MOCKS_DEBUG_OVERWRITTEN_FILE=storage.debug.json cargo run -- storage.json We recommend specifying the filename as *.debug.json . For more details, please check .gitignore file. LICENSE This project is licensed under the MIT license .
======>
https://github.com/typicode/json-server
-->>-->>
Repository files navigation README License json-server Important Viewing beta v1 documentation – usable but expect breaking changes. For stable version, see here 👋 Hey! Using React, Vue or Astro? Check my new project MistCSS to write 50% less code. Install npm install json-server Usage Create a db.json or db.json5 file { "posts" : [
    { "id" : " 1 " , "title" : " a title " , "views" : 100 },
    { "id" : " 2 " , "title" : " another title " , "views" : 200 }
  ], "comments" : [
    { "id" : " 1 " , "text" : " a comment about post 1 " , "postId" : " 1 " },
    { "id" : " 2 " , "text" : " another comment about post 1 " , "postId" : " 1 " }
  ], "profile" : { "name" : " typicode " }
} View db.json5 example { posts : [ { id : '1' , title : 'a title' , views : 100 } , { id : '2' , title : 'another title' , views : 200 } , ] , comments : [ { id : '1' , text : 'a comment about post 1' , postId : '1' } , { id : '2' , text : 'another comment about post 1' , postId : '1' } , ] , profile : { name : 'typicode' , } , } You can read more about JSON5 format here . Pass it to JSON Server CLI $ npx json-server db.json Get a REST API $ curl http://localhost:3000/posts/1
{ " id " : " 1 " , " title " : " a title " , " views " : 100
} Run json-server --help for a list of options Sponsors ✨ Sponsors Sponsors Sponsors Become a sponsor and have your company logo here Sponsorware Note This project uses the Fair Source License . Only organizations with 3+ users are kindly asked to contribute a small amount through sponsorship sponsor for usage. This license helps keep the project sustainable and healthy, benefiting everyone. For more information, FAQs, and the rationale behind this, visit https://fair.io/ . Routes Based on the example db.json , you'll get the following routes: GET    /posts
GET    /posts/:id
POST   /posts
PUT    /posts/:id
PATCH  /posts/:id
DELETE /posts/:id

# Same for comments GET   /profile
PUT   /profile
PATCH /profile Params Conditions → == lt → < lte → <= gt → > gte → >= ne → != GET /posts?views_gt=9000 Range start end limit GET /posts?_start=10&_end=20
GET /posts?_start=10&_limit=10 Paginate page per_page (default = 10) GET /posts?_page=1&_per_page=25 Sort _sort=f1,f2 GET /posts?_sort=id,-views Nested and array fields x.y.z... x.y.z[i]... GET /foo?a.b=bar
GET /foo?x.y_lt=100
GET /foo?arr[0]=bar Embed GET /posts?_embed=comments
GET /comments?_embed=post Delete DELETE /posts/1
DELETE /posts/1?_dependent=comments Serving static files If you create a ./public directory, JSON Server will serve its content in addition to the REST API. You can also add custom directories using -s/--static option. json-server -s ./static
json-server -s ./static -s ./node_modules Notable differences with v0.17 id is always a string and will be generated for you if missing use _per_page with _page instead of _limit for pagination use Chrome's Network tab > throtling to delay requests instead of --delay CLI option
======>
https://github.com/fnabinash/rust-practice
-->>-->>
Repository files navigation README Code of conduct MIT license Security Rust Practice This repository tracks my progress of learning Rust, focusing on building production-grade CLI tools. The exercises are structured to cover all essential Rust concepts, from basics like variables and control flow to advanced topics like asynchronous programming and unsafe Rust and contain tiny projects that teach how to build efficient and scalable production-ready CLI apps. This repo contains 240+ exercises. First time here? Say hello👋🏻 to everyone here . Check out the updates & Announcements tab for latest insights. If you have any questions, feel free to ask in Q&A discussion tab. To practice yourself, please navigate to the practice branch. Table of Contents Folder Structure Exercises Basic Rust hello world variables and mutability data types control flow functions Ownership and borrowing Intermediate Rust structs enums collections error handling traits iterators and closures modules and crates Advanced Rust concurrency asynchronous programming smart pointers macros unsafe rust lifetimes and generics Projects command line tool advanced CLI projects package building cross-platform development integrations, plugins and systems Contributing License Acknowledgement Folder Structure This repo is divided into 3 types of folders. Levels Level indicates the difficulty of exercises. e.g. Basic, Intermediate, Advanced, Projects Topics Each level contains multiple topics. Each topic is a cargo workspace. e.g. variables , functions , enums , traits ... Exercises Each topic contains 10 exercises. Each exercise is a member of that workspace. e.g. variables_01 , variables_02 , variables_03 ... Other Folders and Files Image Folder It contains images that are used in the README.md file. Quick Links Quick links is a file, that contains links to solutions for all exercises(i.e. links to src/main.rs ). ├── 01-basic-rust                           // Level
│   └── 01_hello_world                      // Topic
│       ├── Cargo.lock
│       ├── Cargo.toml
│       └── hello_world_01                  // Exercise
│           ├── Cargo.toml
│           └── src
│               └── main.rs                 // Solution
├── 02-intermediate-rust
├── 03-advanced-rust
├── 04-projects
├──images                                   // Images Folder
│   └── rust-practice-map.png               // Mind Map
├── CODE_OF_CONDUCT.md
├── CONTRIBUTING.md
├── LICENSE
├── QUICK_LINKS.md                          // Direct Links
├── README.md
└── SECURITY.md You can quickly navigate to solutions using Quick Links . Exercises 1. Basics Rust (10%) Hello, World! (0.5%) Print "Hello, World!" to the console. Modify the program to take user input and print "Hello, [name]!". Create a program that prints a greeting based on the time of day. Print a multi-line string using raw strings. Format a string with multiple variables and print it. Print a list of numbers from 1 to 10 Print the length of a given string. Print the result of basic arithmetic operations. Print a countdown from 10 to 1 Create a program that prints a quote using escape characters. Variables and Mutability (1.5%) Swap two variables without using a third variable. Declare a constant and print its value. Create a mutable variable and change its value inside a loop. Shadow a variable and print both values. Create a program that calculates the area of a rectangle. Convert a string to an integer and print the result. Declare a variable with a tuple and access its elements. Create a program that doubles the value of a number using a mutable variable. Implement a program that changes a variable's value based on user input. Create a program that increments a counter variable each time a button is pressed. Data Types and Casting (3%) Convert a floating-point number to an integer. Parse a string as a number and perform arithmetic on it. Convert a number from one type to another and print the result. Create a program that determines the type of a variable. Implement a program that calculates the square root of a number. Create a program that converts Celsius to Fahrenheit. Convert a number to a string and concatenate it with another string. Write a program that casts an integer to a character. Convert a number from binary to decimal. Create a program that calculates the area of a circle using a floating-point number. Control Flow (5%) Implement a program that checks if a number is even or odd. Write a simple program that uses if-else to compare two numbers. Create a calculator using a match statement. Implement a program that checks whether a character is a vowel or consonant. Write a program that checks if a number is positive, negative, or zero. Implement a program that finds the largest of three numbers. Create a program that simulates a basic traffic light system. Write a program that checks if a year is a leap year. Create a simple menu-driven program using a loop-and-match statement. Write a program that calculates the factorial of a number using a loop. Functions (7%) Create a function that returns the square of a number. Implement a function that takes two numbers and returns their sum. Write a function that checks if a number is prime. Implement a function that returns the nth Fibonacci number. Write a function that reverses a string. Create a function that checks if a string is a palindrome. Implement a function that returns the maximum of two numbers. Write a function that calculates the greatest common divisor (GCD) of two numbers. Implement a function that calculates the sum of an array of numbers. Create a function that generates a random number within a specified range. Ownership and Borrowing (10%) Create a function that takes ownership of a string and prints it. Implement a function that borrows a string and returns its length. Write a function that takes two borrowed strings and concatenates them. Create a function that returns ownership of a string to the caller. Implement a function that modifies a borrowed string using mutable references. Write a program that demonstrates the use of multiple references. Create a function that borrows an array and returns its sum. Implement a program that shows how ownership changes when a variable is reassigned. Write a function that takes ownership of a vector and returns its length. Create a program that demonstrates the use of references in function parameters and return types. 2. Intermediate Rust (20%) Structs (12%) Create a struct to represent a book with fields for title, author, and pages. Implement a method for the book struct to display its details. Write a program that creates a struct to represent a point in 2D space and calculate the distance between two points. Create a struct to represent a rectangle and calculate its area. Implement a struct to represent a student with fields for name, age, and grades, and calculate the average grade. Write a program that creates a struct to represent a complex number and implements methods for addition and subtraction. Create a struct to represent a car with fields for make, model, and year, and implement methods to start and stop the car. Implement a struct to represent a bank account with fields for account number, balance, and owner, and create methods to deposit and withdraw money. Write a program that creates a struct to represent a person with fields for name, age, and address, and implement methods to update the address. Create a struct to represent a circle with a field for radius, and implement methods to calculate the circumference and area. Enums and Pattern Matching (14%) Create an enum to represent traffic light states and use pattern matching to display messages. Implement a program that uses an enum to represent different shapes (Circle, Square, Rectangle) and calculate their area. Write a program that uses an enum to represent the result of a calculation (Success, Error) and uses pattern matching to handle both cases. Create an enum to represent different types of users (Admin, Guest, Registered) and use pattern matching to display messages based on user type. Implement a program that uses an enum to represent different payment methods (CreditCard, PayPal, Cash) and calculate the total cost based on the payment method. Write a program that uses an enum to represent different file types (Text, Binary, Image) and use pattern matching to process files based on their type. Create an enum to represent different weather conditions (Sunny, Rainy, Cloudy) and use pattern matching to display appropriate messages. Implement a program that uses an enum to represent the status of an order (Pending, Shipped, Delivered) and use pattern matching to update the status. Write a program that uses an enum to represent different error types (NotFound, PermissionDenied, Unknown) and use pattern matching to handle errors. Create an enum to represent different operations (Add, Subtract, Multiply, Divide) and use pattern matching to implement a basic calculator. Collections (Vectors, HashMaps) (18%) Create a program that adds and removes elements from a vector. Implement a program that finds the largest number in a vector. Write a program that sorts a vector of integers in ascending and descending order. Create a program that removes duplicate elements from a vector. Implement a program that uses a HashMap to count the occurrences of words in a text. Write a program that stores student grades in a HashMap and calculates the average grade. Create a program that stores user preferences in a HashMap and allows updating and retrieving preferences. Implement a program that uses a HashMap to group words by their first letter. Write a program that uses a HashMap to store and retrieve configuration settings. Create a program that uses a HashMap to implement a basic phone book with names and phone numbers. Error Handling (21%) Write a program that handles file reading errors and displays an appropriate message if the file is not found. Implement a function that returns a Result type and handles both success and error cases. Create a program that parses a string as an integer and handles invalid input with error messages. Write a function that attempts to open a file and returns a custom error type if the file cannot be opened. Implement a program that reads user input and handles errors if the input is not a valid number. Create a program that uses Option to handle missing values and displays a default value if a value is None . Write a program that attempts to divide two numbers and handles division by zero errors. Implement a function that performs a calculation and returns a Result type with a custom error message if the calculation fails. Create a program that reads a configuration file and handles errors if the file is missing or corrupted. Write a function that attempts to connect to a server and returns a custom error type if the connection fails. Traits (24%) Create a trait called Printable with a method print and implement it for different types (e.g., struct , enum ). Write a program that creates a trait called Calculable with methods for addition, subtraction, multiplication, and division, and implement it for a struct representing a calculator. Implement a trait called Drawable with a method draw and implement it for different shapes ( Circle , Square , Rectangle ). Write a program that creates a trait called Serializable with methods for serializing and deserializing data, and implement it for a struct representing a user. Implement a trait called Comparable with a method compare and implement it for different types ( i32 , f64 , String ). Write a program that creates a trait called Cloneable with a method clone and implement it for a struct representing a document. Implement a trait called Readable with a method read and implement it for different file types. Create a trait called Filterable with a method filter that filters elements from a collection of structs representing products (Product { name, price, in_stock }). Create a trait called StateTransition with a method transition that takes an charachter and based on his score change his level in  GameLevel (with levels like Beginner, Intermediate, and Expert). Create a trait called Loggable with a method log that takes an object and logs its state. Iterators and Closures (28%) Create a program that uses an iterator to sum all elements in a vector. Implement a program that filters out even numbers from a vector using an iterator. Write a program that maps a vector of integers to their squares using an iterator. Create a program that uses an iterator to find the first element in a vector that satisfies a condition. Implement a program that creates a custom iterator for a struct representing a range of numbers. Write a program that chains multiple iterators to process a vector of numbers. Create a program that uses a closure to sort a vector of integers in descending order. Implement a program that uses a closure to filter a vector of strings based on their length. Write a program that uses a closure to find the maximum value in a vector of integers. Create a program that uses a closure to generate a sequence of numbers and returns the result as a vector. Modules and Crates (30%) Create a module to organize functions for mathematical operations and use it in a main program. Implement a program that uses a module to organize functions for file handling and use it in a main program. Write a program that creates a module to organize functions for string processing and use it in a main program. Create a module to organize functions for error handling and use it in a main program. Implement a program that uses a module to organize functions for working with collections ( Vector , HashMap ) and use it in a main program. Write a program that creates a module to organize functions for networking (e.g., making HTTP requests) and use it in a main program. Create a crate for common utilities (e.g., logging, configuration) and use it in a project. Implement a program that creates a module to organize functions for working with dates and times and use it in a main program. Write a program that creates a crate to provide a library of functions for data serialization (e.g., JSON, XML) and use it in a project. Create a program that uses a third-party crate (e.g., serde , regex ) and organizes the code into modules. 3. Advanced Rust(40%) Concurrency (35%) Write a program that uses threads to perform multiple calculations in parallel. Implement a program that spawns multiple threads to process a large array and combines the results. Create a program that uses channels to send messages between threads. Implement a program that uses a thread pool to manage and execute multiple tasks concurrently. Write a program that uses Arc (atomic reference counting) to share data between threads safely. Create a program that uses Mutex to protect shared data from race conditions. Implement a program that uses RwLock to allow multiple readers or one writer at a time. Write a program that uses threads to download multiple files concurrently. Create a program that implements a simple producer-consumer pattern using threads and channels. Implement a program that uses threads to simulate a basic chat server where multiple clients can send and receive messages concurrently. Asynchronous Programming (41%) Write an asynchronous program that fetches data from a web API using async/await . Implement a program that performs multiple HTTP requests concurrently using async/await . Create an asynchronous program that reads and writes to a file without blocking the main thread. Write a program that uses asynchronous functions to perform a long-running task in the background. Implement a program that uses tokio or async-std to create an asynchronous TCP server. Create an asynchronous program that simulates a delay using tokio::time::sleep or similar. Write a program that performs multiple database queries concurrently using asynchronous functions. Implement an asynchronous program that streams data from a source and processes it in real-time. Create an asynchronous program that handles multiple client connections to a server concurrently. Write a program that uses asynchronous functions to manage a pool of resources (e.g., database connections). Smart Pointers (Box, Rc, RefCell) (47%) Write a program that uses Box to create a linked list. Implement a program that uses Rc to create a tree data structure with shared ownership of nodes. Create a program that uses RefCell to modify data inside a struct with shared ownership. Write a program that uses Box to create a recursive data structure (e.g., a binary tree). Implement a program that uses Rc to share a configuration object between multiple threads. Create a program that uses RefCell to implement interior mutability in a struct . Write a program that uses Rc and RefCell together to create a graph data structure. Implement a program that uses Box to store a trait object and call methods on it dynamically. Create a program that uses Rc to manage a list of subscribers in a publish-subscribe pattern. Write a program that uses RefCell to dynamically update a data structure while maintaining shared ownership. Macros (54%) Write a simple macro that prints "Hello, Macro!" to the console. Implement a macro that calculates the square of a number. Create a macro that generates getter and setter methods for a struct . Write a macro that repeats a block of code a specified number of times. Implement a macro that generates a match statement for an enum with multiple variants. Create a macro that generates a function to create a new instance of a struct . Write a macro that implements a trait for a struct . Implement a macro that creates a vector with a specified number of elements. Create a macro that performs compile-time checks on a struct field. Write a macro that generates code for a custom Debug implementation for a struct . Unsafe Rust (63%) Write a program that uses raw pointers to access and modify memory. Implement a program that uses unsafe code to call a C function from Rust. Create a program that uses unsafe code to implement a custom memory allocator. Write a program that uses unsafe code to bypass Rust's borrowing rules and modify data. Implement a program that uses unsafe code to create a custom smart pointer. Create a program that uses unsafe code to implement a linked list with raw pointers. Write a program that uses unsafe code to optimize a performance-critical section of code. Implement a program that uses unsafe code to implement a custom trait for a foreign type. Create a program that uses unsafe code to directly access hardware registers. Write a program that uses unsafe code to create a low-level system library. Lifetimes and Generics (70%) Write a program that uses lifetimes to ensure references are valid. Implement a function that uses generics to work with multiple data types. Create a program that uses lifetimes and generics together to create a flexible data structure. Write a function that returns a reference with a lifetime annotation. Implement a generic function that works with any type that implements a specific trait. Create a program that uses lifetimes to manage references in a data structure. Write a generic function that returns the larger of two values. Implement a program that uses lifetimes to manage the scope of a borrowed value. Create a program that uses generics to implement a custom collection type. Write a program that uses lifetimes and generics to implement a flexible and reusable function. 4. Projects (30%) Command-Line Tool (73%) Create a simple CLI tool that greets the user with their name. Implement a CLI tool that fetches weather information from an API. Write a CLI tool that performs basic file operations (e.g., create, read, write, delete). Create a CLI tool that interacts with a database to store and retrieve data. Implement a CLI tool that performs basic arithmetic operations with command-line arguments. Write a CLI tool that parses JSON data from a file and displays it in a readable format. Create a CLI tool that downloads files from the internet and saves them locally. Implement a CLI tool that converts data between different formats (e.g., CSV to JSON). Write a CLI tool that manages a to-do list with add, remove, and list operations. Create a CLI tool that interacts with a web API to send and receive data. Advanced CLI Projects (78%) File Searcher: Create a CLI tool that recursively searches for files by name in a directory. Process Manager: Build a CLI tool to list and manage system processes (e.g., kill processes). Database CRUD: Create a CLI tool that performs basic CRUD operations on a SQLite database. Config File Parser: Build a CLI tool that reads and edits configuration files (e.g., JSON, TOML). API Client: Create a CLI tool that interacts with a REST API to fetch and display data. Log Analyzer: Build a CLI tool to parse and analyze log files, providing statistics and error reports. Markdown to HTML Converter: Create a CLI tool that converts Markdown files into HTML. Task Runner: Build a CLI tool that schedules and runs predefined tasks (like a simple cron job). Backup Manager: Create a CLI tool to automate the backup of files to a specified location. Git Helper: Build a CLI tool that wraps common Git commands to simplify version control tasks. Package Building (85%) Basic Packager: Create a CLI tool that packages a Rust project into a binary for distribution. Cross-Compiler: Build a CLI tool that cross-compiles a Rust project for different platforms. Installer Generator: Create a CLI tool that generates an installer for a Rust application. Tarball Creator: Build a CLI tool that packages a project into a tarball with optional compression. Binary Size Analyzer: Create a CLI tool that analyzes and reports the size of a compiled binary. Release Packager: Build a CLI tool that automates the creation of release packages with versioning. Installer Validator: Create a CLI tool that verifies the integrity and correctness of an installer. Package Signer: Build a CLI tool that signs packages with a cryptographic signature. Deb/RPM Package Creator: Create a CLI tool that builds a Debian or RPM package from a Rust project. Multi-Platform Installer: Build a CLI tool that generates installers for multiple platforms (e.g., Windows, macOS, Linux). Cross-Platform Development (91%) Multi-OS CLI Tool: Create a CLI tool that runs on Windows, macOS, and Linux with platform-specific features. Cross-Platform File Watcher: Build a CLI tool that watches for file changes on different operating systems. Universal Package Manager: Create a CLI tool that works with multiple package managers (e.g., apt, brew, chocolatey). Portable CLI Tool: Build a CLI tool that requires no installation and runs from a USB drive. Cross-Platform Logger: Create a CLI tool that logs system events across different operating systems. Environment Configuration Tool: Build a CLI tool that configures environment variables for different OSs. Cross-Platform Process Monitor: Create a CLI tool that monitors system processes on multiple operating systems. Universal Installer: Build a CLI tool that installs software packages across different platforms. Multi-OS Backup Tool: Create a CLI tool that performs backups on different operating systems. Cross-Platform Clipboard Manager: Build a CLI tool that manages the clipboard across different operating systems. Integration, Plugins, and Systems (100%) Plugin System: Create a CLI tool that supports plugins, allowing users to extend its functionality. API Gateway: Build a CLI tool that acts as a gateway for integrating with multiple APIs. Task Scheduler: Create a CLI tool that schedules and runs tasks at specified intervals, integrating with system cron jobs. Messaging Queue Client: Build a CLI tool that interacts with a message queue system (e.g., RabbitMQ, Kafka). Service Integrator: Create a CLI tool that integrates with cloud services (e.g., AWS, GCP) and performs tasks. Database Migrator: Build a CLI tool that manages database migrations and integrates with different database systems. CI/CD Pipeline Integrator: Create a CLI tool that integrates with CI/CD systems like Jenkins or GitHub Actions. System Monitor Integrator: Build a CLI tool that integrates with system monitoring tools (e.g., Prometheus, Grafana). Custom Shell: Create a CLI tool that acts as a custom shell with support for plugins and extensions. Configuration Manager: Build a CLI tool that manages configuration files and integrates with other system tools. Contributing 🤝 Contributions are welcome! If you have any suggestions, improvements, or new exercises, feel free to open an issue or submit a pull request. Let's make this repository a valuable resource for everyone learning Rust. License 📜 This project is licensed under the MIT License. See the LICENSE file for details. Acknowledgment 🙏 A big thank you to the Rust community and all the contributors who have helped make this repository better. Your support and feedback are greatly appreciated. Contact 📬 For any questions or feedback, you can reach out to me on GitHub or Dev.to .
=====>
https://github.com/theOGognf/private_poker
-->>-->>
Repository files navigation README Apache-2.0 license A poker library, server, client, and TUI. 🃟 pri♦ate_p♡ker 🃏︎ Wanting to play poker but only have a computer and no playing cards? Having a slow day at work and in need of something to pass the time
with your coworkers? Managing an entirely legal gambling ring and in need of a secure,
private, and easy-to-use solution for running poker games? If you answered "yes" to any of these rhetorical questions, then this project
is for you! Host and manage a poker game from the comfort of your computer
with p ri♦ate_ p ♡ker (or pp for short)! Poker over ssh One can host a server with the provided Dockerfile for the following
benefits: The server is ephemeral and more isolated from the host system Client binaries don't need to be distributed to users Server connections are managed by ssh Users are managed by the container's user space Host and manage poker over ssh with the following commands: Run the container (two options): From source: docker build -t poker . docker run --name poker -p $port :22 --rm poker From the official Docker image : docker run --name poker -p $port :22 --rm ognf/poker:latest Create a user: docker exec -it poker sh ./bin/create_user.sh $username docker cp poker:/home/ $username /.ssh/id_rsa $poker_ssh_key This creates a user in the container's user space and copies
their private key to the host. Send the user their key so they
can SSH into the server and start playing. Users can SSH into the server and play: ssh -i $poker_ssh_key -p $port $username @ $host Delete a user: docker exec -it poker deluser --remove-home $username Stop the server: docker stop poker Poker without Docker The poker over ssh Docker image is < 40MB, but requires some additional
user management on the host's part. If you're playing a poker game in a
local or private network, and all your users are familiar with cargo ,
it's less work to just use the poker binaries directly rather than using
Docker and ssh . For the host, run the server binary: RUST_LOG=info cargo run --bin pp_server -r -- --bind $host For users, run the client binary: cargo run --bin pp_client -r -- $username --connect $host Project structure See each subdirectory's docs or README.md s for more specific info. . ├── pp_admin # Scripts and configs for managing the server within Docker ├── pp_client # Client binary source ├── pp_server # Server binary source └── private_poker # Library that the client and server use Non-goals I use this project to learn Rust and to play poker with friends
and family. I'm probably disinterested in anything related to this
project that doesn't contribute to those goals. Specifically, the
following features are ommitted from this project and left as an
exercise to forkers: Server orchestration or scaling Persistent storage or backups of game data UIs beyond the TUI Acknowledgements @Ilikemath642 for inspiring me to work on a poker game @zachstruck for teaching me a lot about Rust @Mac-Genius for TUI feedback @shazow for inspiring me with ssh-chat
=====>
https://github.com/arthurazs/bibrust
-->>-->>
Repository files navigation README bibrust (Work In Progress) Merge bib files. Expected tree structure. Put your files in data/input/ separated by folder.
The parsed files will be placed at data/output/ . # example  data
├──  input
│  ├──  acm
│  │  └──  acm.bib
│  ├──  ieee
│  │  └──  ' IEEE Xplore Citation BibTeX Download 2024.7.2.10.24.25.bib ' │  ├──  scienceDirect
│  │  ├──  ScienceDirect_citations_1719926677787.bib
│  │  ├──  ScienceDirect_citations_1719926692726.bib
│  │  └──  ScienceDirect_citations_1719926704464.bib
│  └──  scopus
│     └──  scopus.bib
└──  output
   ├──  acm.bib
   ├──  ieee.bib
   ├──  scienceDirect.bib
   └──  scopus.bib Quickstart Tested on Ubuntu 22.04.1 LTS with rustc 1.80.1. git clone https://github.com/arthurazs/bibrust cd bibrust
cargo r
======>
https://github.com/arthurazs/bibpy
-->>-->>
Repository files navigation README bibpy Merge bib files. Expected tree structure. Put your files in data/input/ separated by folder.
The parsed files will be placed at data/output/ . # example  data
├──  input
│  ├──  acm
│  │  └──  acm.bib
│  ├──  ieee
│  │  └──  ' IEEE Xplore Citation BibTeX Download 2024.7.2.10.24.25.bib ' │  ├──  scienceDirect
│  │  ├──  ScienceDirect_citations_1719926677787.bib
│  │  ├──  ScienceDirect_citations_1719926692726.bib
│  │  └──  ScienceDirect_citations_1719926704464.bib
│  └──  scopus
│     └──  scopus.bib
└──  output
   ├──  acm.bib
   ├──  ieee.bib
   ├──  scienceDirect.bib
   └──  scopus.bib Quickstart Tested on Ubuntu 22.04.1 LTS with Python 3.12.3. git clone https://github.com/arthurazs/bibpy cd bibpy
make install-py
make merge

======>
https://en.wikipedia.org/wiki/BibTeX
-->>-->>
Contents move to sidebar hide (Top) 1 Processor Toggle Processor subsection 1.1 History 1.2 Reimplementations 2 Database files Toggle Database files subsection 2.1 Entry types 2.2 Field types 3 Style files 4 Examples of uses 5 See also 6 References 7 External links Toggle the table of contents BibTeX 26 languages العربية বাংলা Català Cebuano Čeština Dansk Deutsch Español فارسی Français Frysk Galego 한국어 Italiano Nederlands 日本語 Norsk bokmål Polski Português Русский Suomi Svenska Türkçe Українська Zazaki 中文 Edit links Article Talk English Read Edit View history Tools Tools move to sidebar hide Actions Read Edit View history General What links here Related changes Upload file Special pages Permanent link Page information Cite this page Get shortened URL Download QR code Wikidata item Print/export Download as PDF Printable version In other projects Wikimedia Commons Appearance move to sidebar hide From Wikipedia, the free encyclopedia Reference management software for formatting lists of references .mw-parser-output .infobox-subbox{padding:0;border:none;margin:-3px;width:auto;min-width:100%;font-size:100%;clear:none;float:none;background-color:transparent}.mw-parser-output .infobox-3cols-child{margin:auto}.mw-parser-output .infobox .navbar{font-size:100%}body.skin-minerva .mw-parser-output .infobox-header,body.skin-minerva .mw-parser-output .infobox-subheader,body.skin-minerva .mw-parser-output .infobox-above,body.skin-minerva .mw-parser-output .infobox-title,body.skin-minerva .mw-parser-output .infobox-image,body.skin-minerva .mw-parser-output .infobox-full-data,body.skin-minerva .mw-parser-output .infobox-below{text-align:center}@media screen{html.skin-theme-clientpref-night .mw-parser-output .infobox-full-data:not(.notheme)>div:not(.notheme)[style]{background:#1f1f23!important;color:#f8f9fa}}@media screen and (prefers-color-scheme:dark){html.skin-theme-clientpref-os .mw-parser-output .infobox-full-data:not(.notheme) div:not(.notheme){background:#1f1f23!important;color:#f8f9fa}}@media(min-width:640px){body.skin--responsive .mw-parser-output .infobox-table{display:table!important}body.skin--responsive .mw-parser-output .infobox-table>caption{display:table-caption!important}body.skin--responsive .mw-parser-output .infobox-table>tbody{display:table-row-group}body.skin--responsive .mw-parser-output .infobox-table tr{display:table-row!important}body.skin--responsive .mw-parser-output .infobox-table th,body.skin--responsive .mw-parser-output .infobox-table td{padding-left:inherit;padding-right:inherit}} BibTeX Original author(s) Oren Patashnik , Leslie Lamport Developer(s) Oren Patashnik Initial release March 1985 ; 39 years ago ( 1985-03 ) Stable release 0.99d
   / March 2010 ; 14 years ago ( 2010-03 ) Repository https://tug.org/svn/texlive/trunk/Build/source/texk/web2c/ Written in WEB Platform Cross-platform Included with TeX Live Size 384614 bytes Available in English Type Reference management software License Knuth License Website Official website BibTeX is both a bibliographic flat-file database file format and a software program for processing these files to produce lists of references ( citations ). The BibTeX file format is a widely used standard with broad support by reference management software . The BibTeX program comes bundled with the LaTeX document preparation system, and is not available as a stand-alone program. [ 1 ] Within this typesetting system its name is styled as B I B T E X {\displaystyle {\mathrm {B{\scriptstyle {IB}}\!T\!_{\displaystyle E}\!X} }} . The name is a portmanteau of the word bibliography and the name of the TeX typesetting software. BibTeX was created by Oren Patashnik in 1985. No updates were published between February 1988 and March 2010, when the package was updated to improve URL printing and clarify the license. There are various reimplementations of the program. The purpose of BibTeX is to make it easy to cite sources in a consistent manner, by separating bibliographic information from the presentation of this information, similarly to the separation of content and presentation/style supported by LaTeX itself. Processor [ edit ] The processor program works with several specific files to produce the reference list and format the citations. In the words of the program's author Oren Patashnik, the processor works as follows: [ 2 ] It takes as input: an .aux file produced by LaTeX on an earlier run; a .bst file (the style file), which specifies the general reference-list style and specifies how to format individual entries, and which is written by a style designer [..] in a special-purpose language [..], and .bib file(s) constituting a database of all reference-list entries the user might ever hope to use. BibTeX chooses from the .bib file(s) only those entries specified by the .aux file (that is, those given by LaTeX's \cite or \nocite commands), and creates as output a .bbl file containing these entries together with the formatting commands specified by the .bst file [..]. LaTeX will use the .bbl file, perhaps edited by the user, to produce the reference list. History [ edit ] BibTeX was created by Oren Patashnik and Leslie Lamport in 1985. [ 2 ] The program is written in WEB/Pascal . [ 2 ] Version 0.98f was released in March 1985. [ 2 ] With version 0.99c (released February 1988), a stationary state was reached for 22 years. [ 2 ] In March 2010, version 0.99d was released to improve URL printing. Further releases were announced. [ 2 ] Reimplementations [ edit ] BibTeXu A reimplementation of bibtex (by Yannis Haralambous and his students) that supports the UTF-8 character set. Taco Hoekwater of the LuaTeX team criticized it in 2010 for poor documentation and for generating errors that are difficult to debug. [ 3 ] bibtex8 A reimplementation of bibtex that supports 8-bit character sets. [ 4 ] CL-BibTeX A completely compatible reimplementation of bibtex in Common Lisp , capable of using bibtex .bst files directly or converting them into human-readable Lisp .lbst files. [ 4 ] CL-BibTeX supports Unicode in Unicode Lisp implementations, using any character set that Lisp knows about. MLBibTeX A reimplementation of BibTeX focusing on multilingual features, by Jean-Michel Hufflen. [ 5 ] BibLaTeX A complete reimplementation. "It redesigns the way in which LaTeX interacts with BibTeX at a fairly fundamental level. With biblatex, BibTeX is only used to sort the bibliography and to generate labels. Instead of being implemented in BibTeX's style files, the formatting of the bibliography is entirely controlled by TeX macros." [ 6 ] It uses the bibliography processing program Biber and offers full Unicode and theming support. BibLaTeX comes with a new file format specification that uses the same syntax as the BibTeX file format but with more and different bibliographic entry types and field types. Bibulous A drop-in BibTeX replacement based on style templates, including full Unicode support, written in Python. [ 7 ] Database files [ edit ] BibTeX uses a style-independent text-based file format , a kind of flat-file database , to store bibliography items, such as articles, books, and theses. BibTeX database file names usually end in .bib . A BibTeX database file is formed by a list of entries, with each entry corresponding to a bibliographical item. Entry types correspond to various types of bibliographic sources such as article , book , or conference . An example entry which describes a mathematical handbook would be structured as an entry name followed by a list of fields, such as author and title : @Book { abramowitz+stegun , author = "Milton {Abramowitz} and Irene A. {Stegun}" , title = "Handbook of Mathematical Functions with Formulas, Graphs, and Mathematical Tables" , publisher = "Dover" , year = 1964 , address = "New York City" , edition = "ninth Dover printing, tenth GPO printing" } If a document references this handbook, the bibliographic information may be formatted in different ways depending on which citation style ( APA , MLA , Chicago etc.) is employed.  The way LaTeX deals with this is by specifying \cite commands and the desired bibliography style in the LaTeX document.  If the command \cite { abramowitz+stegun } appears inside a LaTeX document, the bibtex program will include this book in the list of references for the document and generate appropriate LaTeX formatting code.  When viewing the formatted LaTeX document, the result might look like this: Abramowitz, Milton and Irene A. Stegun (1964), Handbook of mathematical functions with formulas, graphs, and mathematical tables. New York: Dover. Depending on the style file, BibTeX may rearrange authors' last names, change the case of titles, omit fields present in the .bib file, format text in italics, add punctuation, etc.  Since the same style file is used for an entire list of references, these are all formatted consistently with minimal effort required from authors or editors. Entry types [ edit ] A BibTeX database can contain the following types of entries: article An article from a journal or magazine. Required fields: author, title, journal, year Optional fields: volume/number, pages, month, doi, note, key book A book with an explicit publisher. Required fields: author/editor, title, publisher, year Optional fields: volume/number, series, address, edition, month, note, key, url booklet A work that is printed and bound, but without a named publisher or sponsoring institution. Required fields: title Optional fields: author, howpublished, address, month, year, note, key conference The same as inproceedings , included for Scribe compatibility. inbook A part of a book, usually untitled. May be a chapter (or section, etc.) and/or a range of pages. Required fields: author/editor, title, chapter/pages, publisher, year Optional fields: volume/number, series, type, address, edition, month, note, key incollection A part of a book having its own title. Required fields: author, title, booktitle, publisher, year Optional fields: editor, volume/number, series, type, chapter, pages, address, edition, month, note, key inproceedings An article in a conference proceedings. Required fields: author, title, booktitle, year Optional fields: editor, volume/number, series, pages, address, month, organization, publisher, note, key manual Technical documentation. Required fields: title Optional fields: author, organization, address, edition, month, year, note, key mastersthesis A master's thesis . Required fields: author, title, school, year Optional fields: type, address, month, note, key misc For use when nothing else fits. Required fields: none Optional fields: author, title, howpublished, month, year, note, key phdthesis A Ph.D. thesis. Required fields: author, title, school, year Optional fields: type, address, month, note, key proceedings The proceedings of a conference. Required fields: title, year Optional fields: editor, volume/number, series, address, month, publisher, organization, note, key techreport A report published by a school or other institution, usually numbered within a series. Required fields: author, title, institution, year Optional fields: type, number, address, month, note, key unpublished A document having an author and title, but not formally published. Required fields: author, title, note Optional fields: month, year, key Field types [ edit ] A BibTeX entry can contain various types of fields. The following types are recognized by the default bibliography styles; some third-party styles may accept additional ones: address Publisher's address (usually just the city, but can be the full address for lesser-known publishers) annote An annotation for annotated bibliography styles (not typical) author The name(s) of the author(s) (in the case of more than one author, separated by and ) booktitle The title of the book, if only part of it is being cited Email The email of the author(s) chapter The chapter number crossref The key of the cross-referenced entry doi Digital object identifier edition The edition of a book, long form (such as "First" or "Second") editor The name(s) of the editor(s) howpublished How it was published, if the publishing method is nonstandard institution The institution that was involved in the publishing, but not necessarily the publisher journal The journal or magazine the work was published in key A hidden field used for specifying or overriding the alphabetical order of entries (when the "author" and "editor" fields are missing).  Note that this is very different from the key (mentioned just after this list) that is used to cite or cross-reference the entry. month The month of publication (or, if unpublished, the month of creation) note Miscellaneous extra information number The "(issue) number" of a journal, magazine, or tech-report, if applicable. Note that this is not the "article number" assigned by some journals. organization The conference sponsor pages Page numbers, separated either by commas or double-hyphens. publisher The publisher's name school The school where the thesis was written series The series of books the book was published in (e.g. " The Hardy Boys " or " Lecture Notes in Computer Science ") title The title of the work type The field overriding the default type of publication (e.g. "Research Note" for techreport, "{PhD} dissertation" for phdthesis, "Section" for inbook/incollection) volume The volume of a journal or multi-volume book year The year of publication (or, if unpublished, the year of creation) In addition, each entry contains a key (Bibtexkey) that is used to cite or cross-reference the entry. This key is the first item in a BibTeX entry, and is not part of any field. Style files [ edit ] BibTeX formats bibliographic items according to a style file, typically by generating TeX or LaTeX formatting commands, but style files can also be used to generate other types of output like HTML . BibTeX style files commonly use the file extension .bst and are written in a simple, stack-based programming language (dubbed "BibTeX Anonymous Forth-Like Language", or "BAFLL", by Drew McDermott [ 8 ] ) that describes how bibliography items should be formatted. There are some packages that can generate .bst files automatically, such as custom-bib and Bib-it. [ 9 ] [ 10 ] Most journals or publishers that support LaTeX use a customized bibliographic style file for the convenience of the authors, often included as part of a complete LaTeX template. Examples of uses [ edit ] Astrophysics Data System – The NASA ADS is an online database of over eight million astronomy and physics papers and provides BibTeX format citations. BibDesk – Open-source software application for macOS for creating, editing, managing, and searching BibTeX files. BibSonomy – A social bookmark and publication management system based on BibTeX. Citavi – Reference manager. Works with various TeX-Editors and supports BibTeX input and output. CiteSeer – An online database of research publications which can produce BibTeX format citations. CiteULike (discontinued) – A community based bibliography database that had BibTeX input and output. The Collection of Computer Science Bibliographies – uses BibTeX as internal data format, search results and contributions primarily in BibTeX. Connotea – Open-source social bookmark style publication management system. Digital Bibliography & Library Project – A bibliography website that lists more than 910,000 articles in the computer science field. Google Books – The bibliographic information for each book is exportable in BibTeX format via the 'Export Citation' feature. Google Scholar – Google's system for searching scholarly literature provides BibTeX format citations if the option is enabled in 'Scholar Preferences'. Google Research – Housed within the artificial intelligence division of Google is a compilation of publications by Google staff with BibTeX citation links. HubMed – A versatile PubMed interface including BibTeX output. INSPIRE-HEP – The INSPIRE High-Energy Physics literature database provides BibTeX format citations for over one million high-energy physics papers. JabRef – Open-source cross-platform software application for creating, editing, managing, and searching BibTeX and BibLaTeX files. MathSciNet – Database by the American Mathematical Society (subscription), choose BibTeX in the "Select alternative format" box Mendeley – Reference manager, for collecting papers. It supports exporting collections into bib files and keep them synchronized with its own database. [ 11 ] Paperpile – Reference manager, supports BibTeX input and output. BibTeX output can be customized. Pandoc – Open-source document converter that can read a BibTeX file and produce formatted citations in any bibliography style specified in a citation style language (CSL) file. Qiqqa – Software application for Windows that includes a fully featured BibTeX editor and validator, along with tools for automatically populating BibTeX records for PDFs. refbase – Open-source reference manager for institutional repositories and self archiving with BibTeX input and output. RefTeX – Emacs based reference manager. Wikindx – Open-source virtual research environment /enhanced bibliography manager including BibTeX input and output. Wikipedia – Pressing cite this page in the Tools menu of an article provides a BibTeX format citation. Zentralblatt MATH – Database by the European Mathematical Society , FIZ Karlsruhe and Heidelberg Academy (subscription, 3 free entries); choose BibTeX button or format. Zotero – Open-source reference manager with advanced features such as synchronization between different computers, social bookmarking, searching inside saved PDFs and BibTeX output. See also [ edit ] .mw-parser-output .portalbox{padding:0;margin:0.5em 0;display:table;box-sizing:border-box;max-width:175px;list-style:none}.mw-parser-output .portalborder{border:1px solid var(--border-color-base,#a2a9b1);padding:0.1em;background:var(--background-color-neutral-subtle,#f8f9fa)}.mw-parser-output .portalbox-entry{display:table-row;font-size:85%;line-height:110%;height:1.9em;font-style:italic;font-weight:bold}.mw-parser-output .portalbox-image{display:table-cell;padding:0.2em;vertical-align:middle;text-align:center}.mw-parser-output .portalbox-link{display:table-cell;padding:0.2em 0.2em 0.2em 0.3em;vertical-align:middle}@media(min-width:720px){.mw-parser-output .portalleft{clear:left;float:left;margin:0.5em 1em 0.5em 0}.mw-parser-output .portalright{clear:right;float:right;margin:0.5em 0 0.5em 1em}} Free and open-source software portal Data schemes EndNote – a text-based data scheme used by the EndNote program refer – an aging text-based data scheme supported on UNIX-like systems RIS – a text-based data scheme from Research Information Systems Bebop – a web-based front-end interface for BibTeX Other Citation Style Language – a newer XML-based bibliography style specification analogous to BibTeX's .bst files but processed instead by the CiteProc program Comparison of reference management software List of TeX extensions References [ edit ] .mw-parser-output .reflist{margin-bottom:0.5em;list-style-type:decimal}@media screen{.mw-parser-output .reflist{font-size:90%}}.mw-parser-output .reflist .references{font-size:100%;margin-bottom:0;list-style-type:inherit}.mw-parser-output .reflist-columns-2{column-width:30em}.mw-parser-output .reflist-columns-3{column-width:25em}.mw-parser-output .reflist-columns{margin-top:0.3em}.mw-parser-output .reflist-columns ol{margin-top:0}.mw-parser-output .reflist-columns li{page-break-inside:avoid;break-inside:avoid-column}.mw-parser-output .reflist-upper-alpha{list-style-type:upper-alpha}.mw-parser-output .reflist-upper-roman{list-style-type:upper-roman}.mw-parser-output .reflist-lower-alpha{list-style-type:lower-alpha}.mw-parser-output .reflist-lower-greek{list-style-type:lower-greek}.mw-parser-output .reflist-lower-roman{list-style-type:lower-roman} ^ .mw-parser-output cite.citation{font-style:inherit;word-wrap:break-word}.mw-parser-output .citation q{quotes:"\"""\"""'""'"}.mw-parser-output .citation:target{background-color:rgba(0,127,255,0.133)}.mw-parser-output .id-lock-free.id-lock-free a{background:url("//upload.wikimedia.org/wikipedia/commons/6/65/Lock-green.svg")right 0.1em center/9px no-repeat}.mw-parser-output .id-lock-limited.id-lock-limited a,.mw-parser-output .id-lock-registration.id-lock-registration a{background:url("//upload.wikimedia.org/wikipedia/commons/d/d6/Lock-gray-alt-2.svg")right 0.1em center/9px no-repeat}.mw-parser-output .id-lock-subscription.id-lock-subscription a{background:url("//upload.wikimedia.org/wikipedia/commons/a/aa/Lock-red-alt-2.svg")right 0.1em center/9px no-repeat}.mw-parser-output .cs1-ws-icon a{background:url("//upload.wikimedia.org/wikipedia/commons/4/4c/Wikisource-logo.svg")right 0.1em center/12px no-repeat}body:not(.skin-timeless):not(.skin-minerva) .mw-parser-output .id-lock-free a,body:not(.skin-timeless):not(.skin-minerva) .mw-parser-output .id-lock-limited a,body:not(.skin-timeless):not(.skin-minerva) .mw-parser-output .id-lock-registration a,body:not(.skin-timeless):not(.skin-minerva) .mw-parser-output .id-lock-subscription a,body:not(.skin-timeless):not(.skin-minerva) .mw-parser-output .cs1-ws-icon a{background-size:contain;padding:0 1em 0 0}.mw-parser-output .cs1-code{color:inherit;background:inherit;border:none;padding:inherit}.mw-parser-output .cs1-hidden-error{display:none;color:var(--color-error,#d33)}.mw-parser-output .cs1-visible-error{color:var(--color-error,#d33)}.mw-parser-output .cs1-maint{display:none;color:#085;margin-left:0.3em}.mw-parser-output .cs1-kern-left{padding-left:0.2em}.mw-parser-output .cs1-kern-right{padding-right:0.2em}.mw-parser-output .citation .mw-selflink{font-weight:inherit}@media screen{.mw-parser-output .cs1-format{font-size:95%}html.skin-theme-clientpref-night .mw-parser-output .cs1-maint{color:#18911f}}@media screen and (prefers-color-scheme:dark){html.skin-theme-clientpref-os .mw-parser-output .cs1-maint{color:#18911f}} "BibTeX - TeX Users Group" . tug.org . Retrieved 2024-02-01 . ^ a b c d e f "BibTeX WEB source code" . www.tex.ac.uk . Archived from the original on September 27, 2011 . Retrieved May 24, 2011 . ^ "BibTeXU" . permalink.gmane.org . 2010-06-01. Archived from the original on 2016-03-04 . Retrieved 2016-04-21 . ^ a b "Package bibtex8" . CTAN . Retrieved 30 July 2024 . ^ "MlBibTeX's Architecture | Zeeba TV" . river-valley.zeeba.tv . Retrieved 2016-04-21 . ^ Description of the package biblatex from Debian's wheezy distribution as of May 2011. ^ "Bibulous documentation — Bibulous 1.3.2 documentation" . nzhagen.github.io . Retrieved 2016-04-21 . ^ "Bibtex in Lisp?" . groups.google.com . Retrieved 2024-02-01 . ^ "CTAN: custom-bib – Customised BibTeX styles" . ctan.org . Retrieved 2024-02-01 . ^ "Bib-it: Help – Generate BibTeX styles" . bib-it.sourceforge.net . Retrieved 2024-02-01 . ^ Ricardo Vidal (2011-10-25). "HOWTO: Use Mendeley to create citations using LaTeX and BibTeX" . Mendeley.com . Retrieved 2016-04-21 . External links [ edit ] .mw-parser-output .side-box{margin:4px 0;box-sizing:border-box;border:1px solid #aaa;font-size:88%;line-height:1.25em;background-color:var(--background-color-interactive-subtle,#f8f9fa);display:flow-root}.mw-parser-output .side-box-abovebelow,.mw-parser-output .side-box-text{padding:0.25em 0.9em}.mw-parser-output .side-box-image{padding:2px 0 2px 0.9em;text-align:center}.mw-parser-output .side-box-imageright{padding:2px 0.9em 2px 0;text-align:center}@media(min-width:500px){.mw-parser-output .side-box-flex{display:flex;align-items:center}.mw-parser-output .side-box-text{flex:1;min-width:0}}@media(min-width:720px){.mw-parser-output .side-box{width:238px}.mw-parser-output .side-box-right{clear:right;float:right;margin-left:1em}.mw-parser-output .side-box-left{margin-right:1em}} @media print{body.ns-0 .mw-parser-output .sistersitebox{display:none!important}}@media screen{html.skin-theme-clientpref-night .mw-parser-output .sistersitebox img[src*="Wiktionary-logo-en-v2.svg"]{background-color:white}}@media screen and (prefers-color-scheme:dark){html.skin-theme-clientpref-os .mw-parser-output .sistersitebox img[src*="Wiktionary-logo-en-v2.svg"]{background-color:white}} .mw-parser-output .plainlist ol,.mw-parser-output .plainlist ul{line-height:inherit;list-style:none;margin:0;padding:0}.mw-parser-output .plainlist ol li,.mw-parser-output .plainlist ul li{margin-bottom:0} The Wikibook LaTeX has a page on the topic of: Bibliography Management Official website bibtex.org third-party site. BibTeXing . The original manual (1988) by the co-author of BibTeX, Oren Patashnik. Managing Citations and Your Bibliography with BibTeX by Jürgen Fenn (The PracTeX Journal 2006, number 4). BibTeX tutorial . Section from Getting to Grips with LaTeX tutorials. .mw-parser-output .hlist dl,.mw-parser-output .hlist ol,.mw-parser-output .hlist ul{margin:0;padding:0}.mw-parser-output .hlist dd,.mw-parser-output .hlist dt,.mw-parser-output .hlist li{margin:0;display:inline}.mw-parser-output .hlist.inline,.mw-parser-output .hlist.inline dl,.mw-parser-output .hlist.inline ol,.mw-parser-output .hlist.inline ul,.mw-parser-output .hlist dl dl,.mw-parser-output .hlist dl ol,.mw-parser-output .hlist dl ul,.mw-parser-output .hlist ol dl,.mw-parser-output .hlist ol ol,.mw-parser-output .hlist ol ul,.mw-parser-output .hlist ul dl,.mw-parser-output .hlist ul ol,.mw-parser-output .hlist ul ul{display:inline}.mw-parser-output .hlist .mw-empty-li{display:none}.mw-parser-output .hlist dt::after{content:": "}.mw-parser-output .hlist dd::after,.mw-parser-output .hlist li::after{content:" · ";font-weight:bold}.mw-parser-output .hlist dd:last-child::after,.mw-parser-output .hlist dt:last-child::after,.mw-parser-output .hlist li:last-child::after{content:none}.mw-parser-output .hlist dd dd:first-child::before,.mw-parser-output .hlist dd dt:first-child::before,.mw-parser-output .hlist dd li:first-child::before,.mw-parser-output .hlist dt dd:first-child::before,.mw-parser-output .hlist dt dt:first-child::before,.mw-parser-output .hlist dt li:first-child::before,.mw-parser-output .hlist li dd:first-child::before,.mw-parser-output .hlist li dt:first-child::before,.mw-parser-output .hlist li li:first-child::before{content:" (";font-weight:normal}.mw-parser-output .hlist dd dd:last-child::after,.mw-parser-output .hlist dd dt:last-child::after,.mw-parser-output .hlist dd li:last-child::after,.mw-parser-output .hlist dt dd:last-child::after,.mw-parser-output .hlist dt dt:last-child::after,.mw-parser-output .hlist dt li:last-child::after,.mw-parser-output .hlist li dd:last-child::after,.mw-parser-output .hlist li dt:last-child::after,.mw-parser-output .hlist li li:last-child::after{content:")";font-weight:normal}.mw-parser-output .hlist ol{counter-reset:listitem}.mw-parser-output .hlist ol>li{counter-increment:listitem}.mw-parser-output .hlist ol>li::before{content:" "counter(listitem)"\a0 "}.mw-parser-output .hlist dd ol>li:first-child::before,.mw-parser-output .hlist dt ol>li:first-child::before,.mw-parser-output .hlist li ol>li:first-child::before{content:" ("counter(listitem)"\a0 "} .mw-parser-output .navbox{box-sizing:border-box;border:1px solid #a2a9b1;width:100%;clear:both;font-size:88%;text-align:center;padding:1px;margin:1em auto 0}.mw-parser-output .navbox .navbox{margin-top:0}.mw-parser-output .navbox+.navbox,.mw-parser-output .navbox+.navbox-styles+.navbox{margin-top:-1px}.mw-parser-output .navbox-inner,.mw-parser-output .navbox-subgroup{width:100%}.mw-parser-output .navbox-group,.mw-parser-output .navbox-title,.mw-parser-output .navbox-abovebelow{padding:0.25em 1em;line-height:1.5em;text-align:center}.mw-parser-output .navbox-group{white-space:nowrap;text-align:right}.mw-parser-output .navbox,.mw-parser-output .navbox-subgroup{background-color:#fdfdfd}.mw-parser-output .navbox-list{line-height:1.5em;border-color:#fdfdfd}.mw-parser-output .navbox-list-with-group{text-align:left;border-left-width:2px;border-left-style:solid}.mw-parser-output tr+tr>.navbox-abovebelow,.mw-parser-output tr+tr>.navbox-group,.mw-parser-output tr+tr>.navbox-image,.mw-parser-output tr+tr>.navbox-list{border-top:2px solid #fdfdfd}.mw-parser-output .navbox-title{background-color:#ccf}.mw-parser-output .navbox-abovebelow,.mw-parser-output .navbox-group,.mw-parser-output .navbox-subgroup .navbox-title{background-color:#ddf}.mw-parser-output .navbox-subgroup .navbox-group,.mw-parser-output .navbox-subgroup .navbox-abovebelow{background-color:#e6e6ff}.mw-parser-output .navbox-even{background-color:#f7f7f7}.mw-parser-output .navbox-odd{background-color:transparent}.mw-parser-output .navbox .hlist td dl,.mw-parser-output .navbox .hlist td ol,.mw-parser-output .navbox .hlist td ul,.mw-parser-output .navbox td.hlist dl,.mw-parser-output .navbox td.hlist ol,.mw-parser-output .navbox td.hlist ul{padding:0.125em 0}.mw-parser-output .navbox .navbar{display:block;font-size:100%}.mw-parser-output .navbox-title .navbar{float:left;text-align:left;margin-right:0.5em}body.skin--responsive .mw-parser-output .navbox-image img{max-width:none!important}@media print{body.ns-0 .mw-parser-output .navbox{display:none!important}} .mw-parser-output .navbar{display:inline;font-size:88%;font-weight:normal}.mw-parser-output .navbar-collapse{float:left;text-align:left}.mw-parser-output .navbar-boxtext{word-spacing:0}.mw-parser-output .navbar ul{display:inline-block;white-space:nowrap;line-height:inherit}.mw-parser-output .navbar-brackets::before{margin-right:-0.125em;content:"[ "}.mw-parser-output .navbar-brackets::after{margin-left:-0.125em;content:" ]"}.mw-parser-output .navbar li{word-spacing:-0.125em}.mw-parser-output .navbar a>span,.mw-parser-output .navbar a>abbr{text-decoration:inherit}.mw-parser-output .navbar-mini abbr{font-variant:small-caps;border-bottom:none;text-decoration:none;cursor:inherit}.mw-parser-output .navbar-ct-full{font-size:114%;margin:0 7em}.mw-parser-output .navbar-ct-mini{font-size:114%;margin:0 4em}html.skin-theme-clientpref-night .mw-parser-output .navbar li a abbr{color:var(--color-base)!important}@media(prefers-color-scheme:dark){html.skin-theme-clientpref-os .mw-parser-output .navbar li a abbr{color:var(--color-base)!important}}@media print{.mw-parser-output .navbar{display:none!important}} v t e TeX Macro packages AMS-TeX ArabTeX CircuiTikZ ConTeXt LaTeX MusiXTeX Plain TeX OpTeX PSTricks TikZ TIPA XyMTeX Alternative TeX engines Active LuaTeX pdfTeX XeTeX Deprecated Aleph ε-TeX NTS Omega Distributions Active MiKTeX TeX Live MacTeX W32TeX TeXPortal TinyTeX Deprecated AmigaTeX fpTeX gwTeX OzTeX PasTeX teTeX Community CTAN DANTE TUGboat The PracTeX Journal Related BibTeX DVI Computer Modern Metafont MetaPost WEB CWEB TeX Directory Structure TeX font metric Texinfo extensions Authority control databases : National Germany <img src="https://login.wikimedia.org/wiki/Special:CentralAutoLogin/start?type=1x1" alt="" width="1" height="1" style="border: none; position: absolute;"> Retrieved from " https://en.wikipedia.org/w/index.php?title=BibTeX&oldid=1237834920 " Categories : BibTeX Bibliography file formats Hidden categories: Articles with short description Short description matches Wikidata This page was last edited on 31 July 2024, at 18:32 (UTC) . Text is available under the Creative Commons Attribution-ShareAlike License 4.0 ;
additional terms may apply. By using this site, you agree to the Terms of Use and Privacy Policy . Wikipedia® is a registered trademark of the Wikimedia Foundation, Inc. , a non-profit organization. Privacy policy About Wikipedia Disclaimers Contact Wikipedia Code of Conduct Developers Statistics Cookie statement Mobile view
======>
https://old.reddit.com/r/rust/comments/1fktop2/bulk_inserting_json_into_postgresql_using/
-->>-->>
Hi there,   

   Would anyone here have a simple and efficient way to insert jsonb data into a Postgresql table in Rust?   

   I've been looping on the vector containg my data but performances aren't great as expected. I can probably parallelize but I'm hoping one of you have a better way to do it (i.e. in a single statement)?   

   I've been struggling to pass the vector values as parameters in 1 single query    

   Sample code excerpt below:   

   #[tokio::main]
async fn main() -> Result<(), Error> {
   let mut 
json_vec
: Vec<serde_json::Value> = Vec::new();
    
json_vec
.
push
(serde_json::from_str("{\"a\":\"foo\"}").expect("x"));
    
json_vec
.
push
(serde_json::from_str("{\"a\":\"fdsoo\"}").expect("x"));
    
json_vec
.
push
(serde_json::from_str("{\"a\":\"fdssoo\"}").expect("x"));
    
    for market in 
json_vec
.iter() {
        client
        .query(
            "INSERT INTO markets (market) \
                    VALUES ($1);",
            &[&serde_json::value::to_value(market).expect("Cant serialize market")],
        )
        .await?;
    }
}
   

   Table definition:   

   CREATE TABLE IF NOT EXISTS public.markets
(
    id integer NOT NULL DEFAULT nextval('markets_id_seq'::regclass),
    market jsonb,
    CONSTRAINT markets_pkey PRIMARY KEY (id)
)
   
   

   Thanks in advance!   
   

======>
https://github.com/cuducos/airnope
-->>-->>
Repository files navigation README GPL-3.0 license AirNope A simple, silent bot that keeps Telegram groups free from crypto airdrop spams. What is AirNope? What it does When the user posting the message is not one of the group admins or the group owner: deletes the message that is probably airdrop spam removes from the group the user who posted it Loading flowchart TB

MSG[Message] --> RE(Detect words like “airdrop”)

RE-->|Yes| ZSC(Compare to spam labels)
ZSC-->|Looks like spam| S{{Spam}}
S--> RU[Remove user]
S--> RM[Remove message]

ZSC-->|Does not look like spam| NS
RE-->|No| NS{{Not spam}}

subgraph AirNope
    RE
    ZSC
    NS
    S
end If the user posting the message is the owner or an admin of the group, AirNop just rects with 👀 instead. What it does not do does not post any message in the group (avoids pollution of the group) does not keep any history of messages or users How to use AirNope? Add @airnope_bot to your group Make @airnope_bot an admin able to delete messages and remove users FAQ Is there a privacy policy? AirNope is designed to detect spam messages, and in some cases, it might log them for debugging purposes. While logging these messages, there is a possibility that personally identifiable information (PII) might be inadvertently captured. We understand the importance of privacy and are committed to ensuring that any PII collected is not processed or persisted. Logs are temporary and are deleted periodically, either during each release cycle or when the bot is restarted. We are also considering the creation of a database of spam messages to further enhance our spam detection capabilities. However, due to our concern about user privacy and the potential risk of PII exposure, this initiative is not currently part of our roadmap. We will continue to prioritize privacy and will take all necessary measures to protect user information should this initiative be considered in the future. Can I test it to see what messages AirNope would consider spam? Sure! On the web The easiet way to use the playground . On your Telegram The second easiest way is to create a group and add AirNope . Since you would then be the group owner, you will need a second account (friends!) to join the group to see the bot in action. On your terminal Alternatively, you can use Docker and your terminal to test messages locally. Download the Docker image and start the REPL : $ docker pull ghcr.io/cuducos/airnope:main $ docker run --rm -it ghcr.io/cuducos/airnope:main airnope repl Can I run my own instance of AirNope? Absolutely! And it is really simple: Create a Telegram bot to get your bot's handle and your Telegram API token Download the Docker image with docker pull ghcr.io/cuducos/airnope:main Start the bot with docker run -e TELOXIDE_TOKEN=<TOKEN> ghcr.io/cuducos/airnope:main
======>
https://old.reddit.com/r/rust/comments/1fklutx/iced_layershell_iced_sessionshell_has_publish/
-->>-->>
exwlshelleventloop    is a the platform binding for iced for wayland platform, especially for layerhsell and sessionlock. Now it follows the newest version of iced.   

   iced_layershell now has multi layershell support, which can be used to create something like notification daemon, one example is    lala-bar   .   

   iced_sessionlock can be used to create lock program on wayland platform, one example is    twenty   , and our version of    waylock    is in process   

   https://github.com/waycrate/exwlshelleventloop/releases/tag/v0.7.0-beta1   
   

======>
https://old.reddit.com/r/rust/comments/1fl2qjb/some_questions_about_sqlite_and_test/
-->>-->>
I encountered some issues using SQLite in Rust. I wrote some methods involving SQL operations, and I want to write some test cases for this code. I don’t want the test cases to affect my normal logic, so I encapsulated a method:   

   pub fn with_connection<F, T>(op: F) -> Result<T>
where
    F: FnOnce(&mut Database) -> Result<T>,
{

    #[cfg(test)]
    {
        
    }
    #[cfg(not(test))]
    {
        
        let pool = get_pool()?;
        let mut conn = Database::PooledConnection(pool.get().map_err(|e| AppError::Other(format!("get conn failed: {}", e)))?);
        op(&mut conn)
    }
}
   

   This way, when performing some operations (such as deletion), we can directly use:   

   pub fn delete_data_from_db(table_name: String) -> Result<usize> {
    with_connection(|conn| {
        let sql = format!("DELETE FROM {}", table_name);
        let deleted_count = conn.execute(&sql, params![])?;
        Ok(deleted_count)
    })
}
   

   Now the only issue is how I should return an SQLite connection in the `with_connection` method during testing that does not affect the normal data. I first thought of using `sqlite::Connection::open_in_memory()` to create an in-memory database for subsequent operations. This requires us to be able to get the same SQLite instance for each call. I am not sure if there is a better solution. I am a beginner, and I would appreciate any help anyone can provide!   
   

======>
https://gaultier.github.io/blog/rust_c++_interop_trick.html
-->>-->>
The calls alice.write_comment(..) and RUST_write_comment(alice, ..) are strictly equivalent and in fact, a C++ compiler will transform the former into the latter in a pure C++ codebase, if you look at the assembly generated. So our Rust function is just mimicking what the C++ compiler would do anyway. However, we are free to have the User argument be in any position in the function. An other way to say it: We rely on the API, not the ABI, compatibility. The Rust implementation can freely read and modify private members of the C++ class, for example the comment_count field is only accessible in C++ through the getter, but Rust can just access it as if it was public. That's because public/private are just rules enforced by the C++ compiler. However your CPU does not know nor care. The bytes are the bytes. If you can access the bytes at runtime, it does not matter that they were marked 'private' in the source code. We have to use tedious casts which is normal. We are indeed reinterpreting memory from one type ( User ) to another ( UserC ). This is allowed by the standard because the C++ class is a 'standard layout class'. If it was not the case, this would be undefined behavior and likely work on some platforms but break on others.

======>
https://old.reddit.com/r/rust/comments/1fkout1/mocks_get_a_mock_rest_apis_with_zero_coding/
-->>-->>
Inspired by the npm package    json-server   , I created a CLI tool called    mocks    written in Rust that can launch a mock REST API server. This tool is designed for creating and running mock servers for testing and development purposes.   

   I've just published the repository, and I'd love to get your feedback.   

   If you have any questions or suggestions, feel free to reach out to me on GitHub or via the email provided in the repository.   

   https://github.com/mocks-rs/mocks   
   

======>
https://old.reddit.com/r/rust/comments/1fl1gk2/a_simple_script_for_running_crosscompiled_rust/
-->>-->>
```bash   

   !/bin/bash   

   Before running this script, make sure to install the following packages:   

   sudo apt-get install qemu-user qemu-user-static jq   

   tests=$(cargo test --no-run --target armv7-unknown-linux-gnueabihf \
    --message-format=json | tee /dev/stderr | jq -r \
    'select(.profile.test == true) | .executable')   

   for exe in $tests; do   

   echo "Running tests in $exe"
qemu-arm-static -L /usr/arm-linux-gnueabihf $exe
   

   done
```   
   

======>
https://old.reddit.com/r/rust/comments/1fkgrnu/practice_v010_release/
-->>-->>
We are excited to announce the first release of the    Practice Branch   !   

   This branch is designed to help developers of all levels practice Rust by solving exercises at their own pace.   

   Here's what's included in this version:   

   Key Features:   

   
   Fork and Practice   : Easily fork the repository and switch to the practice branch to start solving exercises.   
   Track Your Progress   : Solve the exercises directly in the repo and track your progress over time.   
   Beginner Friendly   : Whether you're new to Rust or an experienced developer, the exercises are designed to help you grow your Rust skills.   
   Self-Paced Learning   : No deadlines, just you and your learning journey.   
   

   Getting Started:   

   
   Fork the repository:    GitHub Repo   
   Switch to the    practice    branch.   
   Start solving the exercises provided.   
   Commit your progress to track your learning.   
   

   We hope this helps you on your journey to mastering Rust.   

   Have a great day.   

   Happy Rust Journey!.🦀   
   

======>
https://github.com/dragostis/chili
-->>-->>
Repository files navigation README Apache-2.0 license MIT license chili Rust port of Spice , a low-overhead parallelization library Very low-overhead parallelization primitive, almost identical to rayon::join . At any fork point during computation, it may run the two
passed closures in parallel. It works best in cases where there are many small computations and where it is
expensive to estimate how many are left on the current branch in order to stop trying to share work across threads. Example The following example sums up all nodes in a binary tree in parallel. fn sum ( node : & Node , scope : & mut Scope < ' _ > ) -> u64 { let ( left , right ) = scope . join ( |s| node . left . as_deref ( ) . map ( |n| sum ( n , s ) ) . unwrap_or_default ( ) , |s| node . right . as_deref ( ) . map ( |n| sum ( n , s ) ) . unwrap_or_default ( ) , ) ; node . val + left + right } This is the ideal example since per-node computation is very cheap and the
nodes don't keep track of how many descendants are left. Benchmarks The following benchmarks measure the time it takes to sum up all the values in
a balanced binary tree with varying number of nodes. AMD Ryzen 7 4800HS (8 cores) While the improvement over the baseline in the 134M nodes case is close to the
theoretical maximum, it's worth noting that the actual time per node is 0.8ns
vs. a theoretical 1.8 / 8 = 0.2ns, if we're to compare against the 1K nodes
case. Number of nodes Baseline Rayon chili Baseline / chili 1023 1.8 µs 51.1 µs 3.4 µs x0.53 16777215 94.4 ms 58.1 ms 13.6 ms x6.94 134217727 797.5 ms 497.2 ms 101.8 ms x7.83 Apple M1 (8 cores) Number of nodes Baseline Rayon chili Baseline / chili 1023 1.6 µs 29.2 µs 3.5 µs x0.46 16777215 39.4 ms 40.5 ms 11.2 ms x3.51 67108863 156.5 ms 167.1 ms 44.3 ms x3.53 chili overhead on AMD Ryzen 7 4800HS (8 cores) The overhead in the 1K nodes case remains approximately constant with respect
to the number of threads. Number of nodes Baseline 1 thread 2 threads 4 threads 8 threads 1023 1.8 ns 3.5 ns 3.5 ns 3.5 ns 3.5 ns
=====>
https://old.reddit.com/r/rust/comments/1fkxuzx/reading_large_100gb_files/
-->>-->>
As the title says, I am searching ways to read huge files (100GB+).
I know that I can split the file but I specifically want to try and read this large file, I do not even need ro edit it, only read it and I want to know what would be the most efficient and optimized way of doing so. It is like a challenge for me but nothing seems to be enough for this size and most apps cannot handle it properly. 
Thank you for you insights <3    
   

======>
https://old.reddit.com/r/rust/comments/1fkzjkf/poker_over_ssh/
-->>-->>
I wrote a    text user interface (TUI) poker app    to help host private poker games. I'm looking to get some tips on my Rust code, specifically if there are better ways to organize the project, and if there're Rust features I may be overlooking that could help the library and app designs.   

   The gist is the poker game is implemented as a finite state machine (FSM), where the underlying    game data    struct is a generic over the different states. That game data struct is then wrapped in an    enum    that controls the    FSM transitions   .   

   I wanted to avoid using web and async frameworks, and instead wanted to focus on something lower level for the networking, so I used    mio    to poll over non-blocking sockets for the majority of the networking code. The    TUI    is made with Ratatui (really enjoyed developing in Ratatui overall), and poker game commands are parsed with    clap   .   

   Overall, coming from mostly Python, Rust was a bit funky to get used to, but I've come to enjoy the language's built-in tooling and rigor that allowed me to develop in confidence   
   

======>
https://old.reddit.com/r/rust/comments/1fkl97n/my_python_code_is_faster_than_my_rust_code_what/
-->>-->>
EDIT    Solved by using BufReader, Rust now averages at 0.073 ms vs Python's 0.938 ms. Anyhow, feel free to suggest further improvements.   

   

   Hi!   

   I've been coding in Python for over a decade. I've been dabbling with Rust for two years here and there, but I always wanted to properly learn it.   

   Recently, I wrote a Python code to read a    BibTeX    file and create in-memory objects. This could be an excellent project to improve my Rust skills, so I rewrote everything in Rust.   

   But then, when comparing the runtime in both projects, the Rust one takes twice the time to finish running. Can you help me spot what's wrong with my Rust code?   

   Rust averaged 2ms per entry, Python averaged 1ms per entry   

   My main goal with this post is to help me improve my Rust code, but as a secondary goal, I'd also like tips on how to better write "parsing" tools.   

   Here are    bibpy    and    bibrust   . Important to mention: both codes assume the BibTeX file is formatted correctly.   

   Here are some helpful pointers to my code:   

   
   next_entry in python    vs    next_entry in rust   
   get_category in python    vs    get_category in rust   
   get_key in python    vs    get_key in rust   
   get_next_element in python    vs    get_next_element in rust   
   dir walking in python    vs    dir walking in rust   
   

   If anyone finds it useful, here's a BibTeX example:   

   @article{123,
author = {Doe, John and Doe, Sarah},
title = {Fantastic Paper},
year = {2024},
abstract = {The best paper ever written.},
pages = {71–111},
numpages = {41},
keywords = {Fantastic Keyword, Awesome Keyword}
}
   
   
